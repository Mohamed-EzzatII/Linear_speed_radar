
Linear_Speed_Sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000033ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  00800060  000033ec  00003480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008000a8  008000a8  000034c8  2**0
                  ALLOC
  3 .stab         00003414  00000000  00000000  000034c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001a4e  00000000  00000000  000068dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000832a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000846a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000085da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a223  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b10e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bebc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c01c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c2a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ca77  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 c8 09 	jmp	0x1390	; 0x1390 <__vector_1>
       8:	0c 94 fb 09 	jmp	0x13f6	; 0x13f6 <__vector_2>
       c:	0c 94 2e 0a 	jmp	0x145c	; 0x145c <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 94 0a 	jmp	0x1528	; 0x1528 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 61 0a 	jmp	0x14c2	; 0x14c2 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ee       	ldi	r30, 0xEC	; 236
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3a       	cpi	r26, 0xA8	; 168
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 ea       	ldi	r26, 0xA8	; 168
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3b       	cpi	r26, 0xB0	; 176
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3c 19 	call	0x3278	; 0x3278 <main>
      8a:	0c 94 f4 19 	jmp	0x33e8	; 0x33e8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 8c 19 	jmp	0x3318	; 0x3318 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e8       	ldi	r26, 0x8D	; 141
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a8 19 	jmp	0x3350	; 0x3350 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 98 19 	jmp	0x3330	; 0x3330 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b4 19 	jmp	0x3368	; 0x3368 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 98 19 	jmp	0x3330	; 0x3330 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b4 19 	jmp	0x3368	; 0x3368 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 8c 19 	jmp	0x3318	; 0x3318 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d e8       	ldi	r24, 0x8D	; 141
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a8 19 	jmp	0x3350	; 0x3350 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 98 19 	jmp	0x3330	; 0x3330 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 b4 19 	jmp	0x3368	; 0x3368 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 98 19 	jmp	0x3330	; 0x3330 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 b4 19 	jmp	0x3368	; 0x3368 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 98 19 	jmp	0x3330	; 0x3330 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 b4 19 	jmp	0x3368	; 0x3368 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 9c 19 	jmp	0x3338	; 0x3338 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b8 19 	jmp	0x3370	; 0x3370 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	88 30       	cpi	r24, 0x08	; 8
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <GPIO_setupPinDirection+0x1c>
     b60:	d5 c0       	rjmp	.+426    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	84 30       	cpi	r24, 0x04	; 4
     b66:	08 f0       	brcs	.+2      	; 0xb6a <GPIO_setupPinDirection+0x24>
     b68:	d1 c0       	rjmp	.+418    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <GPIO_setupPinDirection+0x3a>
     b7e:	43 c0       	rjmp	.+134    	; 0xc06 <GPIO_setupPinDirection+0xc0>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <GPIO_setupPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <GPIO_setupPinDirection+0x68>
     b92:	bc c0       	rjmp	.+376    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <GPIO_setupPinDirection+0x5a>
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <GPIO_setupPinDirection+0x118>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <GPIO_setupPinDirection+0x66>
     baa:	85 c0       	rjmp	.+266    	; 0xcb6 <GPIO_setupPinDirection+0x170>
     bac:	af c0       	rjmp	.+350    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	a1 f4       	brne	.+40     	; 0xbdc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <GPIO_setupPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <GPIO_setupPinDirection+0x88>
     bd6:	84 2b       	or	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	98 c0       	rjmp	.+304    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     bdc:	aa e3       	ldi	r26, 0x3A	; 58
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	ea e3       	ldi	r30, 0x3A	; 58
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <GPIO_setupPinDirection+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <GPIO_setupPinDirection+0xb0>
     bfe:	80 95       	com	r24
     c00:	84 23       	and	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	83 c0       	rjmp	.+262    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	a1 f4       	brne	.+40     	; 0xc34 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     c0c:	a7 e3       	ldi	r26, 0x37	; 55
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e3       	ldi	r30, 0x37	; 55
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <GPIO_setupPinDirection+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <GPIO_setupPinDirection+0xe0>
     c2e:	84 2b       	or	r24, r20
     c30:	8c 93       	st	X, r24
     c32:	6c c0       	rjmp	.+216    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     c34:	a7 e3       	ldi	r26, 0x37	; 55
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e7 e3       	ldi	r30, 0x37	; 55
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <GPIO_setupPinDirection+0x10c>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <GPIO_setupPinDirection+0x108>
     c56:	80 95       	com	r24
     c58:	84 23       	and	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	57 c0       	rjmp	.+174    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	a1 f4       	brne	.+40     	; 0xc8c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <GPIO_setupPinDirection+0x13c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <GPIO_setupPinDirection+0x138>
     c86:	84 2b       	or	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     c8c:	a4 e3       	ldi	r26, 0x34	; 52
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e4 e3       	ldi	r30, 0x34	; 52
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 2e       	mov	r0, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <GPIO_setupPinDirection+0x164>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <GPIO_setupPinDirection+0x160>
     cae:	80 95       	com	r24
     cb0:	84 23       	and	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	2b c0       	rjmp	.+86     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	a1 f4       	brne	.+40     	; 0xce4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     cbc:	a1 e3       	ldi	r26, 0x31	; 49
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e1 e3       	ldi	r30, 0x31	; 49
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <GPIO_setupPinDirection+0x194>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <GPIO_setupPinDirection+0x190>
     cde:	84 2b       	or	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     ce4:	a1 e3       	ldi	r26, 0x31	; 49
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e1 e3       	ldi	r30, 0x31	; 49
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <GPIO_setupPinDirection+0x1bc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <GPIO_setupPinDirection+0x1b8>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <GPIO_writePin+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <GPIO_writePin+0x8>
     d24:	0f 92       	push	r0
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	6a 83       	std	Y+2, r22	; 0x02
     d2e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	88 30       	cpi	r24, 0x08	; 8
     d34:	08 f0       	brcs	.+2      	; 0xd38 <GPIO_writePin+0x1c>
     d36:	d5 c0       	rjmp	.+426    	; 0xee2 <GPIO_writePin+0x1c6>
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	08 f0       	brcs	.+2      	; 0xd40 <GPIO_writePin+0x24>
     d3e:	d1 c0       	rjmp	.+418    	; 0xee2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	3d 83       	std	Y+5, r19	; 0x05
     d48:	2c 83       	std	Y+4, r18	; 0x04
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <GPIO_writePin+0x3a>
     d54:	43 c0       	rjmp	.+134    	; 0xddc <GPIO_writePin+0xc0>
     d56:	2c 81       	ldd	r18, Y+4	; 0x04
     d58:	3d 81       	ldd	r19, Y+5	; 0x05
     d5a:	22 30       	cpi	r18, 0x02	; 2
     d5c:	31 05       	cpc	r19, r1
     d5e:	2c f4       	brge	.+10     	; 0xd6a <GPIO_writePin+0x4e>
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	71 f0       	breq	.+28     	; 0xd84 <GPIO_writePin+0x68>
     d68:	bc c0       	rjmp	.+376    	; 0xee2 <GPIO_writePin+0x1c6>
     d6a:	2c 81       	ldd	r18, Y+4	; 0x04
     d6c:	3d 81       	ldd	r19, Y+5	; 0x05
     d6e:	22 30       	cpi	r18, 0x02	; 2
     d70:	31 05       	cpc	r19, r1
     d72:	09 f4       	brne	.+2      	; 0xd76 <GPIO_writePin+0x5a>
     d74:	5f c0       	rjmp	.+190    	; 0xe34 <GPIO_writePin+0x118>
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	83 30       	cpi	r24, 0x03	; 3
     d7c:	91 05       	cpc	r25, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <GPIO_writePin+0x66>
     d80:	85 c0       	rjmp	.+266    	; 0xe8c <GPIO_writePin+0x170>
     d82:	af c0       	rjmp	.+350    	; 0xee2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	a1 f4       	brne	.+40     	; 0xdb2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     d8a:	ab e3       	ldi	r26, 0x3B	; 59
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	eb e3       	ldi	r30, 0x3B	; 59
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <GPIO_writePin+0x8c>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <GPIO_writePin+0x88>
     dac:	84 2b       	or	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	98 c0       	rjmp	.+304    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     db2:	ab e3       	ldi	r26, 0x3B	; 59
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	eb e3       	ldi	r30, 0x3B	; 59
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <GPIO_writePin+0xb4>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <GPIO_writePin+0xb0>
     dd4:	80 95       	com	r24
     dd6:	84 23       	and	r24, r20
     dd8:	8c 93       	st	X, r24
     dda:	83 c0       	rjmp	.+262    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	a1 f4       	brne	.+40     	; 0xe0a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     de2:	a8 e3       	ldi	r26, 0x38	; 56
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e8 e3       	ldi	r30, 0x38	; 56
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <GPIO_writePin+0xe4>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <GPIO_writePin+0xe0>
     e04:	84 2b       	or	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	6c c0       	rjmp	.+216    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     e0a:	a8 e3       	ldi	r26, 0x38	; 56
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e8 e3       	ldi	r30, 0x38	; 56
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <GPIO_writePin+0x10c>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <GPIO_writePin+0x108>
     e2c:	80 95       	com	r24
     e2e:	84 23       	and	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	57 c0       	rjmp	.+174    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	a1 f4       	brne	.+40     	; 0xe62 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     e3a:	a5 e3       	ldi	r26, 0x35	; 53
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e5 e3       	ldi	r30, 0x35	; 53
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <GPIO_writePin+0x13c>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <GPIO_writePin+0x138>
     e5c:	84 2b       	or	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	40 c0       	rjmp	.+128    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     e62:	a5 e3       	ldi	r26, 0x35	; 53
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e5 e3       	ldi	r30, 0x35	; 53
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <GPIO_writePin+0x164>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <GPIO_writePin+0x160>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	2b c0       	rjmp	.+86     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	a1 f4       	brne	.+40     	; 0xeba <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     e92:	a2 e3       	ldi	r26, 0x32	; 50
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e2 e3       	ldi	r30, 0x32	; 50
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <GPIO_writePin+0x194>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <GPIO_writePin+0x190>
     eb4:	84 2b       	or	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	14 c0       	rjmp	.+40     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     eba:	a2 e3       	ldi	r26, 0x32	; 50
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e2 e3       	ldi	r30, 0x32	; 50
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <GPIO_writePin+0x1bc>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <GPIO_writePin+0x1b8>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <GPIO_readPin+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <GPIO_readPin+0x8>
     efa:	0f 92       	push	r0
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	8a 83       	std	Y+2, r24	; 0x02
     f02:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     f04:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	88 30       	cpi	r24, 0x08	; 8
     f0a:	08 f0       	brcs	.+2      	; 0xf0e <GPIO_readPin+0x1c>
     f0c:	84 c0       	rjmp	.+264    	; 0x1016 <GPIO_readPin+0x124>
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	84 30       	cpi	r24, 0x04	; 4
     f12:	08 f0       	brcs	.+2      	; 0xf16 <GPIO_readPin+0x24>
     f14:	80 c0       	rjmp	.+256    	; 0x1016 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	3d 83       	std	Y+5, r19	; 0x05
     f1e:	2c 83       	std	Y+4, r18	; 0x04
     f20:	4c 81       	ldd	r20, Y+4	; 0x04
     f22:	5d 81       	ldd	r21, Y+5	; 0x05
     f24:	41 30       	cpi	r20, 0x01	; 1
     f26:	51 05       	cpc	r21, r1
     f28:	79 f1       	breq	.+94     	; 0xf88 <GPIO_readPin+0x96>
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	9d 81       	ldd	r25, Y+5	; 0x05
     f2e:	82 30       	cpi	r24, 0x02	; 2
     f30:	91 05       	cpc	r25, r1
     f32:	34 f4       	brge	.+12     	; 0xf40 <GPIO_readPin+0x4e>
     f34:	2c 81       	ldd	r18, Y+4	; 0x04
     f36:	3d 81       	ldd	r19, Y+5	; 0x05
     f38:	21 15       	cp	r18, r1
     f3a:	31 05       	cpc	r19, r1
     f3c:	69 f0       	breq	.+26     	; 0xf58 <GPIO_readPin+0x66>
     f3e:	6b c0       	rjmp	.+214    	; 0x1016 <GPIO_readPin+0x124>
     f40:	4c 81       	ldd	r20, Y+4	; 0x04
     f42:	5d 81       	ldd	r21, Y+5	; 0x05
     f44:	42 30       	cpi	r20, 0x02	; 2
     f46:	51 05       	cpc	r21, r1
     f48:	b9 f1       	breq	.+110    	; 0xfb8 <GPIO_readPin+0xc6>
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	9d 81       	ldd	r25, Y+5	; 0x05
     f4e:	83 30       	cpi	r24, 0x03	; 3
     f50:	91 05       	cpc	r25, r1
     f52:	09 f4       	brne	.+2      	; 0xf56 <GPIO_readPin+0x64>
     f54:	49 c0       	rjmp	.+146    	; 0xfe8 <GPIO_readPin+0xf6>
     f56:	5f c0       	rjmp	.+190    	; 0x1016 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     f58:	e9 e3       	ldi	r30, 0x39	; 57
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	88 2f       	mov	r24, r24
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	a9 01       	movw	r20, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <GPIO_readPin+0x7e>
     f6c:	55 95       	asr	r21
     f6e:	47 95       	ror	r20
     f70:	8a 95       	dec	r24
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <GPIO_readPin+0x7a>
     f74:	ca 01       	movw	r24, r20
     f76:	81 70       	andi	r24, 0x01	; 1
     f78:	90 70       	andi	r25, 0x00	; 0
     f7a:	88 23       	and	r24, r24
     f7c:	19 f0       	breq	.+6      	; 0xf84 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	89 83       	std	Y+1, r24	; 0x01
     f82:	49 c0       	rjmp	.+146    	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     f84:	19 82       	std	Y+1, r1	; 0x01
     f86:	47 c0       	rjmp	.+142    	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     f88:	e6 e3       	ldi	r30, 0x36	; 54
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	a9 01       	movw	r20, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <GPIO_readPin+0xae>
     f9c:	55 95       	asr	r21
     f9e:	47 95       	ror	r20
     fa0:	8a 95       	dec	r24
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <GPIO_readPin+0xaa>
     fa4:	ca 01       	movw	r24, r20
     fa6:	81 70       	andi	r24, 0x01	; 1
     fa8:	90 70       	andi	r25, 0x00	; 0
     faa:	88 23       	and	r24, r24
     fac:	19 f0       	breq	.+6      	; 0xfb4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	89 83       	std	Y+1, r24	; 0x01
     fb2:	31 c0       	rjmp	.+98     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fb4:	19 82       	std	Y+1, r1	; 0x01
     fb6:	2f c0       	rjmp	.+94     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     fb8:	e3 e3       	ldi	r30, 0x33	; 51
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	a9 01       	movw	r20, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <GPIO_readPin+0xde>
     fcc:	55 95       	asr	r21
     fce:	47 95       	ror	r20
     fd0:	8a 95       	dec	r24
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <GPIO_readPin+0xda>
     fd4:	ca 01       	movw	r24, r20
     fd6:	81 70       	andi	r24, 0x01	; 1
     fd8:	90 70       	andi	r25, 0x00	; 0
     fda:	88 23       	and	r24, r24
     fdc:	19 f0       	breq	.+6      	; 0xfe4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	89 83       	std	Y+1, r24	; 0x01
     fe2:	19 c0       	rjmp	.+50     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fe4:	19 82       	std	Y+1, r1	; 0x01
     fe6:	17 c0       	rjmp	.+46     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     fe8:	e0 e3       	ldi	r30, 0x30	; 48
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	88 2f       	mov	r24, r24
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	a9 01       	movw	r20, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <GPIO_readPin+0x10e>
     ffc:	55 95       	asr	r21
     ffe:	47 95       	ror	r20
    1000:	8a 95       	dec	r24
    1002:	e2 f7       	brpl	.-8      	; 0xffc <GPIO_readPin+0x10a>
    1004:	ca 01       	movw	r24, r20
    1006:	81 70       	andi	r24, 0x01	; 1
    1008:	90 70       	andi	r25, 0x00	; 0
    100a:	88 23       	and	r24, r24
    100c:	19 f0       	breq	.+6      	; 0x1014 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	89 83       	std	Y+1, r24	; 0x01
    1012:	01 c0       	rjmp	.+2      	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1014:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1016:	89 81       	ldd	r24, Y+1	; 0x01
}
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	00 d0       	rcall	.+0      	; 0x102e <GPIO_setupPortDirection+0x6>
    102e:	00 d0       	rcall	.+0      	; 0x1030 <GPIO_setupPortDirection+0x8>
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	89 83       	std	Y+1, r24	; 0x01
    1036:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	84 30       	cpi	r24, 0x04	; 4
    103c:	90 f5       	brcc	.+100    	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	3c 83       	std	Y+4, r19	; 0x04
    1046:	2b 83       	std	Y+3, r18	; 0x03
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	9c 81       	ldd	r25, Y+4	; 0x04
    104c:	81 30       	cpi	r24, 0x01	; 1
    104e:	91 05       	cpc	r25, r1
    1050:	d1 f0       	breq	.+52     	; 0x1086 <GPIO_setupPortDirection+0x5e>
    1052:	2b 81       	ldd	r18, Y+3	; 0x03
    1054:	3c 81       	ldd	r19, Y+4	; 0x04
    1056:	22 30       	cpi	r18, 0x02	; 2
    1058:	31 05       	cpc	r19, r1
    105a:	2c f4       	brge	.+10     	; 0x1066 <GPIO_setupPortDirection+0x3e>
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	61 f0       	breq	.+24     	; 0x107c <GPIO_setupPortDirection+0x54>
    1064:	1e c0       	rjmp	.+60     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
    1066:	2b 81       	ldd	r18, Y+3	; 0x03
    1068:	3c 81       	ldd	r19, Y+4	; 0x04
    106a:	22 30       	cpi	r18, 0x02	; 2
    106c:	31 05       	cpc	r19, r1
    106e:	81 f0       	breq	.+32     	; 0x1090 <GPIO_setupPortDirection+0x68>
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	9c 81       	ldd	r25, Y+4	; 0x04
    1074:	83 30       	cpi	r24, 0x03	; 3
    1076:	91 05       	cpc	r25, r1
    1078:	81 f0       	breq	.+32     	; 0x109a <GPIO_setupPortDirection+0x72>
    107a:	13 c0       	rjmp	.+38     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    107c:	ea e3       	ldi	r30, 0x3A	; 58
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	80 83       	st	Z, r24
    1084:	0e c0       	rjmp	.+28     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1086:	e7 e3       	ldi	r30, 0x37	; 55
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	80 83       	st	Z, r24
    108e:	09 c0       	rjmp	.+18     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1090:	e4 e3       	ldi	r30, 0x34	; 52
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	80 83       	st	Z, r24
    1098:	04 c0       	rjmp	.+8      	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    109a:	e1 e3       	ldi	r30, 0x31	; 49
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	80 83       	st	Z, r24
			break;
		}
	}
}
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	08 95       	ret

000010b0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <GPIO_writePort+0x6>
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <GPIO_writePort+0x8>
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	89 83       	std	Y+1, r24	; 0x01
    10be:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	84 30       	cpi	r24, 0x04	; 4
    10c4:	90 f5       	brcc	.+100    	; 0x112a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	3c 83       	std	Y+4, r19	; 0x04
    10ce:	2b 83       	std	Y+3, r18	; 0x03
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	9c 81       	ldd	r25, Y+4	; 0x04
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	91 05       	cpc	r25, r1
    10d8:	d1 f0       	breq	.+52     	; 0x110e <GPIO_writePort+0x5e>
    10da:	2b 81       	ldd	r18, Y+3	; 0x03
    10dc:	3c 81       	ldd	r19, Y+4	; 0x04
    10de:	22 30       	cpi	r18, 0x02	; 2
    10e0:	31 05       	cpc	r19, r1
    10e2:	2c f4       	brge	.+10     	; 0x10ee <GPIO_writePort+0x3e>
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	9c 81       	ldd	r25, Y+4	; 0x04
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	61 f0       	breq	.+24     	; 0x1104 <GPIO_writePort+0x54>
    10ec:	1e c0       	rjmp	.+60     	; 0x112a <GPIO_writePort+0x7a>
    10ee:	2b 81       	ldd	r18, Y+3	; 0x03
    10f0:	3c 81       	ldd	r19, Y+4	; 0x04
    10f2:	22 30       	cpi	r18, 0x02	; 2
    10f4:	31 05       	cpc	r19, r1
    10f6:	81 f0       	breq	.+32     	; 0x1118 <GPIO_writePort+0x68>
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	9c 81       	ldd	r25, Y+4	; 0x04
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	91 05       	cpc	r25, r1
    1100:	81 f0       	breq	.+32     	; 0x1122 <GPIO_writePort+0x72>
    1102:	13 c0       	rjmp	.+38     	; 0x112a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1104:	eb e3       	ldi	r30, 0x3B	; 59
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	80 83       	st	Z, r24
    110c:	0e c0       	rjmp	.+28     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    110e:	e8 e3       	ldi	r30, 0x38	; 56
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	80 83       	st	Z, r24
    1116:	09 c0       	rjmp	.+18     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1118:	e5 e3       	ldi	r30, 0x35	; 53
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	80 83       	st	Z, r24
    1120:	04 c0       	rjmp	.+8      	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1122:	e2 e3       	ldi	r30, 0x32	; 50
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	80 83       	st	Z, r24
			break;
		}
	}
}
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	00 d0       	rcall	.+0      	; 0x113e <GPIO_readPort+0x6>
    113e:	00 d0       	rcall	.+0      	; 0x1140 <GPIO_readPort+0x8>
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1146:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	84 30       	cpi	r24, 0x04	; 4
    114c:	90 f5       	brcc	.+100    	; 0x11b2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	3c 83       	std	Y+4, r19	; 0x04
    1156:	2b 83       	std	Y+3, r18	; 0x03
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	91 05       	cpc	r25, r1
    1160:	d1 f0       	breq	.+52     	; 0x1196 <GPIO_readPort+0x5e>
    1162:	2b 81       	ldd	r18, Y+3	; 0x03
    1164:	3c 81       	ldd	r19, Y+4	; 0x04
    1166:	22 30       	cpi	r18, 0x02	; 2
    1168:	31 05       	cpc	r19, r1
    116a:	2c f4       	brge	.+10     	; 0x1176 <GPIO_readPort+0x3e>
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	61 f0       	breq	.+24     	; 0x118c <GPIO_readPort+0x54>
    1174:	1e c0       	rjmp	.+60     	; 0x11b2 <GPIO_readPort+0x7a>
    1176:	2b 81       	ldd	r18, Y+3	; 0x03
    1178:	3c 81       	ldd	r19, Y+4	; 0x04
    117a:	22 30       	cpi	r18, 0x02	; 2
    117c:	31 05       	cpc	r19, r1
    117e:	81 f0       	breq	.+32     	; 0x11a0 <GPIO_readPort+0x68>
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	9c 81       	ldd	r25, Y+4	; 0x04
    1184:	83 30       	cpi	r24, 0x03	; 3
    1186:	91 05       	cpc	r25, r1
    1188:	81 f0       	breq	.+32     	; 0x11aa <GPIO_readPort+0x72>
    118a:	13 c0       	rjmp	.+38     	; 0x11b2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    118c:	e9 e3       	ldi	r30, 0x39	; 57
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	0e c0       	rjmp	.+28     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1196:	e6 e3       	ldi	r30, 0x36	; 54
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	89 83       	std	Y+1, r24	; 0x01
    119e:	09 c0       	rjmp	.+18     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    11a0:	e3 e3       	ldi	r30, 0x33	; 51
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	04 c0       	rjmp	.+8      	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    11aa:	e0 e3       	ldi	r30, 0x30	; 48
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <INT_init>:
/*
 * Description :
 * A function to initialize our external interrupt
 */
void INT_init(const INT_CONF* config)
{
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	00 d0       	rcall	.+0      	; 0x11c8 <INT_init+0x6>
    11c8:	cd b7       	in	r28, 0x3d	; 61
    11ca:	de b7       	in	r29, 0x3e	; 62
    11cc:	9a 83       	std	Y+2, r25	; 0x02
    11ce:	89 83       	std	Y+1, r24	; 0x01
	/* set the global interrupt enable */
	SET_BIT(SREG,7);
    11d0:	af e5       	ldi	r26, 0x5F	; 95
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	ef e5       	ldi	r30, 0x5F	; 95
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	80 68       	ori	r24, 0x80	; 128
    11dc:	8c 93       	st	X, r24

	/* enable the interrupts for our chosen module*/
	GICR |= config->intNumber;
    11de:	ab e5       	ldi	r26, 0x5B	; 91
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	eb e5       	ldi	r30, 0x5B	; 91
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	90 81       	ld	r25, Z
    11e8:	e9 81       	ldd	r30, Y+1	; 0x01
    11ea:	fa 81       	ldd	r31, Y+2	; 0x02
    11ec:	80 81       	ld	r24, Z
    11ee:	89 2b       	or	r24, r25
    11f0:	8c 93       	st	X, r24

	/* selecting the mode for interrupt */

	/*for interrupt zero , we control it with the 2 LSBs in MCUCR */
	if( (config->intNumber) == INT0_ID)
    11f2:	e9 81       	ldd	r30, Y+1	; 0x01
    11f4:	fa 81       	ldd	r31, Y+2	; 0x02
    11f6:	80 81       	ld	r24, Z
    11f8:	80 34       	cpi	r24, 0x40	; 64
    11fa:	59 f4       	brne	.+22     	; 0x1212 <INT_init+0x50>
	{
		MCUCR|=(config->intMode);
    11fc:	a5 e5       	ldi	r26, 0x55	; 85
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	e5 e5       	ldi	r30, 0x55	; 85
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	90 81       	ld	r25, Z
    1206:	e9 81       	ldd	r30, Y+1	; 0x01
    1208:	fa 81       	ldd	r31, Y+2	; 0x02
    120a:	81 81       	ldd	r24, Z+1	; 0x01
    120c:	89 2b       	or	r24, r25
    120e:	8c 93       	st	X, r24
    1210:	34 c0       	rjmp	.+104    	; 0x127a <INT_init+0xb8>
	}

	/*for interrupt one , we control it with the 3rd and 4th bits in MCUCR */
	else if( (config->intNumber) == INT1_ID)
    1212:	e9 81       	ldd	r30, Y+1	; 0x01
    1214:	fa 81       	ldd	r31, Y+2	; 0x02
    1216:	80 81       	ld	r24, Z
    1218:	80 38       	cpi	r24, 0x80	; 128
    121a:	91 f4       	brne	.+36     	; 0x1240 <INT_init+0x7e>
	{
		MCUCR |= ( (config->intMode) << 2);
    121c:	a5 e5       	ldi	r26, 0x55	; 85
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	e5 e5       	ldi	r30, 0x55	; 85
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	28 2f       	mov	r18, r24
    1228:	e9 81       	ldd	r30, Y+1	; 0x01
    122a:	fa 81       	ldd	r31, Y+2	; 0x02
    122c:	81 81       	ldd	r24, Z+1	; 0x01
    122e:	88 2f       	mov	r24, r24
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	88 0f       	add	r24, r24
    1234:	99 1f       	adc	r25, r25
    1236:	88 0f       	add	r24, r24
    1238:	99 1f       	adc	r25, r25
    123a:	82 2b       	or	r24, r18
    123c:	8c 93       	st	X, r24
    123e:	1d c0       	rjmp	.+58     	; 0x127a <INT_init+0xb8>
	}

	/*for interrupt one , we control it with the 6th bit in MCUCR */
	else if( (config->intNumber) == INT2_ID)
    1240:	e9 81       	ldd	r30, Y+1	; 0x01
    1242:	fa 81       	ldd	r31, Y+2	; 0x02
    1244:	80 81       	ld	r24, Z
    1246:	80 32       	cpi	r24, 0x20	; 32
    1248:	c1 f4       	brne	.+48     	; 0x127a <INT_init+0xb8>
	{
		/* 2 & 1 = 0 - > shift left by 6 and put in MCUCSR then 6th bit is 0 (falling edge)
		 * 3 & 1 = 1 - > shift left by 6 and put in MCUCSR then 6th bit is 1 (rising edge)
		 */
		MCUCSR |= ( (config->intMode) & 1 ) << 6;
    124a:	a4 e5       	ldi	r26, 0x54	; 84
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	e4 e5       	ldi	r30, 0x54	; 84
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	28 2f       	mov	r18, r24
    1256:	e9 81       	ldd	r30, Y+1	; 0x01
    1258:	fa 81       	ldd	r31, Y+2	; 0x02
    125a:	81 81       	ldd	r24, Z+1	; 0x01
    125c:	88 2f       	mov	r24, r24
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	81 70       	andi	r24, 0x01	; 1
    1262:	90 70       	andi	r25, 0x00	; 0
    1264:	00 24       	eor	r0, r0
    1266:	96 95       	lsr	r25
    1268:	87 95       	ror	r24
    126a:	07 94       	ror	r0
    126c:	96 95       	lsr	r25
    126e:	87 95       	ror	r24
    1270:	07 94       	ror	r0
    1272:	98 2f       	mov	r25, r24
    1274:	80 2d       	mov	r24, r0
    1276:	82 2b       	or	r24, r18
    1278:	8c 93       	st	X, r24
	}
}
    127a:	0f 90       	pop	r0
    127c:	0f 90       	pop	r0
    127e:	cf 91       	pop	r28
    1280:	df 91       	pop	r29
    1282:	08 95       	ret

00001284 <INT_deInit>:
/*
 * Description :
 * A function to initialize our external interrupt
 */
void INT_deInit(const INT_CONF* config)
{
    1284:	df 93       	push	r29
    1286:	cf 93       	push	r28
    1288:	00 d0       	rcall	.+0      	; 0x128a <INT_deInit+0x6>
    128a:	cd b7       	in	r28, 0x3d	; 61
    128c:	de b7       	in	r29, 0x3e	; 62
    128e:	9a 83       	std	Y+2, r25	; 0x02
    1290:	89 83       	std	Y+1, r24	; 0x01

	/* disable the interrupts for our chosen module*/
	GICR&=(~(config->intNumber));
    1292:	ab e5       	ldi	r26, 0x5B	; 91
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	eb e5       	ldi	r30, 0x5B	; 91
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	98 2f       	mov	r25, r24
    129e:	e9 81       	ldd	r30, Y+1	; 0x01
    12a0:	fa 81       	ldd	r31, Y+2	; 0x02
    12a2:	80 81       	ld	r24, Z
    12a4:	80 95       	com	r24
    12a6:	89 23       	and	r24, r25
    12a8:	8c 93       	st	X, r24
}
    12aa:	0f 90       	pop	r0
    12ac:	0f 90       	pop	r0
    12ae:	cf 91       	pop	r28
    12b0:	df 91       	pop	r29
    12b2:	08 95       	ret

000012b4 <INT_changeConfig>:
/*
 * Description :
 * A function to change the interrupt cause mode
 */
void INT_changeConfig(const INT_CONF* config)
{
    12b4:	df 93       	push	r29
    12b6:	cf 93       	push	r28
    12b8:	00 d0       	rcall	.+0      	; 0x12ba <INT_changeConfig+0x6>
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
    12be:	9a 83       	std	Y+2, r25	; 0x02
    12c0:	89 83       	std	Y+1, r24	; 0x01
	/* selecting the mode for interrupt */

	/*for interrupt zero , we control it with the 2 LSBs in MCUCR */
	if( (config->intNumber) == INT0_ID)
    12c2:	e9 81       	ldd	r30, Y+1	; 0x01
    12c4:	fa 81       	ldd	r31, Y+2	; 0x02
    12c6:	80 81       	ld	r24, Z
    12c8:	80 34       	cpi	r24, 0x40	; 64
    12ca:	59 f4       	brne	.+22     	; 0x12e2 <INT_changeConfig+0x2e>
	{
		MCUCR|=(config->intMode);
    12cc:	a5 e5       	ldi	r26, 0x55	; 85
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	e5 e5       	ldi	r30, 0x55	; 85
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	90 81       	ld	r25, Z
    12d6:	e9 81       	ldd	r30, Y+1	; 0x01
    12d8:	fa 81       	ldd	r31, Y+2	; 0x02
    12da:	81 81       	ldd	r24, Z+1	; 0x01
    12dc:	89 2b       	or	r24, r25
    12de:	8c 93       	st	X, r24
    12e0:	34 c0       	rjmp	.+104    	; 0x134a <INT_changeConfig+0x96>
	}

	/*for interrupt one , we control it with the 3rd and 4th bits in MCUCR */
	else if( (config->intNumber) == INT1_ID)
    12e2:	e9 81       	ldd	r30, Y+1	; 0x01
    12e4:	fa 81       	ldd	r31, Y+2	; 0x02
    12e6:	80 81       	ld	r24, Z
    12e8:	80 38       	cpi	r24, 0x80	; 128
    12ea:	91 f4       	brne	.+36     	; 0x1310 <INT_changeConfig+0x5c>
	{
		MCUCR |= ( (config->intMode) << 2);
    12ec:	a5 e5       	ldi	r26, 0x55	; 85
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	e5 e5       	ldi	r30, 0x55	; 85
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	28 2f       	mov	r18, r24
    12f8:	e9 81       	ldd	r30, Y+1	; 0x01
    12fa:	fa 81       	ldd	r31, Y+2	; 0x02
    12fc:	81 81       	ldd	r24, Z+1	; 0x01
    12fe:	88 2f       	mov	r24, r24
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	88 0f       	add	r24, r24
    1304:	99 1f       	adc	r25, r25
    1306:	88 0f       	add	r24, r24
    1308:	99 1f       	adc	r25, r25
    130a:	82 2b       	or	r24, r18
    130c:	8c 93       	st	X, r24
    130e:	1d c0       	rjmp	.+58     	; 0x134a <INT_changeConfig+0x96>
	}

	/*for interrupt one , we control it with the 6th bit in MCUCR */
	else if( (config->intNumber) == INT2_ID)
    1310:	e9 81       	ldd	r30, Y+1	; 0x01
    1312:	fa 81       	ldd	r31, Y+2	; 0x02
    1314:	80 81       	ld	r24, Z
    1316:	80 32       	cpi	r24, 0x20	; 32
    1318:	c1 f4       	brne	.+48     	; 0x134a <INT_changeConfig+0x96>
	{
		/* 2 & 1 = 0 - > shift left by 6 and put in MCUCSR then 6th bit is 0 (falling edge)
		 * 3 & 1 = 1 - > shift left by 6 and put in MCUCSR then 6th bit is 1 (rising edge)
		 */
		MCUCSR |= ( (config->intMode) & 1 ) << 6;
    131a:	a4 e5       	ldi	r26, 0x54	; 84
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	e4 e5       	ldi	r30, 0x54	; 84
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	28 2f       	mov	r18, r24
    1326:	e9 81       	ldd	r30, Y+1	; 0x01
    1328:	fa 81       	ldd	r31, Y+2	; 0x02
    132a:	81 81       	ldd	r24, Z+1	; 0x01
    132c:	88 2f       	mov	r24, r24
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	81 70       	andi	r24, 0x01	; 1
    1332:	90 70       	andi	r25, 0x00	; 0
    1334:	00 24       	eor	r0, r0
    1336:	96 95       	lsr	r25
    1338:	87 95       	ror	r24
    133a:	07 94       	ror	r0
    133c:	96 95       	lsr	r25
    133e:	87 95       	ror	r24
    1340:	07 94       	ror	r0
    1342:	98 2f       	mov	r25, r24
    1344:	80 2d       	mov	r24, r0
    1346:	82 2b       	or	r24, r18
    1348:	8c 93       	st	X, r24
	}
}
    134a:	0f 90       	pop	r0
    134c:	0f 90       	pop	r0
    134e:	cf 91       	pop	r28
    1350:	df 91       	pop	r29
    1352:	08 95       	ret

00001354 <INT_setISR>:
/*
 * Description :
 * A function to set ISR function code using call back technique
 */
void INT_setISR(void (*ptr)(void) , uint8 interrupt_number)
{
    1354:	df 93       	push	r29
    1356:	cf 93       	push	r28
    1358:	00 d0       	rcall	.+0      	; 0x135a <INT_setISR+0x6>
    135a:	0f 92       	push	r0
    135c:	cd b7       	in	r28, 0x3d	; 61
    135e:	de b7       	in	r29, 0x3e	; 62
    1360:	9a 83       	std	Y+2, r25	; 0x02
    1362:	89 83       	std	Y+1, r24	; 0x01
    1364:	6b 83       	std	Y+3, r22	; 0x03
	if(interrupt_number < 3)
    1366:	8b 81       	ldd	r24, Y+3	; 0x03
    1368:	83 30       	cpi	r24, 0x03	; 3
    136a:	60 f4       	brcc	.+24     	; 0x1384 <INT_setISR+0x30>
		g_callBackPtr[interrupt_number] = ptr;
    136c:	8b 81       	ldd	r24, Y+3	; 0x03
    136e:	88 2f       	mov	r24, r24
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	29 81       	ldd	r18, Y+1	; 0x01
    1374:	3a 81       	ldd	r19, Y+2	; 0x02
    1376:	88 0f       	add	r24, r24
    1378:	99 1f       	adc	r25, r25
    137a:	fc 01       	movw	r30, r24
    137c:	e8 55       	subi	r30, 0x58	; 88
    137e:	ff 4f       	sbci	r31, 0xFF	; 255
    1380:	31 83       	std	Z+1, r19	; 0x01
    1382:	20 83       	st	Z, r18
}
    1384:	0f 90       	pop	r0
    1386:	0f 90       	pop	r0
    1388:	0f 90       	pop	r0
    138a:	cf 91       	pop	r28
    138c:	df 91       	pop	r29
    138e:	08 95       	ret

00001390 <__vector_1>:
/*
 * Description :
 * ISR of INT0
 */
ISR(INT0_vect)
{
    1390:	1f 92       	push	r1
    1392:	0f 92       	push	r0
    1394:	0f b6       	in	r0, 0x3f	; 63
    1396:	0f 92       	push	r0
    1398:	11 24       	eor	r1, r1
    139a:	2f 93       	push	r18
    139c:	3f 93       	push	r19
    139e:	4f 93       	push	r20
    13a0:	5f 93       	push	r21
    13a2:	6f 93       	push	r22
    13a4:	7f 93       	push	r23
    13a6:	8f 93       	push	r24
    13a8:	9f 93       	push	r25
    13aa:	af 93       	push	r26
    13ac:	bf 93       	push	r27
    13ae:	ef 93       	push	r30
    13b0:	ff 93       	push	r31
    13b2:	df 93       	push	r29
    13b4:	cf 93       	push	r28
    13b6:	cd b7       	in	r28, 0x3d	; 61
    13b8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr[0] != NULL_PTR)
    13ba:	80 91 a8 00 	lds	r24, 0x00A8
    13be:	90 91 a9 00 	lds	r25, 0x00A9
    13c2:	00 97       	sbiw	r24, 0x00	; 0
    13c4:	29 f0       	breq	.+10     	; 0x13d0 <__vector_1+0x40>
	{
		g_callBackPtr[0]();
    13c6:	e0 91 a8 00 	lds	r30, 0x00A8
    13ca:	f0 91 a9 00 	lds	r31, 0x00A9
    13ce:	09 95       	icall
	}

}
    13d0:	cf 91       	pop	r28
    13d2:	df 91       	pop	r29
    13d4:	ff 91       	pop	r31
    13d6:	ef 91       	pop	r30
    13d8:	bf 91       	pop	r27
    13da:	af 91       	pop	r26
    13dc:	9f 91       	pop	r25
    13de:	8f 91       	pop	r24
    13e0:	7f 91       	pop	r23
    13e2:	6f 91       	pop	r22
    13e4:	5f 91       	pop	r21
    13e6:	4f 91       	pop	r20
    13e8:	3f 91       	pop	r19
    13ea:	2f 91       	pop	r18
    13ec:	0f 90       	pop	r0
    13ee:	0f be       	out	0x3f, r0	; 63
    13f0:	0f 90       	pop	r0
    13f2:	1f 90       	pop	r1
    13f4:	18 95       	reti

000013f6 <__vector_2>:
/*
 * Description :
 * ISR of INT1
 */
ISR(INT1_vect)
{
    13f6:	1f 92       	push	r1
    13f8:	0f 92       	push	r0
    13fa:	0f b6       	in	r0, 0x3f	; 63
    13fc:	0f 92       	push	r0
    13fe:	11 24       	eor	r1, r1
    1400:	2f 93       	push	r18
    1402:	3f 93       	push	r19
    1404:	4f 93       	push	r20
    1406:	5f 93       	push	r21
    1408:	6f 93       	push	r22
    140a:	7f 93       	push	r23
    140c:	8f 93       	push	r24
    140e:	9f 93       	push	r25
    1410:	af 93       	push	r26
    1412:	bf 93       	push	r27
    1414:	ef 93       	push	r30
    1416:	ff 93       	push	r31
    1418:	df 93       	push	r29
    141a:	cf 93       	push	r28
    141c:	cd b7       	in	r28, 0x3d	; 61
    141e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr[1] != NULL_PTR)
    1420:	80 91 aa 00 	lds	r24, 0x00AA
    1424:	90 91 ab 00 	lds	r25, 0x00AB
    1428:	00 97       	sbiw	r24, 0x00	; 0
    142a:	29 f0       	breq	.+10     	; 0x1436 <__vector_2+0x40>
	{
		g_callBackPtr[1]();
    142c:	e0 91 aa 00 	lds	r30, 0x00AA
    1430:	f0 91 ab 00 	lds	r31, 0x00AB
    1434:	09 95       	icall
	}
}
    1436:	cf 91       	pop	r28
    1438:	df 91       	pop	r29
    143a:	ff 91       	pop	r31
    143c:	ef 91       	pop	r30
    143e:	bf 91       	pop	r27
    1440:	af 91       	pop	r26
    1442:	9f 91       	pop	r25
    1444:	8f 91       	pop	r24
    1446:	7f 91       	pop	r23
    1448:	6f 91       	pop	r22
    144a:	5f 91       	pop	r21
    144c:	4f 91       	pop	r20
    144e:	3f 91       	pop	r19
    1450:	2f 91       	pop	r18
    1452:	0f 90       	pop	r0
    1454:	0f be       	out	0x3f, r0	; 63
    1456:	0f 90       	pop	r0
    1458:	1f 90       	pop	r1
    145a:	18 95       	reti

0000145c <__vector_3>:
/*
 * Description :
 * ISR of INT2
 */
ISR(INT2_vect)
{
    145c:	1f 92       	push	r1
    145e:	0f 92       	push	r0
    1460:	0f b6       	in	r0, 0x3f	; 63
    1462:	0f 92       	push	r0
    1464:	11 24       	eor	r1, r1
    1466:	2f 93       	push	r18
    1468:	3f 93       	push	r19
    146a:	4f 93       	push	r20
    146c:	5f 93       	push	r21
    146e:	6f 93       	push	r22
    1470:	7f 93       	push	r23
    1472:	8f 93       	push	r24
    1474:	9f 93       	push	r25
    1476:	af 93       	push	r26
    1478:	bf 93       	push	r27
    147a:	ef 93       	push	r30
    147c:	ff 93       	push	r31
    147e:	df 93       	push	r29
    1480:	cf 93       	push	r28
    1482:	cd b7       	in	r28, 0x3d	; 61
    1484:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr[2] != NULL_PTR)
    1486:	80 91 ac 00 	lds	r24, 0x00AC
    148a:	90 91 ad 00 	lds	r25, 0x00AD
    148e:	00 97       	sbiw	r24, 0x00	; 0
    1490:	29 f0       	breq	.+10     	; 0x149c <__vector_3+0x40>
	{
		g_callBackPtr[2]();
    1492:	e0 91 ac 00 	lds	r30, 0x00AC
    1496:	f0 91 ad 00 	lds	r31, 0x00AD
    149a:	09 95       	icall
	}
}
    149c:	cf 91       	pop	r28
    149e:	df 91       	pop	r29
    14a0:	ff 91       	pop	r31
    14a2:	ef 91       	pop	r30
    14a4:	bf 91       	pop	r27
    14a6:	af 91       	pop	r26
    14a8:	9f 91       	pop	r25
    14aa:	8f 91       	pop	r24
    14ac:	7f 91       	pop	r23
    14ae:	6f 91       	pop	r22
    14b0:	5f 91       	pop	r21
    14b2:	4f 91       	pop	r20
    14b4:	3f 91       	pop	r19
    14b6:	2f 91       	pop	r18
    14b8:	0f 90       	pop	r0
    14ba:	0f be       	out	0x3f, r0	; 63
    14bc:	0f 90       	pop	r0
    14be:	1f 90       	pop	r1
    14c0:	18 95       	reti

000014c2 <__vector_9>:

/****************************Functions and ISRs*********************************/

/* Normal mode ISR */
ISR(TIMER1_OVF_vect)
{
    14c2:	1f 92       	push	r1
    14c4:	0f 92       	push	r0
    14c6:	0f b6       	in	r0, 0x3f	; 63
    14c8:	0f 92       	push	r0
    14ca:	11 24       	eor	r1, r1
    14cc:	2f 93       	push	r18
    14ce:	3f 93       	push	r19
    14d0:	4f 93       	push	r20
    14d2:	5f 93       	push	r21
    14d4:	6f 93       	push	r22
    14d6:	7f 93       	push	r23
    14d8:	8f 93       	push	r24
    14da:	9f 93       	push	r25
    14dc:	af 93       	push	r26
    14de:	bf 93       	push	r27
    14e0:	ef 93       	push	r30
    14e2:	ff 93       	push	r31
    14e4:	df 93       	push	r29
    14e6:	cf 93       	push	r28
    14e8:	cd b7       	in	r28, 0x3d	; 61
    14ea:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    14ec:	80 91 ae 00 	lds	r24, 0x00AE
    14f0:	90 91 af 00 	lds	r25, 0x00AF
    14f4:	00 97       	sbiw	r24, 0x00	; 0
    14f6:	29 f0       	breq	.+10     	; 0x1502 <__vector_9+0x40>
	{
		(*g_callBackPtr)();
    14f8:	e0 91 ae 00 	lds	r30, 0x00AE
    14fc:	f0 91 af 00 	lds	r31, 0x00AF
    1500:	09 95       	icall
	}
}
    1502:	cf 91       	pop	r28
    1504:	df 91       	pop	r29
    1506:	ff 91       	pop	r31
    1508:	ef 91       	pop	r30
    150a:	bf 91       	pop	r27
    150c:	af 91       	pop	r26
    150e:	9f 91       	pop	r25
    1510:	8f 91       	pop	r24
    1512:	7f 91       	pop	r23
    1514:	6f 91       	pop	r22
    1516:	5f 91       	pop	r21
    1518:	4f 91       	pop	r20
    151a:	3f 91       	pop	r19
    151c:	2f 91       	pop	r18
    151e:	0f 90       	pop	r0
    1520:	0f be       	out	0x3f, r0	; 63
    1522:	0f 90       	pop	r0
    1524:	1f 90       	pop	r1
    1526:	18 95       	reti

00001528 <__vector_7>:

/* Compare mode ISR */
ISR(TIMER1_COMPA_vect)
{
    1528:	1f 92       	push	r1
    152a:	0f 92       	push	r0
    152c:	0f b6       	in	r0, 0x3f	; 63
    152e:	0f 92       	push	r0
    1530:	11 24       	eor	r1, r1
    1532:	2f 93       	push	r18
    1534:	3f 93       	push	r19
    1536:	4f 93       	push	r20
    1538:	5f 93       	push	r21
    153a:	6f 93       	push	r22
    153c:	7f 93       	push	r23
    153e:	8f 93       	push	r24
    1540:	9f 93       	push	r25
    1542:	af 93       	push	r26
    1544:	bf 93       	push	r27
    1546:	ef 93       	push	r30
    1548:	ff 93       	push	r31
    154a:	df 93       	push	r29
    154c:	cf 93       	push	r28
    154e:	cd b7       	in	r28, 0x3d	; 61
    1550:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1552:	80 91 ae 00 	lds	r24, 0x00AE
    1556:	90 91 af 00 	lds	r25, 0x00AF
    155a:	00 97       	sbiw	r24, 0x00	; 0
    155c:	29 f0       	breq	.+10     	; 0x1568 <__vector_7+0x40>
	{
		(*g_callBackPtr)();
    155e:	e0 91 ae 00 	lds	r30, 0x00AE
    1562:	f0 91 af 00 	lds	r31, 0x00AF
    1566:	09 95       	icall
	}
}
    1568:	cf 91       	pop	r28
    156a:	df 91       	pop	r29
    156c:	ff 91       	pop	r31
    156e:	ef 91       	pop	r30
    1570:	bf 91       	pop	r27
    1572:	af 91       	pop	r26
    1574:	9f 91       	pop	r25
    1576:	8f 91       	pop	r24
    1578:	7f 91       	pop	r23
    157a:	6f 91       	pop	r22
    157c:	5f 91       	pop	r21
    157e:	4f 91       	pop	r20
    1580:	3f 91       	pop	r19
    1582:	2f 91       	pop	r18
    1584:	0f 90       	pop	r0
    1586:	0f be       	out	0x3f, r0	; 63
    1588:	0f 90       	pop	r0
    158a:	1f 90       	pop	r1
    158c:	18 95       	reti

0000158e <TIMER1_init>:
/*
 * Description :
 * A function to initialize the timer
 */
void TIMER1_init(const Timer1_ConfigType* config_ptr)
{
    158e:	df 93       	push	r29
    1590:	cf 93       	push	r28
    1592:	00 d0       	rcall	.+0      	; 0x1594 <TIMER1_init+0x6>
    1594:	cd b7       	in	r28, 0x3d	; 61
    1596:	de b7       	in	r29, 0x3e	; 62
    1598:	9a 83       	std	Y+2, r25	; 0x02
    159a:	89 83       	std	Y+1, r24	; 0x01
	 * For TCCR1A register : -
	 * non-pwm mode so FOC1A and FOC2A = 1
	 * in case of compare and normal mode , WGM11 & WGM10 & WGM13 = 0
	 * but only WGM12 = 1 in case of compare and equal to 0 in case of normal mode
	 */
	TCCR1A = ( 1 << FOC1A ) | ( 1 << FOC1B );
    159c:	ef e4       	ldi	r30, 0x4F	; 79
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	8c e0       	ldi	r24, 0x0C	; 12
    15a2:	80 83       	st	Z, r24
	/*
	 * For TCCR1B register : -
	 * WGM12 = 1 -> Compare mode or 0 -> Normal mode
	 * CS12 : CS10 = prescaler value
	 */
	TCCR1B = ( config_ptr -> prescaler ) | ( ( config_ptr -> mode ) << WGM12 );
    15a4:	ae e4       	ldi	r26, 0x4E	; 78
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	e9 81       	ldd	r30, Y+1	; 0x01
    15aa:	fa 81       	ldd	r31, Y+2	; 0x02
    15ac:	84 81       	ldd	r24, Z+4	; 0x04
    15ae:	28 2f       	mov	r18, r24
    15b0:	e9 81       	ldd	r30, Y+1	; 0x01
    15b2:	fa 81       	ldd	r31, Y+2	; 0x02
    15b4:	85 81       	ldd	r24, Z+5	; 0x05
    15b6:	88 2f       	mov	r24, r24
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	88 0f       	add	r24, r24
    15bc:	99 1f       	adc	r25, r25
    15be:	88 0f       	add	r24, r24
    15c0:	99 1f       	adc	r25, r25
    15c2:	88 0f       	add	r24, r24
    15c4:	99 1f       	adc	r25, r25
    15c6:	82 2b       	or	r24, r18
    15c8:	8c 93       	st	X, r24
	/*
	 * OCR1A and TCNT1 and TIMASK registers configurations : -
	 */

	/*Timer works in compare mode*/
	if(config_ptr->mode==COMPARE)
    15ca:	e9 81       	ldd	r30, Y+1	; 0x01
    15cc:	fa 81       	ldd	r31, Y+2	; 0x02
    15ce:	85 81       	ldd	r24, Z+5	; 0x05
    15d0:	81 30       	cpi	r24, 0x01	; 1
    15d2:	71 f4       	brne	.+28     	; 0x15f0 <TIMER1_init+0x62>
	{
		/*
		 * For OCR1A register : -
		 * we put the max compare mode value here in case of compare mode only
		 */
		OCR1A = config_ptr -> compare_value;
    15d4:	aa e4       	ldi	r26, 0x4A	; 74
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	e9 81       	ldd	r30, Y+1	; 0x01
    15da:	fa 81       	ldd	r31, Y+2	; 0x02
    15dc:	82 81       	ldd	r24, Z+2	; 0x02
    15de:	93 81       	ldd	r25, Z+3	; 0x03
    15e0:	11 96       	adiw	r26, 0x01	; 1
    15e2:	9c 93       	st	X, r25
    15e4:	8e 93       	st	-X, r24

		/*
		 * For TIMSK register : -
		 * we enable compare mode (A) interrupt
		 */
		TIMSK=(1<<OCIE1A);
    15e6:	e9 e5       	ldi	r30, 0x59	; 89
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 e1       	ldi	r24, 0x10	; 16
    15ec:	80 83       	st	Z, r24
    15ee:	12 c0       	rjmp	.+36     	; 0x1614 <TIMER1_init+0x86>
	}

	/*Timer works in Normal mode*/
	else if(config_ptr->mode==NORMAL)
    15f0:	e9 81       	ldd	r30, Y+1	; 0x01
    15f2:	fa 81       	ldd	r31, Y+2	; 0x02
    15f4:	85 81       	ldd	r24, Z+5	; 0x05
    15f6:	88 23       	and	r24, r24
    15f8:	69 f4       	brne	.+26     	; 0x1614 <TIMER1_init+0x86>
	{
		/*
		 * For TCNT1 register : -
		 * we put the initial counter value here
		 */
		TCNT1 = config_ptr -> initial_value;
    15fa:	ac e4       	ldi	r26, 0x4C	; 76
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	e9 81       	ldd	r30, Y+1	; 0x01
    1600:	fa 81       	ldd	r31, Y+2	; 0x02
    1602:	80 81       	ld	r24, Z
    1604:	91 81       	ldd	r25, Z+1	; 0x01
    1606:	11 96       	adiw	r26, 0x01	; 1
    1608:	9c 93       	st	X, r25
    160a:	8e 93       	st	-X, r24

		/*
		 * For TIMSK register : -
		 * we enable Normal mode interrupt
		 */
		TIMSK = ( 1 << TOIE1 );
    160c:	e9 e5       	ldi	r30, 0x59	; 89
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	84 e0       	ldi	r24, 0x04	; 4
    1612:	80 83       	st	Z, r24
	}
}
    1614:	0f 90       	pop	r0
    1616:	0f 90       	pop	r0
    1618:	cf 91       	pop	r28
    161a:	df 91       	pop	r29
    161c:	08 95       	ret

0000161e <TIMER1_deInit>:
/*
 * Description :
 * A function to disable the timer
 */
void TIMER1_deInit(void)
{
    161e:	df 93       	push	r29
    1620:	cf 93       	push	r28
    1622:	cd b7       	in	r28, 0x3d	; 61
    1624:	de b7       	in	r29, 0x3e	; 62
	/* clear all registers */
	TCCR1A = TCCR1B = TIMSK = TCNT1 = OCR1A = 0;
    1626:	6f e4       	ldi	r22, 0x4F	; 79
    1628:	70 e0       	ldi	r23, 0x00	; 0
    162a:	4e e4       	ldi	r20, 0x4E	; 78
    162c:	50 e0       	ldi	r21, 0x00	; 0
    162e:	29 e5       	ldi	r18, 0x59	; 89
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	ac e4       	ldi	r26, 0x4C	; 76
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	ea e4       	ldi	r30, 0x4A	; 74
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	11 82       	std	Z+1, r1	; 0x01
    163c:	10 82       	st	Z, r1
    163e:	80 81       	ld	r24, Z
    1640:	91 81       	ldd	r25, Z+1	; 0x01
    1642:	11 96       	adiw	r26, 0x01	; 1
    1644:	9c 93       	st	X, r25
    1646:	8e 93       	st	-X, r24
    1648:	8d 91       	ld	r24, X+
    164a:	9c 91       	ld	r25, X
    164c:	11 97       	sbiw	r26, 0x01	; 1
    164e:	f9 01       	movw	r30, r18
    1650:	80 83       	st	Z, r24
    1652:	f9 01       	movw	r30, r18
    1654:	80 81       	ld	r24, Z
    1656:	fa 01       	movw	r30, r20
    1658:	80 83       	st	Z, r24
    165a:	fa 01       	movw	r30, r20
    165c:	80 81       	ld	r24, Z
    165e:	fb 01       	movw	r30, r22
    1660:	80 83       	st	Z, r24
}
    1662:	cf 91       	pop	r28
    1664:	df 91       	pop	r29
    1666:	08 95       	ret

00001668 <TIMER1_getTCRT>:
/*
 * Description :
 * A function to disable the timer
 */
uint16 TIMER1_getTCRT(void)
{
    1668:	df 93       	push	r29
    166a:	cf 93       	push	r28
    166c:	cd b7       	in	r28, 0x3d	; 61
    166e:	de b7       	in	r29, 0x3e	; 62
	/* clear all registers */
	return TCNT1;
    1670:	ec e4       	ldi	r30, 0x4C	; 76
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	91 81       	ldd	r25, Z+1	; 0x01
}
    1678:	cf 91       	pop	r28
    167a:	df 91       	pop	r29
    167c:	08 95       	ret

0000167e <TIMER1_setCallBack>:
/*
 * Description : -
 * A function to set callback function
 */
void TIMER1_setCallBack(void ( *a_ptr ) ( void ))
{
    167e:	df 93       	push	r29
    1680:	cf 93       	push	r28
    1682:	00 d0       	rcall	.+0      	; 0x1684 <TIMER1_setCallBack+0x6>
    1684:	cd b7       	in	r28, 0x3d	; 61
    1686:	de b7       	in	r29, 0x3e	; 62
    1688:	9a 83       	std	Y+2, r25	; 0x02
    168a:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = (volatile void (*)(void))a_ptr;
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	9a 81       	ldd	r25, Y+2	; 0x02
    1690:	90 93 af 00 	sts	0x00AF, r25
    1694:	80 93 ae 00 	sts	0x00AE, r24

}
    1698:	0f 90       	pop	r0
    169a:	0f 90       	pop	r0
    169c:	cf 91       	pop	r28
    169e:	df 91       	pop	r29
    16a0:	08 95       	ret

000016a2 <UART_init>:

/* Description :
 * A function to initialize the UART communication protocol using dynamic configurations
 */
void UART_init(const config *conf)
{
    16a2:	df 93       	push	r29
    16a4:	cf 93       	push	r28
    16a6:	00 d0       	rcall	.+0      	; 0x16a8 <UART_init+0x6>
    16a8:	00 d0       	rcall	.+0      	; 0x16aa <UART_init+0x8>
    16aa:	cd b7       	in	r28, 0x3d	; 61
    16ac:	de b7       	in	r29, 0x3e	; 62
    16ae:	9c 83       	std	Y+4, r25	; 0x04
    16b0:	8b 83       	std	Y+3, r24	; 0x03
	/* double speed mode */
	SET_BIT(UCSRA,U2X);
    16b2:	ab e2       	ldi	r26, 0x2B	; 43
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	eb e2       	ldi	r30, 0x2B	; 43
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 81       	ld	r24, Z
    16bc:	82 60       	ori	r24, 0x02	; 2
    16be:	8c 93       	st	X, r24

	/* Enable receiver and transmitter */
	UCSRB |= (1<<RXEN) | (1<<TXEN);
    16c0:	aa e2       	ldi	r26, 0x2A	; 42
    16c2:	b0 e0       	ldi	r27, 0x00	; 0
    16c4:	ea e2       	ldi	r30, 0x2A	; 42
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	80 81       	ld	r24, Z
    16ca:	88 61       	ori	r24, 0x18	; 24
    16cc:	8c 93       	st	X, r24

	/* register select - async mode - disable parity - 1 bit stop bit - 8-bit character size */
	UCSRC=(1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0) | (conf->parity) | (conf->stop) | (conf->bit);
    16ce:	a0 e4       	ldi	r26, 0x40	; 64
    16d0:	b0 e0       	ldi	r27, 0x00	; 0
    16d2:	eb 81       	ldd	r30, Y+3	; 0x03
    16d4:	fc 81       	ldd	r31, Y+4	; 0x04
    16d6:	91 81       	ldd	r25, Z+1	; 0x01
    16d8:	eb 81       	ldd	r30, Y+3	; 0x03
    16da:	fc 81       	ldd	r31, Y+4	; 0x04
    16dc:	80 81       	ld	r24, Z
    16de:	98 2b       	or	r25, r24
    16e0:	eb 81       	ldd	r30, Y+3	; 0x03
    16e2:	fc 81       	ldd	r31, Y+4	; 0x04
    16e4:	82 81       	ldd	r24, Z+2	; 0x02
    16e6:	89 2b       	or	r24, r25
    16e8:	86 68       	ori	r24, 0x86	; 134
    16ea:	8c 93       	st	X, r24

	/* set the baud rate */
	uint16 UBR_value = (F_CPU/ (8*(conf->baud_rate))) -1;
    16ec:	eb 81       	ldd	r30, Y+3	; 0x03
    16ee:	fc 81       	ldd	r31, Y+4	; 0x04
    16f0:	83 81       	ldd	r24, Z+3	; 0x03
    16f2:	94 81       	ldd	r25, Z+4	; 0x04
    16f4:	a5 81       	ldd	r26, Z+5	; 0x05
    16f6:	b6 81       	ldd	r27, Z+6	; 0x06
    16f8:	88 0f       	add	r24, r24
    16fa:	99 1f       	adc	r25, r25
    16fc:	aa 1f       	adc	r26, r26
    16fe:	bb 1f       	adc	r27, r27
    1700:	88 0f       	add	r24, r24
    1702:	99 1f       	adc	r25, r25
    1704:	aa 1f       	adc	r26, r26
    1706:	bb 1f       	adc	r27, r27
    1708:	88 0f       	add	r24, r24
    170a:	99 1f       	adc	r25, r25
    170c:	aa 1f       	adc	r26, r26
    170e:	bb 1f       	adc	r27, r27
    1710:	9c 01       	movw	r18, r24
    1712:	ad 01       	movw	r20, r26
    1714:	80 e0       	ldi	r24, 0x00	; 0
    1716:	94 e2       	ldi	r25, 0x24	; 36
    1718:	a4 ef       	ldi	r26, 0xF4	; 244
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	bc 01       	movw	r22, r24
    171e:	cd 01       	movw	r24, r26
    1720:	0e 94 56 19 	call	0x32ac	; 0x32ac <__udivmodsi4>
    1724:	da 01       	movw	r26, r20
    1726:	c9 01       	movw	r24, r18
    1728:	01 97       	sbiw	r24, 0x01	; 1
    172a:	9a 83       	std	Y+2, r25	; 0x02
    172c:	89 83       	std	Y+1, r24	; 0x01

	UBRRH = (UBR_value &0xFF00)>>8;
    172e:	e0 e4       	ldi	r30, 0x40	; 64
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	89 81       	ldd	r24, Y+1	; 0x01
    1734:	9a 81       	ldd	r25, Y+2	; 0x02
    1736:	89 2f       	mov	r24, r25
    1738:	99 27       	eor	r25, r25
    173a:	80 83       	st	Z, r24
	UBRRL = (uint8)(UBR_value&0xFF);
    173c:	e9 e2       	ldi	r30, 0x29	; 41
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	89 81       	ldd	r24, Y+1	; 0x01
    1742:	80 83       	st	Z, r24
}
    1744:	0f 90       	pop	r0
    1746:	0f 90       	pop	r0
    1748:	0f 90       	pop	r0
    174a:	0f 90       	pop	r0
    174c:	cf 91       	pop	r28
    174e:	df 91       	pop	r29
    1750:	08 95       	ret

00001752 <UART_sendByte>:
 * Description :
 * A Function that send a byte using UART
 * return type is void and it takes a pointer to constant data (char)
 */
void UART_sendByte(const uint8 *byte)
{
    1752:	df 93       	push	r29
    1754:	cf 93       	push	r28
    1756:	00 d0       	rcall	.+0      	; 0x1758 <UART_sendByte+0x6>
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
    175c:	9a 83       	std	Y+2, r25	; 0x02
    175e:	89 83       	std	Y+1, r24	; 0x01
	/* wait till the UDR is empty */
	while(BIT_IS_CLEAR(UCSRA,UDRE));
    1760:	eb e2       	ldi	r30, 0x2B	; 43
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	88 2f       	mov	r24, r24
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	80 72       	andi	r24, 0x20	; 32
    176c:	90 70       	andi	r25, 0x00	; 0
    176e:	00 97       	sbiw	r24, 0x00	; 0
    1770:	b9 f3       	breq	.-18     	; 0x1760 <UART_sendByte+0xe>

	/* transmit the data*/
	UDR= *byte;
    1772:	ec e2       	ldi	r30, 0x2C	; 44
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	a9 81       	ldd	r26, Y+1	; 0x01
    1778:	ba 81       	ldd	r27, Y+2	; 0x02
    177a:	8c 91       	ld	r24, X
    177c:	80 83       	st	Z, r24
}
    177e:	0f 90       	pop	r0
    1780:	0f 90       	pop	r0
    1782:	cf 91       	pop	r28
    1784:	df 91       	pop	r29
    1786:	08 95       	ret

00001788 <UART_receiveByte>:
 * Description :
 * A Function that receive a byte using UART
 * return type is void and it takes a pointer to char and change its value with data received
 */
void UART_receiveByte( uint8 *byte)
{
    1788:	df 93       	push	r29
    178a:	cf 93       	push	r28
    178c:	00 d0       	rcall	.+0      	; 0x178e <UART_receiveByte+0x6>
    178e:	cd b7       	in	r28, 0x3d	; 61
    1790:	de b7       	in	r29, 0x3e	; 62
    1792:	9a 83       	std	Y+2, r25	; 0x02
    1794:	89 83       	std	Y+1, r24	; 0x01
	/* wait till the data is received */
	while(BIT_IS_CLEAR(UCSRA,RXC));
    1796:	eb e2       	ldi	r30, 0x2B	; 43
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	88 23       	and	r24, r24
    179e:	dc f7       	brge	.-10     	; 0x1796 <UART_receiveByte+0xe>

	/* get the data*/
	*byte= UDR;
    17a0:	ec e2       	ldi	r30, 0x2C	; 44
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	e9 81       	ldd	r30, Y+1	; 0x01
    17a8:	fa 81       	ldd	r31, Y+2	; 0x02
    17aa:	80 83       	st	Z, r24
}
    17ac:	0f 90       	pop	r0
    17ae:	0f 90       	pop	r0
    17b0:	cf 91       	pop	r28
    17b2:	df 91       	pop	r29
    17b4:	08 95       	ret

000017b6 <UART_receiveString>:
 *
 * How does it work ?
 *the string ends with # as null , so we receive the whole string and replace # with null
 */
void UART_receiveString(uint8 *str)
{
    17b6:	df 93       	push	r29
    17b8:	cf 93       	push	r28
    17ba:	00 d0       	rcall	.+0      	; 0x17bc <UART_receiveString+0x6>
    17bc:	0f 92       	push	r0
    17be:	cd b7       	in	r28, 0x3d	; 61
    17c0:	de b7       	in	r29, 0x3e	; 62
    17c2:	9b 83       	std	Y+3, r25	; 0x03
    17c4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 counter=0;
    17c6:	19 82       	std	Y+1, r1	; 0x01

	/* receive the first byte */
	UART_receiveByte(str);
    17c8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ca:	9b 81       	ldd	r25, Y+3	; 0x03
    17cc:	0e 94 c4 0b 	call	0x1788	; 0x1788 <UART_receiveByte>
    17d0:	0c c0       	rjmp	.+24     	; 0x17ea <UART_receiveString+0x34>


	/* receive the whole string till the null (#) */
	while(str[counter] != '#' )
	{
		counter++;
    17d2:	89 81       	ldd	r24, Y+1	; 0x01
    17d4:	8f 5f       	subi	r24, 0xFF	; 255
    17d6:	89 83       	std	Y+1, r24	; 0x01
		UART_receiveByte(str+counter);
    17d8:	89 81       	ldd	r24, Y+1	; 0x01
    17da:	28 2f       	mov	r18, r24
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	8a 81       	ldd	r24, Y+2	; 0x02
    17e0:	9b 81       	ldd	r25, Y+3	; 0x03
    17e2:	82 0f       	add	r24, r18
    17e4:	93 1f       	adc	r25, r19
    17e6:	0e 94 c4 0b 	call	0x1788	; 0x1788 <UART_receiveByte>
	/* receive the first byte */
	UART_receiveByte(str);


	/* receive the whole string till the null (#) */
	while(str[counter] != '#' )
    17ea:	89 81       	ldd	r24, Y+1	; 0x01
    17ec:	28 2f       	mov	r18, r24
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	8a 81       	ldd	r24, Y+2	; 0x02
    17f2:	9b 81       	ldd	r25, Y+3	; 0x03
    17f4:	fc 01       	movw	r30, r24
    17f6:	e2 0f       	add	r30, r18
    17f8:	f3 1f       	adc	r31, r19
    17fa:	80 81       	ld	r24, Z
    17fc:	83 32       	cpi	r24, 0x23	; 35
    17fe:	49 f7       	brne	.-46     	; 0x17d2 <UART_receiveString+0x1c>
		counter++;
		UART_receiveByte(str+counter);
	}

	/* replace the non-real null (#) with real null (\0)*/
	str[counter] = '\0';
    1800:	89 81       	ldd	r24, Y+1	; 0x01
    1802:	28 2f       	mov	r18, r24
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	8a 81       	ldd	r24, Y+2	; 0x02
    1808:	9b 81       	ldd	r25, Y+3	; 0x03
    180a:	fc 01       	movw	r30, r24
    180c:	e2 0f       	add	r30, r18
    180e:	f3 1f       	adc	r31, r19
    1810:	10 82       	st	Z, r1
}
    1812:	0f 90       	pop	r0
    1814:	0f 90       	pop	r0
    1816:	0f 90       	pop	r0
    1818:	cf 91       	pop	r28
    181a:	df 91       	pop	r29
    181c:	08 95       	ret

0000181e <UART_sendString>:
 *
 * How does it work ?
 * in case of sending a string we send it byte by byte , and we send # as null
 */
void UART_sendString(const uint8 *str)
{
    181e:	df 93       	push	r29
    1820:	cf 93       	push	r28
    1822:	00 d0       	rcall	.+0      	; 0x1824 <UART_sendString+0x6>
    1824:	0f 92       	push	r0
    1826:	cd b7       	in	r28, 0x3d	; 61
    1828:	de b7       	in	r29, 0x3e	; 62
    182a:	9b 83       	std	Y+3, r25	; 0x03
    182c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 counter=0;
    182e:	19 82       	std	Y+1, r1	; 0x01

	/* send the whole string till the null (\0) */
	for(counter=0;str[counter] != '\0';counter++ )
    1830:	19 82       	std	Y+1, r1	; 0x01
    1832:	0c c0       	rjmp	.+24     	; 0x184c <UART_sendString+0x2e>
	{
		UART_sendByte(str+counter);
    1834:	89 81       	ldd	r24, Y+1	; 0x01
    1836:	28 2f       	mov	r18, r24
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	8a 81       	ldd	r24, Y+2	; 0x02
    183c:	9b 81       	ldd	r25, Y+3	; 0x03
    183e:	82 0f       	add	r24, r18
    1840:	93 1f       	adc	r25, r19
    1842:	0e 94 a9 0b 	call	0x1752	; 0x1752 <UART_sendByte>
void UART_sendString(const uint8 *str)
{
	uint8 counter=0;

	/* send the whole string till the null (\0) */
	for(counter=0;str[counter] != '\0';counter++ )
    1846:	89 81       	ldd	r24, Y+1	; 0x01
    1848:	8f 5f       	subi	r24, 0xFF	; 255
    184a:	89 83       	std	Y+1, r24	; 0x01
    184c:	89 81       	ldd	r24, Y+1	; 0x01
    184e:	28 2f       	mov	r18, r24
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	8a 81       	ldd	r24, Y+2	; 0x02
    1854:	9b 81       	ldd	r25, Y+3	; 0x03
    1856:	fc 01       	movw	r30, r24
    1858:	e2 0f       	add	r30, r18
    185a:	f3 1f       	adc	r31, r19
    185c:	80 81       	ld	r24, Z
    185e:	88 23       	and	r24, r24
    1860:	49 f7       	brne	.-46     	; 0x1834 <UART_sendString+0x16>
		UART_sendByte(str+counter);
	}


	/* send the non-real null (#)*/
	UART_sendByte(&counter);
    1862:	ce 01       	movw	r24, r28
    1864:	01 96       	adiw	r24, 0x01	; 1
    1866:	0e 94 a9 0b 	call	0x1752	; 0x1752 <UART_sendByte>
}
    186a:	0f 90       	pop	r0
    186c:	0f 90       	pop	r0
    186e:	0f 90       	pop	r0
    1870:	cf 91       	pop	r28
    1872:	df 91       	pop	r29
    1874:	08 95       	ret

00001876 <Buzzer_init>:
/*
 * Description :
 * A function to initialize the buzzer
 */
void Buzzer_init(void)
{
    1876:	df 93       	push	r29
    1878:	cf 93       	push	r28
    187a:	cd b7       	in	r28, 0x3d	; 61
    187c:	de b7       	in	r29, 0x3e	; 62
	/*Make the buzzer pin output pin*/
	GPIO_setupPinDirection(BUZZER_PORT,BUZZER_PIN,PIN_OUTPUT);
    187e:	82 e0       	ldi	r24, 0x02	; 2
    1880:	65 e0       	ldi	r22, 0x05	; 5
    1882:	41 e0       	ldi	r20, 0x01	; 1
    1884:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

	/*Turn off the buzzer*/
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,PIN_INPUT);
    1888:	82 e0       	ldi	r24, 0x02	; 2
    188a:	65 e0       	ldi	r22, 0x05	; 5
    188c:	40 e0       	ldi	r20, 0x00	; 0
    188e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
}
    1892:	cf 91       	pop	r28
    1894:	df 91       	pop	r29
    1896:	08 95       	ret

00001898 <Buzzer_on>:
/*
 * Description :
 * A function to turn on the buzzer
 */
void Buzzer_on(void)
{
    1898:	df 93       	push	r29
    189a:	cf 93       	push	r28
    189c:	cd b7       	in	r28, 0x3d	; 61
    189e:	de b7       	in	r29, 0x3e	; 62
	/*Turn on the buzzer*/
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,PIN_OUTPUT);
    18a0:	82 e0       	ldi	r24, 0x02	; 2
    18a2:	65 e0       	ldi	r22, 0x05	; 5
    18a4:	41 e0       	ldi	r20, 0x01	; 1
    18a6:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
}
    18aa:	cf 91       	pop	r28
    18ac:	df 91       	pop	r29
    18ae:	08 95       	ret

000018b0 <Buzzer_off>:
/*
 * Description :
 * A function to turn off the buzzer
 */
void Buzzer_off(void)
{
    18b0:	df 93       	push	r29
    18b2:	cf 93       	push	r28
    18b4:	cd b7       	in	r28, 0x3d	; 61
    18b6:	de b7       	in	r29, 0x3e	; 62
	/*Turn off the buzzer*/
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,PIN_INPUT);
    18b8:	82 e0       	ldi	r24, 0x02	; 2
    18ba:	65 e0       	ldi	r22, 0x05	; 5
    18bc:	40 e0       	ldi	r20, 0x00	; 0
    18be:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
}
    18c2:	cf 91       	pop	r28
    18c4:	df 91       	pop	r29
    18c6:	08 95       	ret

000018c8 <GRN_LED_init>:
/*
 * Description :
 * A function to initialize the GRN_LED
 */
void GRN_LED_init(void)
{
    18c8:	df 93       	push	r29
    18ca:	cf 93       	push	r28
    18cc:	cd b7       	in	r28, 0x3d	; 61
    18ce:	de b7       	in	r29, 0x3e	; 62
	/*Make the GRN_LED pin output pin*/
	GPIO_setupPinDirection(GRN_LED_PORT,GRN_LED_PIN,PIN_OUTPUT);
    18d0:	82 e0       	ldi	r24, 0x02	; 2
    18d2:	61 e0       	ldi	r22, 0x01	; 1
    18d4:	41 e0       	ldi	r20, 0x01	; 1
    18d6:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

	/*Turn off the GRN_LED*/
	GPIO_writePin(GRN_LED_PORT,GRN_LED_PIN,PIN_INPUT);
    18da:	82 e0       	ldi	r24, 0x02	; 2
    18dc:	61 e0       	ldi	r22, 0x01	; 1
    18de:	40 e0       	ldi	r20, 0x00	; 0
    18e0:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
}
    18e4:	cf 91       	pop	r28
    18e6:	df 91       	pop	r29
    18e8:	08 95       	ret

000018ea <GRN_LED_on>:
/*
 * Description :
 * A function to turn on the GRN_LED
 */
void GRN_LED_on(void)
{
    18ea:	df 93       	push	r29
    18ec:	cf 93       	push	r28
    18ee:	cd b7       	in	r28, 0x3d	; 61
    18f0:	de b7       	in	r29, 0x3e	; 62
	/*Turn on the GRN_LED*/
	GPIO_writePin(GRN_LED_PORT,GRN_LED_PIN,PIN_OUTPUT);
    18f2:	82 e0       	ldi	r24, 0x02	; 2
    18f4:	61 e0       	ldi	r22, 0x01	; 1
    18f6:	41 e0       	ldi	r20, 0x01	; 1
    18f8:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
}
    18fc:	cf 91       	pop	r28
    18fe:	df 91       	pop	r29
    1900:	08 95       	ret

00001902 <GRN_LED_off>:
/*
 * Description :
 * A function to turn off the GRN_LED
 */
void GRN_LED_off(void)
{
    1902:	df 93       	push	r29
    1904:	cf 93       	push	r28
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62
	/*Turn off the GRN*/
	GPIO_writePin(GRN_LED_PORT,GRN_LED_PIN,PIN_INPUT);
    190a:	82 e0       	ldi	r24, 0x02	; 2
    190c:	61 e0       	ldi	r22, 0x01	; 1
    190e:	40 e0       	ldi	r20, 0x00	; 0
    1910:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
}
    1914:	cf 91       	pop	r28
    1916:	df 91       	pop	r29
    1918:	08 95       	ret

0000191a <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    191a:	df 93       	push	r29
    191c:	cf 93       	push	r28
    191e:	cd b7       	in	r28, 0x3d	; 61
    1920:	de b7       	in	r29, 0x3e	; 62
    1922:	2e 97       	sbiw	r28, 0x0e	; 14
    1924:	0f b6       	in	r0, 0x3f	; 63
    1926:	f8 94       	cli
    1928:	de bf       	out	0x3e, r29	; 62
    192a:	0f be       	out	0x3f, r0	; 63
    192c:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    192e:	80 e0       	ldi	r24, 0x00	; 0
    1930:	61 e0       	ldi	r22, 0x01	; 1
    1932:	41 e0       	ldi	r20, 0x01	; 1
    1934:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1938:	80 e0       	ldi	r24, 0x00	; 0
    193a:	62 e0       	ldi	r22, 0x02	; 2
    193c:	41 e0       	ldi	r20, 0x01	; 1
    193e:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    1942:	80 e0       	ldi	r24, 0x00	; 0
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	a0 ea       	ldi	r26, 0xA0	; 160
    1948:	b1 e4       	ldi	r27, 0x41	; 65
    194a:	8b 87       	std	Y+11, r24	; 0x0b
    194c:	9c 87       	std	Y+12, r25	; 0x0c
    194e:	ad 87       	std	Y+13, r26	; 0x0d
    1950:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1952:	6b 85       	ldd	r22, Y+11	; 0x0b
    1954:	7c 85       	ldd	r23, Y+12	; 0x0c
    1956:	8d 85       	ldd	r24, Y+13	; 0x0d
    1958:	9e 85       	ldd	r25, Y+14	; 0x0e
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	4a e7       	ldi	r20, 0x7A	; 122
    1960:	55 e4       	ldi	r21, 0x45	; 69
    1962:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1966:	dc 01       	movw	r26, r24
    1968:	cb 01       	movw	r24, r22
    196a:	8f 83       	std	Y+7, r24	; 0x07
    196c:	98 87       	std	Y+8, r25	; 0x08
    196e:	a9 87       	std	Y+9, r26	; 0x09
    1970:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1972:	6f 81       	ldd	r22, Y+7	; 0x07
    1974:	78 85       	ldd	r23, Y+8	; 0x08
    1976:	89 85       	ldd	r24, Y+9	; 0x09
    1978:	9a 85       	ldd	r25, Y+10	; 0x0a
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	40 e8       	ldi	r20, 0x80	; 128
    1980:	5f e3       	ldi	r21, 0x3F	; 63
    1982:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1986:	88 23       	and	r24, r24
    1988:	2c f4       	brge	.+10     	; 0x1994 <LCD_init+0x7a>
		__ticks = 1;
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	9e 83       	std	Y+6, r25	; 0x06
    1990:	8d 83       	std	Y+5, r24	; 0x05
    1992:	3f c0       	rjmp	.+126    	; 0x1a12 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1994:	6f 81       	ldd	r22, Y+7	; 0x07
    1996:	78 85       	ldd	r23, Y+8	; 0x08
    1998:	89 85       	ldd	r24, Y+9	; 0x09
    199a:	9a 85       	ldd	r25, Y+10	; 0x0a
    199c:	20 e0       	ldi	r18, 0x00	; 0
    199e:	3f ef       	ldi	r19, 0xFF	; 255
    19a0:	4f e7       	ldi	r20, 0x7F	; 127
    19a2:	57 e4       	ldi	r21, 0x47	; 71
    19a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19a8:	18 16       	cp	r1, r24
    19aa:	4c f5       	brge	.+82     	; 0x19fe <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    19b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    19b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	40 e2       	ldi	r20, 0x20	; 32
    19ba:	51 e4       	ldi	r21, 0x41	; 65
    19bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c0:	dc 01       	movw	r26, r24
    19c2:	cb 01       	movw	r24, r22
    19c4:	bc 01       	movw	r22, r24
    19c6:	cd 01       	movw	r24, r26
    19c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19cc:	dc 01       	movw	r26, r24
    19ce:	cb 01       	movw	r24, r22
    19d0:	9e 83       	std	Y+6, r25	; 0x06
    19d2:	8d 83       	std	Y+5, r24	; 0x05
    19d4:	0f c0       	rjmp	.+30     	; 0x19f4 <LCD_init+0xda>
    19d6:	80 e9       	ldi	r24, 0x90	; 144
    19d8:	91 e0       	ldi	r25, 0x01	; 1
    19da:	9c 83       	std	Y+4, r25	; 0x04
    19dc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19de:	8b 81       	ldd	r24, Y+3	; 0x03
    19e0:	9c 81       	ldd	r25, Y+4	; 0x04
    19e2:	01 97       	sbiw	r24, 0x01	; 1
    19e4:	f1 f7       	brne	.-4      	; 0x19e2 <LCD_init+0xc8>
    19e6:	9c 83       	std	Y+4, r25	; 0x04
    19e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ea:	8d 81       	ldd	r24, Y+5	; 0x05
    19ec:	9e 81       	ldd	r25, Y+6	; 0x06
    19ee:	01 97       	sbiw	r24, 0x01	; 1
    19f0:	9e 83       	std	Y+6, r25	; 0x06
    19f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f4:	8d 81       	ldd	r24, Y+5	; 0x05
    19f6:	9e 81       	ldd	r25, Y+6	; 0x06
    19f8:	00 97       	sbiw	r24, 0x00	; 0
    19fa:	69 f7       	brne	.-38     	; 0x19d6 <LCD_init+0xbc>
    19fc:	14 c0       	rjmp	.+40     	; 0x1a26 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1a00:	78 85       	ldd	r23, Y+8	; 0x08
    1a02:	89 85       	ldd	r24, Y+9	; 0x09
    1a04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a0a:	dc 01       	movw	r26, r24
    1a0c:	cb 01       	movw	r24, r22
    1a0e:	9e 83       	std	Y+6, r25	; 0x06
    1a10:	8d 83       	std	Y+5, r24	; 0x05
    1a12:	8d 81       	ldd	r24, Y+5	; 0x05
    1a14:	9e 81       	ldd	r25, Y+6	; 0x06
    1a16:	9a 83       	std	Y+2, r25	; 0x02
    1a18:	89 83       	std	Y+1, r24	; 0x01
    1a1a:	89 81       	ldd	r24, Y+1	; 0x01
    1a1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a1e:	01 97       	sbiw	r24, 0x01	; 1
    1a20:	f1 f7       	brne	.-4      	; 0x1a1e <LCD_init+0x104>
    1a22:	9a 83       	std	Y+2, r25	; 0x02
    1a24:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    1a26:	80 e0       	ldi	r24, 0x00	; 0
    1a28:	63 e0       	ldi	r22, 0x03	; 3
    1a2a:	41 e0       	ldi	r20, 0x01	; 1
    1a2c:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    1a30:	80 e0       	ldi	r24, 0x00	; 0
    1a32:	64 e0       	ldi	r22, 0x04	; 4
    1a34:	41 e0       	ldi	r20, 0x01	; 1
    1a36:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
    1a3c:	65 e0       	ldi	r22, 0x05	; 5
    1a3e:	41 e0       	ldi	r20, 0x01	; 1
    1a40:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    1a44:	80 e0       	ldi	r24, 0x00	; 0
    1a46:	66 e0       	ldi	r22, 0x06	; 6
    1a48:	41 e0       	ldi	r20, 0x01	; 1
    1a4a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1a4e:	83 e3       	ldi	r24, 0x33	; 51
    1a50:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1a54:	82 e3       	ldi	r24, 0x32	; 50
    1a56:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1a5a:	88 e2       	ldi	r24, 0x28	; 40
    1a5c:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1a60:	8c e0       	ldi	r24, 0x0C	; 12
    1a62:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <LCD_sendCommand>
}
    1a6c:	2e 96       	adiw	r28, 0x0e	; 14
    1a6e:	0f b6       	in	r0, 0x3f	; 63
    1a70:	f8 94       	cli
    1a72:	de bf       	out	0x3e, r29	; 62
    1a74:	0f be       	out	0x3f, r0	; 63
    1a76:	cd bf       	out	0x3d, r28	; 61
    1a78:	cf 91       	pop	r28
    1a7a:	df 91       	pop	r29
    1a7c:	08 95       	ret

00001a7e <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1a7e:	0f 93       	push	r16
    1a80:	1f 93       	push	r17
    1a82:	df 93       	push	r29
    1a84:	cf 93       	push	r28
    1a86:	cd b7       	in	r28, 0x3d	; 61
    1a88:	de b7       	in	r29, 0x3e	; 62
    1a8a:	c3 56       	subi	r28, 0x63	; 99
    1a8c:	d0 40       	sbci	r29, 0x00	; 0
    1a8e:	0f b6       	in	r0, 0x3f	; 63
    1a90:	f8 94       	cli
    1a92:	de bf       	out	0x3e, r29	; 62
    1a94:	0f be       	out	0x3f, r0	; 63
    1a96:	cd bf       	out	0x3d, r28	; 61
    1a98:	fe 01       	movw	r30, r28
    1a9a:	ed 59       	subi	r30, 0x9D	; 157
    1a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9e:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    1aa2:	61 e0       	ldi	r22, 0x01	; 1
    1aa4:	40 e0       	ldi	r20, 0x00	; 0
    1aa6:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1aaa:	fe 01       	movw	r30, r28
    1aac:	e1 5a       	subi	r30, 0xA1	; 161
    1aae:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab0:	80 e0       	ldi	r24, 0x00	; 0
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	a0 e8       	ldi	r26, 0x80	; 128
    1ab6:	bf e3       	ldi	r27, 0x3F	; 63
    1ab8:	80 83       	st	Z, r24
    1aba:	91 83       	std	Z+1, r25	; 0x01
    1abc:	a2 83       	std	Z+2, r26	; 0x02
    1abe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ac0:	8e 01       	movw	r16, r28
    1ac2:	05 5a       	subi	r16, 0xA5	; 165
    1ac4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ac6:	fe 01       	movw	r30, r28
    1ac8:	e1 5a       	subi	r30, 0xA1	; 161
    1aca:	ff 4f       	sbci	r31, 0xFF	; 255
    1acc:	60 81       	ld	r22, Z
    1ace:	71 81       	ldd	r23, Z+1	; 0x01
    1ad0:	82 81       	ldd	r24, Z+2	; 0x02
    1ad2:	93 81       	ldd	r25, Z+3	; 0x03
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	4a e7       	ldi	r20, 0x7A	; 122
    1ada:	55 e4       	ldi	r21, 0x45	; 69
    1adc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	f8 01       	movw	r30, r16
    1ae6:	80 83       	st	Z, r24
    1ae8:	91 83       	std	Z+1, r25	; 0x01
    1aea:	a2 83       	std	Z+2, r26	; 0x02
    1aec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1aee:	fe 01       	movw	r30, r28
    1af0:	e5 5a       	subi	r30, 0xA5	; 165
    1af2:	ff 4f       	sbci	r31, 0xFF	; 255
    1af4:	60 81       	ld	r22, Z
    1af6:	71 81       	ldd	r23, Z+1	; 0x01
    1af8:	82 81       	ldd	r24, Z+2	; 0x02
    1afa:	93 81       	ldd	r25, Z+3	; 0x03
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	40 e8       	ldi	r20, 0x80	; 128
    1b02:	5f e3       	ldi	r21, 0x3F	; 63
    1b04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b08:	88 23       	and	r24, r24
    1b0a:	44 f4       	brge	.+16     	; 0x1b1c <LCD_sendCommand+0x9e>
		__ticks = 1;
    1b0c:	fe 01       	movw	r30, r28
    1b0e:	e7 5a       	subi	r30, 0xA7	; 167
    1b10:	ff 4f       	sbci	r31, 0xFF	; 255
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	91 83       	std	Z+1, r25	; 0x01
    1b18:	80 83       	st	Z, r24
    1b1a:	64 c0       	rjmp	.+200    	; 0x1be4 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1b1c:	fe 01       	movw	r30, r28
    1b1e:	e5 5a       	subi	r30, 0xA5	; 165
    1b20:	ff 4f       	sbci	r31, 0xFF	; 255
    1b22:	60 81       	ld	r22, Z
    1b24:	71 81       	ldd	r23, Z+1	; 0x01
    1b26:	82 81       	ldd	r24, Z+2	; 0x02
    1b28:	93 81       	ldd	r25, Z+3	; 0x03
    1b2a:	20 e0       	ldi	r18, 0x00	; 0
    1b2c:	3f ef       	ldi	r19, 0xFF	; 255
    1b2e:	4f e7       	ldi	r20, 0x7F	; 127
    1b30:	57 e4       	ldi	r21, 0x47	; 71
    1b32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b36:	18 16       	cp	r1, r24
    1b38:	0c f0       	brlt	.+2      	; 0x1b3c <LCD_sendCommand+0xbe>
    1b3a:	43 c0       	rjmp	.+134    	; 0x1bc2 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b3c:	fe 01       	movw	r30, r28
    1b3e:	e1 5a       	subi	r30, 0xA1	; 161
    1b40:	ff 4f       	sbci	r31, 0xFF	; 255
    1b42:	60 81       	ld	r22, Z
    1b44:	71 81       	ldd	r23, Z+1	; 0x01
    1b46:	82 81       	ldd	r24, Z+2	; 0x02
    1b48:	93 81       	ldd	r25, Z+3	; 0x03
    1b4a:	20 e0       	ldi	r18, 0x00	; 0
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	40 e2       	ldi	r20, 0x20	; 32
    1b50:	51 e4       	ldi	r21, 0x41	; 65
    1b52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b56:	dc 01       	movw	r26, r24
    1b58:	cb 01       	movw	r24, r22
    1b5a:	8e 01       	movw	r16, r28
    1b5c:	07 5a       	subi	r16, 0xA7	; 167
    1b5e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b60:	bc 01       	movw	r22, r24
    1b62:	cd 01       	movw	r24, r26
    1b64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b68:	dc 01       	movw	r26, r24
    1b6a:	cb 01       	movw	r24, r22
    1b6c:	f8 01       	movw	r30, r16
    1b6e:	91 83       	std	Z+1, r25	; 0x01
    1b70:	80 83       	st	Z, r24
    1b72:	1f c0       	rjmp	.+62     	; 0x1bb2 <LCD_sendCommand+0x134>
    1b74:	fe 01       	movw	r30, r28
    1b76:	e9 5a       	subi	r30, 0xA9	; 169
    1b78:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7a:	80 e9       	ldi	r24, 0x90	; 144
    1b7c:	91 e0       	ldi	r25, 0x01	; 1
    1b7e:	91 83       	std	Z+1, r25	; 0x01
    1b80:	80 83       	st	Z, r24
    1b82:	fe 01       	movw	r30, r28
    1b84:	e9 5a       	subi	r30, 0xA9	; 169
    1b86:	ff 4f       	sbci	r31, 0xFF	; 255
    1b88:	80 81       	ld	r24, Z
    1b8a:	91 81       	ldd	r25, Z+1	; 0x01
    1b8c:	01 97       	sbiw	r24, 0x01	; 1
    1b8e:	f1 f7       	brne	.-4      	; 0x1b8c <LCD_sendCommand+0x10e>
    1b90:	fe 01       	movw	r30, r28
    1b92:	e9 5a       	subi	r30, 0xA9	; 169
    1b94:	ff 4f       	sbci	r31, 0xFF	; 255
    1b96:	91 83       	std	Z+1, r25	; 0x01
    1b98:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b9a:	de 01       	movw	r26, r28
    1b9c:	a7 5a       	subi	r26, 0xA7	; 167
    1b9e:	bf 4f       	sbci	r27, 0xFF	; 255
    1ba0:	fe 01       	movw	r30, r28
    1ba2:	e7 5a       	subi	r30, 0xA7	; 167
    1ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba6:	80 81       	ld	r24, Z
    1ba8:	91 81       	ldd	r25, Z+1	; 0x01
    1baa:	01 97       	sbiw	r24, 0x01	; 1
    1bac:	11 96       	adiw	r26, 0x01	; 1
    1bae:	9c 93       	st	X, r25
    1bb0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bb2:	fe 01       	movw	r30, r28
    1bb4:	e7 5a       	subi	r30, 0xA7	; 167
    1bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb8:	80 81       	ld	r24, Z
    1bba:	91 81       	ldd	r25, Z+1	; 0x01
    1bbc:	00 97       	sbiw	r24, 0x00	; 0
    1bbe:	d1 f6       	brne	.-76     	; 0x1b74 <LCD_sendCommand+0xf6>
    1bc0:	27 c0       	rjmp	.+78     	; 0x1c10 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc2:	8e 01       	movw	r16, r28
    1bc4:	07 5a       	subi	r16, 0xA7	; 167
    1bc6:	1f 4f       	sbci	r17, 0xFF	; 255
    1bc8:	fe 01       	movw	r30, r28
    1bca:	e5 5a       	subi	r30, 0xA5	; 165
    1bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bce:	60 81       	ld	r22, Z
    1bd0:	71 81       	ldd	r23, Z+1	; 0x01
    1bd2:	82 81       	ldd	r24, Z+2	; 0x02
    1bd4:	93 81       	ldd	r25, Z+3	; 0x03
    1bd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bda:	dc 01       	movw	r26, r24
    1bdc:	cb 01       	movw	r24, r22
    1bde:	f8 01       	movw	r30, r16
    1be0:	91 83       	std	Z+1, r25	; 0x01
    1be2:	80 83       	st	Z, r24
    1be4:	de 01       	movw	r26, r28
    1be6:	ab 5a       	subi	r26, 0xAB	; 171
    1be8:	bf 4f       	sbci	r27, 0xFF	; 255
    1bea:	fe 01       	movw	r30, r28
    1bec:	e7 5a       	subi	r30, 0xA7	; 167
    1bee:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf0:	80 81       	ld	r24, Z
    1bf2:	91 81       	ldd	r25, Z+1	; 0x01
    1bf4:	8d 93       	st	X+, r24
    1bf6:	9c 93       	st	X, r25
    1bf8:	fe 01       	movw	r30, r28
    1bfa:	eb 5a       	subi	r30, 0xAB	; 171
    1bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfe:	80 81       	ld	r24, Z
    1c00:	91 81       	ldd	r25, Z+1	; 0x01
    1c02:	01 97       	sbiw	r24, 0x01	; 1
    1c04:	f1 f7       	brne	.-4      	; 0x1c02 <LCD_sendCommand+0x184>
    1c06:	fe 01       	movw	r30, r28
    1c08:	eb 5a       	subi	r30, 0xAB	; 171
    1c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0c:	91 83       	std	Z+1, r25	; 0x01
    1c0e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1c10:	80 e0       	ldi	r24, 0x00	; 0
    1c12:	62 e0       	ldi	r22, 0x02	; 2
    1c14:	41 e0       	ldi	r20, 0x01	; 1
    1c16:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1c1a:	fe 01       	movw	r30, r28
    1c1c:	ef 5a       	subi	r30, 0xAF	; 175
    1c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c20:	80 e0       	ldi	r24, 0x00	; 0
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	a0 e8       	ldi	r26, 0x80	; 128
    1c26:	bf e3       	ldi	r27, 0x3F	; 63
    1c28:	80 83       	st	Z, r24
    1c2a:	91 83       	std	Z+1, r25	; 0x01
    1c2c:	a2 83       	std	Z+2, r26	; 0x02
    1c2e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c30:	8e 01       	movw	r16, r28
    1c32:	03 5b       	subi	r16, 0xB3	; 179
    1c34:	1f 4f       	sbci	r17, 0xFF	; 255
    1c36:	fe 01       	movw	r30, r28
    1c38:	ef 5a       	subi	r30, 0xAF	; 175
    1c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3c:	60 81       	ld	r22, Z
    1c3e:	71 81       	ldd	r23, Z+1	; 0x01
    1c40:	82 81       	ldd	r24, Z+2	; 0x02
    1c42:	93 81       	ldd	r25, Z+3	; 0x03
    1c44:	20 e0       	ldi	r18, 0x00	; 0
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	4a e7       	ldi	r20, 0x7A	; 122
    1c4a:	55 e4       	ldi	r21, 0x45	; 69
    1c4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c50:	dc 01       	movw	r26, r24
    1c52:	cb 01       	movw	r24, r22
    1c54:	f8 01       	movw	r30, r16
    1c56:	80 83       	st	Z, r24
    1c58:	91 83       	std	Z+1, r25	; 0x01
    1c5a:	a2 83       	std	Z+2, r26	; 0x02
    1c5c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c5e:	fe 01       	movw	r30, r28
    1c60:	e3 5b       	subi	r30, 0xB3	; 179
    1c62:	ff 4f       	sbci	r31, 0xFF	; 255
    1c64:	60 81       	ld	r22, Z
    1c66:	71 81       	ldd	r23, Z+1	; 0x01
    1c68:	82 81       	ldd	r24, Z+2	; 0x02
    1c6a:	93 81       	ldd	r25, Z+3	; 0x03
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	40 e8       	ldi	r20, 0x80	; 128
    1c72:	5f e3       	ldi	r21, 0x3F	; 63
    1c74:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c78:	88 23       	and	r24, r24
    1c7a:	44 f4       	brge	.+16     	; 0x1c8c <LCD_sendCommand+0x20e>
		__ticks = 1;
    1c7c:	fe 01       	movw	r30, r28
    1c7e:	e5 5b       	subi	r30, 0xB5	; 181
    1c80:	ff 4f       	sbci	r31, 0xFF	; 255
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	91 83       	std	Z+1, r25	; 0x01
    1c88:	80 83       	st	Z, r24
    1c8a:	64 c0       	rjmp	.+200    	; 0x1d54 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1c8c:	fe 01       	movw	r30, r28
    1c8e:	e3 5b       	subi	r30, 0xB3	; 179
    1c90:	ff 4f       	sbci	r31, 0xFF	; 255
    1c92:	60 81       	ld	r22, Z
    1c94:	71 81       	ldd	r23, Z+1	; 0x01
    1c96:	82 81       	ldd	r24, Z+2	; 0x02
    1c98:	93 81       	ldd	r25, Z+3	; 0x03
    1c9a:	20 e0       	ldi	r18, 0x00	; 0
    1c9c:	3f ef       	ldi	r19, 0xFF	; 255
    1c9e:	4f e7       	ldi	r20, 0x7F	; 127
    1ca0:	57 e4       	ldi	r21, 0x47	; 71
    1ca2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ca6:	18 16       	cp	r1, r24
    1ca8:	0c f0       	brlt	.+2      	; 0x1cac <LCD_sendCommand+0x22e>
    1caa:	43 c0       	rjmp	.+134    	; 0x1d32 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cac:	fe 01       	movw	r30, r28
    1cae:	ef 5a       	subi	r30, 0xAF	; 175
    1cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb2:	60 81       	ld	r22, Z
    1cb4:	71 81       	ldd	r23, Z+1	; 0x01
    1cb6:	82 81       	ldd	r24, Z+2	; 0x02
    1cb8:	93 81       	ldd	r25, Z+3	; 0x03
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	40 e2       	ldi	r20, 0x20	; 32
    1cc0:	51 e4       	ldi	r21, 0x41	; 65
    1cc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	cb 01       	movw	r24, r22
    1cca:	8e 01       	movw	r16, r28
    1ccc:	05 5b       	subi	r16, 0xB5	; 181
    1cce:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd0:	bc 01       	movw	r22, r24
    1cd2:	cd 01       	movw	r24, r26
    1cd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd8:	dc 01       	movw	r26, r24
    1cda:	cb 01       	movw	r24, r22
    1cdc:	f8 01       	movw	r30, r16
    1cde:	91 83       	std	Z+1, r25	; 0x01
    1ce0:	80 83       	st	Z, r24
    1ce2:	1f c0       	rjmp	.+62     	; 0x1d22 <LCD_sendCommand+0x2a4>
    1ce4:	fe 01       	movw	r30, r28
    1ce6:	e7 5b       	subi	r30, 0xB7	; 183
    1ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cea:	80 e9       	ldi	r24, 0x90	; 144
    1cec:	91 e0       	ldi	r25, 0x01	; 1
    1cee:	91 83       	std	Z+1, r25	; 0x01
    1cf0:	80 83       	st	Z, r24
    1cf2:	fe 01       	movw	r30, r28
    1cf4:	e7 5b       	subi	r30, 0xB7	; 183
    1cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf8:	80 81       	ld	r24, Z
    1cfa:	91 81       	ldd	r25, Z+1	; 0x01
    1cfc:	01 97       	sbiw	r24, 0x01	; 1
    1cfe:	f1 f7       	brne	.-4      	; 0x1cfc <LCD_sendCommand+0x27e>
    1d00:	fe 01       	movw	r30, r28
    1d02:	e7 5b       	subi	r30, 0xB7	; 183
    1d04:	ff 4f       	sbci	r31, 0xFF	; 255
    1d06:	91 83       	std	Z+1, r25	; 0x01
    1d08:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d0a:	de 01       	movw	r26, r28
    1d0c:	a5 5b       	subi	r26, 0xB5	; 181
    1d0e:	bf 4f       	sbci	r27, 0xFF	; 255
    1d10:	fe 01       	movw	r30, r28
    1d12:	e5 5b       	subi	r30, 0xB5	; 181
    1d14:	ff 4f       	sbci	r31, 0xFF	; 255
    1d16:	80 81       	ld	r24, Z
    1d18:	91 81       	ldd	r25, Z+1	; 0x01
    1d1a:	01 97       	sbiw	r24, 0x01	; 1
    1d1c:	11 96       	adiw	r26, 0x01	; 1
    1d1e:	9c 93       	st	X, r25
    1d20:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d22:	fe 01       	movw	r30, r28
    1d24:	e5 5b       	subi	r30, 0xB5	; 181
    1d26:	ff 4f       	sbci	r31, 0xFF	; 255
    1d28:	80 81       	ld	r24, Z
    1d2a:	91 81       	ldd	r25, Z+1	; 0x01
    1d2c:	00 97       	sbiw	r24, 0x00	; 0
    1d2e:	d1 f6       	brne	.-76     	; 0x1ce4 <LCD_sendCommand+0x266>
    1d30:	27 c0       	rjmp	.+78     	; 0x1d80 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d32:	8e 01       	movw	r16, r28
    1d34:	05 5b       	subi	r16, 0xB5	; 181
    1d36:	1f 4f       	sbci	r17, 0xFF	; 255
    1d38:	fe 01       	movw	r30, r28
    1d3a:	e3 5b       	subi	r30, 0xB3	; 179
    1d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3e:	60 81       	ld	r22, Z
    1d40:	71 81       	ldd	r23, Z+1	; 0x01
    1d42:	82 81       	ldd	r24, Z+2	; 0x02
    1d44:	93 81       	ldd	r25, Z+3	; 0x03
    1d46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d4a:	dc 01       	movw	r26, r24
    1d4c:	cb 01       	movw	r24, r22
    1d4e:	f8 01       	movw	r30, r16
    1d50:	91 83       	std	Z+1, r25	; 0x01
    1d52:	80 83       	st	Z, r24
    1d54:	de 01       	movw	r26, r28
    1d56:	a9 5b       	subi	r26, 0xB9	; 185
    1d58:	bf 4f       	sbci	r27, 0xFF	; 255
    1d5a:	fe 01       	movw	r30, r28
    1d5c:	e5 5b       	subi	r30, 0xB5	; 181
    1d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d60:	80 81       	ld	r24, Z
    1d62:	91 81       	ldd	r25, Z+1	; 0x01
    1d64:	8d 93       	st	X+, r24
    1d66:	9c 93       	st	X, r25
    1d68:	fe 01       	movw	r30, r28
    1d6a:	e9 5b       	subi	r30, 0xB9	; 185
    1d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6e:	80 81       	ld	r24, Z
    1d70:	91 81       	ldd	r25, Z+1	; 0x01
    1d72:	01 97       	sbiw	r24, 0x01	; 1
    1d74:	f1 f7       	brne	.-4      	; 0x1d72 <LCD_sendCommand+0x2f4>
    1d76:	fe 01       	movw	r30, r28
    1d78:	e9 5b       	subi	r30, 0xB9	; 185
    1d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7c:	91 83       	std	Z+1, r25	; 0x01
    1d7e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    1d80:	fe 01       	movw	r30, r28
    1d82:	ed 59       	subi	r30, 0x9D	; 157
    1d84:	ff 4f       	sbci	r31, 0xFF	; 255
    1d86:	80 81       	ld	r24, Z
    1d88:	82 95       	swap	r24
    1d8a:	8f 70       	andi	r24, 0x0F	; 15
    1d8c:	98 2f       	mov	r25, r24
    1d8e:	91 70       	andi	r25, 0x01	; 1
    1d90:	80 e0       	ldi	r24, 0x00	; 0
    1d92:	63 e0       	ldi	r22, 0x03	; 3
    1d94:	49 2f       	mov	r20, r25
    1d96:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    1d9a:	fe 01       	movw	r30, r28
    1d9c:	ed 59       	subi	r30, 0x9D	; 157
    1d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1da0:	80 81       	ld	r24, Z
    1da2:	82 95       	swap	r24
    1da4:	86 95       	lsr	r24
    1da6:	87 70       	andi	r24, 0x07	; 7
    1da8:	98 2f       	mov	r25, r24
    1daa:	91 70       	andi	r25, 0x01	; 1
    1dac:	80 e0       	ldi	r24, 0x00	; 0
    1dae:	64 e0       	ldi	r22, 0x04	; 4
    1db0:	49 2f       	mov	r20, r25
    1db2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    1db6:	fe 01       	movw	r30, r28
    1db8:	ed 59       	subi	r30, 0x9D	; 157
    1dba:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbc:	80 81       	ld	r24, Z
    1dbe:	82 95       	swap	r24
    1dc0:	86 95       	lsr	r24
    1dc2:	86 95       	lsr	r24
    1dc4:	83 70       	andi	r24, 0x03	; 3
    1dc6:	98 2f       	mov	r25, r24
    1dc8:	91 70       	andi	r25, 0x01	; 1
    1dca:	80 e0       	ldi	r24, 0x00	; 0
    1dcc:	65 e0       	ldi	r22, 0x05	; 5
    1dce:	49 2f       	mov	r20, r25
    1dd0:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    1dd4:	fe 01       	movw	r30, r28
    1dd6:	ed 59       	subi	r30, 0x9D	; 157
    1dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dda:	80 81       	ld	r24, Z
    1ddc:	98 2f       	mov	r25, r24
    1dde:	99 1f       	adc	r25, r25
    1de0:	99 27       	eor	r25, r25
    1de2:	99 1f       	adc	r25, r25
    1de4:	80 e0       	ldi	r24, 0x00	; 0
    1de6:	66 e0       	ldi	r22, 0x06	; 6
    1de8:	49 2f       	mov	r20, r25
    1dea:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1dee:	fe 01       	movw	r30, r28
    1df0:	ed 5b       	subi	r30, 0xBD	; 189
    1df2:	ff 4f       	sbci	r31, 0xFF	; 255
    1df4:	80 e0       	ldi	r24, 0x00	; 0
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	a0 e8       	ldi	r26, 0x80	; 128
    1dfa:	bf e3       	ldi	r27, 0x3F	; 63
    1dfc:	80 83       	st	Z, r24
    1dfe:	91 83       	std	Z+1, r25	; 0x01
    1e00:	a2 83       	std	Z+2, r26	; 0x02
    1e02:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e04:	8e 01       	movw	r16, r28
    1e06:	01 5c       	subi	r16, 0xC1	; 193
    1e08:	1f 4f       	sbci	r17, 0xFF	; 255
    1e0a:	fe 01       	movw	r30, r28
    1e0c:	ed 5b       	subi	r30, 0xBD	; 189
    1e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e10:	60 81       	ld	r22, Z
    1e12:	71 81       	ldd	r23, Z+1	; 0x01
    1e14:	82 81       	ldd	r24, Z+2	; 0x02
    1e16:	93 81       	ldd	r25, Z+3	; 0x03
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	4a e7       	ldi	r20, 0x7A	; 122
    1e1e:	55 e4       	ldi	r21, 0x45	; 69
    1e20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e24:	dc 01       	movw	r26, r24
    1e26:	cb 01       	movw	r24, r22
    1e28:	f8 01       	movw	r30, r16
    1e2a:	80 83       	st	Z, r24
    1e2c:	91 83       	std	Z+1, r25	; 0x01
    1e2e:	a2 83       	std	Z+2, r26	; 0x02
    1e30:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e32:	fe 01       	movw	r30, r28
    1e34:	ff 96       	adiw	r30, 0x3f	; 63
    1e36:	60 81       	ld	r22, Z
    1e38:	71 81       	ldd	r23, Z+1	; 0x01
    1e3a:	82 81       	ldd	r24, Z+2	; 0x02
    1e3c:	93 81       	ldd	r25, Z+3	; 0x03
    1e3e:	20 e0       	ldi	r18, 0x00	; 0
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	40 e8       	ldi	r20, 0x80	; 128
    1e44:	5f e3       	ldi	r21, 0x3F	; 63
    1e46:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e4a:	88 23       	and	r24, r24
    1e4c:	2c f4       	brge	.+10     	; 0x1e58 <LCD_sendCommand+0x3da>
		__ticks = 1;
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	9e af       	std	Y+62, r25	; 0x3e
    1e54:	8d af       	std	Y+61, r24	; 0x3d
    1e56:	46 c0       	rjmp	.+140    	; 0x1ee4 <LCD_sendCommand+0x466>
	else if (__tmp > 65535)
    1e58:	fe 01       	movw	r30, r28
    1e5a:	ff 96       	adiw	r30, 0x3f	; 63
    1e5c:	60 81       	ld	r22, Z
    1e5e:	71 81       	ldd	r23, Z+1	; 0x01
    1e60:	82 81       	ldd	r24, Z+2	; 0x02
    1e62:	93 81       	ldd	r25, Z+3	; 0x03
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	3f ef       	ldi	r19, 0xFF	; 255
    1e68:	4f e7       	ldi	r20, 0x7F	; 127
    1e6a:	57 e4       	ldi	r21, 0x47	; 71
    1e6c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e70:	18 16       	cp	r1, r24
    1e72:	64 f5       	brge	.+88     	; 0x1ecc <LCD_sendCommand+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e74:	fe 01       	movw	r30, r28
    1e76:	ed 5b       	subi	r30, 0xBD	; 189
    1e78:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7a:	60 81       	ld	r22, Z
    1e7c:	71 81       	ldd	r23, Z+1	; 0x01
    1e7e:	82 81       	ldd	r24, Z+2	; 0x02
    1e80:	93 81       	ldd	r25, Z+3	; 0x03
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	40 e2       	ldi	r20, 0x20	; 32
    1e88:	51 e4       	ldi	r21, 0x41	; 65
    1e8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
    1e92:	bc 01       	movw	r22, r24
    1e94:	cd 01       	movw	r24, r26
    1e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	cb 01       	movw	r24, r22
    1e9e:	9e af       	std	Y+62, r25	; 0x3e
    1ea0:	8d af       	std	Y+61, r24	; 0x3d
    1ea2:	0f c0       	rjmp	.+30     	; 0x1ec2 <LCD_sendCommand+0x444>
    1ea4:	80 e9       	ldi	r24, 0x90	; 144
    1ea6:	91 e0       	ldi	r25, 0x01	; 1
    1ea8:	9c af       	std	Y+60, r25	; 0x3c
    1eaa:	8b af       	std	Y+59, r24	; 0x3b
    1eac:	8b ad       	ldd	r24, Y+59	; 0x3b
    1eae:	9c ad       	ldd	r25, Y+60	; 0x3c
    1eb0:	01 97       	sbiw	r24, 0x01	; 1
    1eb2:	f1 f7       	brne	.-4      	; 0x1eb0 <LCD_sendCommand+0x432>
    1eb4:	9c af       	std	Y+60, r25	; 0x3c
    1eb6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eb8:	8d ad       	ldd	r24, Y+61	; 0x3d
    1eba:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ebc:	01 97       	sbiw	r24, 0x01	; 1
    1ebe:	9e af       	std	Y+62, r25	; 0x3e
    1ec0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ec4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ec6:	00 97       	sbiw	r24, 0x00	; 0
    1ec8:	69 f7       	brne	.-38     	; 0x1ea4 <LCD_sendCommand+0x426>
    1eca:	16 c0       	rjmp	.+44     	; 0x1ef8 <LCD_sendCommand+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ecc:	fe 01       	movw	r30, r28
    1ece:	ff 96       	adiw	r30, 0x3f	; 63
    1ed0:	60 81       	ld	r22, Z
    1ed2:	71 81       	ldd	r23, Z+1	; 0x01
    1ed4:	82 81       	ldd	r24, Z+2	; 0x02
    1ed6:	93 81       	ldd	r25, Z+3	; 0x03
    1ed8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1edc:	dc 01       	movw	r26, r24
    1ede:	cb 01       	movw	r24, r22
    1ee0:	9e af       	std	Y+62, r25	; 0x3e
    1ee2:	8d af       	std	Y+61, r24	; 0x3d
    1ee4:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ee6:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ee8:	9a af       	std	Y+58, r25	; 0x3a
    1eea:	89 af       	std	Y+57, r24	; 0x39
    1eec:	89 ad       	ldd	r24, Y+57	; 0x39
    1eee:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ef0:	01 97       	sbiw	r24, 0x01	; 1
    1ef2:	f1 f7       	brne	.-4      	; 0x1ef0 <LCD_sendCommand+0x472>
    1ef4:	9a af       	std	Y+58, r25	; 0x3a
    1ef6:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1ef8:	80 e0       	ldi	r24, 0x00	; 0
    1efa:	62 e0       	ldi	r22, 0x02	; 2
    1efc:	40 e0       	ldi	r20, 0x00	; 0
    1efe:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1f02:	80 e0       	ldi	r24, 0x00	; 0
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	a0 e8       	ldi	r26, 0x80	; 128
    1f08:	bf e3       	ldi	r27, 0x3F	; 63
    1f0a:	8d ab       	std	Y+53, r24	; 0x35
    1f0c:	9e ab       	std	Y+54, r25	; 0x36
    1f0e:	af ab       	std	Y+55, r26	; 0x37
    1f10:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f12:	6d a9       	ldd	r22, Y+53	; 0x35
    1f14:	7e a9       	ldd	r23, Y+54	; 0x36
    1f16:	8f a9       	ldd	r24, Y+55	; 0x37
    1f18:	98 ad       	ldd	r25, Y+56	; 0x38
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	4a e7       	ldi	r20, 0x7A	; 122
    1f20:	55 e4       	ldi	r21, 0x45	; 69
    1f22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f26:	dc 01       	movw	r26, r24
    1f28:	cb 01       	movw	r24, r22
    1f2a:	89 ab       	std	Y+49, r24	; 0x31
    1f2c:	9a ab       	std	Y+50, r25	; 0x32
    1f2e:	ab ab       	std	Y+51, r26	; 0x33
    1f30:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f32:	69 a9       	ldd	r22, Y+49	; 0x31
    1f34:	7a a9       	ldd	r23, Y+50	; 0x32
    1f36:	8b a9       	ldd	r24, Y+51	; 0x33
    1f38:	9c a9       	ldd	r25, Y+52	; 0x34
    1f3a:	20 e0       	ldi	r18, 0x00	; 0
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	40 e8       	ldi	r20, 0x80	; 128
    1f40:	5f e3       	ldi	r21, 0x3F	; 63
    1f42:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f46:	88 23       	and	r24, r24
    1f48:	2c f4       	brge	.+10     	; 0x1f54 <LCD_sendCommand+0x4d6>
		__ticks = 1;
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	98 ab       	std	Y+48, r25	; 0x30
    1f50:	8f a7       	std	Y+47, r24	; 0x2f
    1f52:	3f c0       	rjmp	.+126    	; 0x1fd2 <LCD_sendCommand+0x554>
	else if (__tmp > 65535)
    1f54:	69 a9       	ldd	r22, Y+49	; 0x31
    1f56:	7a a9       	ldd	r23, Y+50	; 0x32
    1f58:	8b a9       	ldd	r24, Y+51	; 0x33
    1f5a:	9c a9       	ldd	r25, Y+52	; 0x34
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	3f ef       	ldi	r19, 0xFF	; 255
    1f60:	4f e7       	ldi	r20, 0x7F	; 127
    1f62:	57 e4       	ldi	r21, 0x47	; 71
    1f64:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f68:	18 16       	cp	r1, r24
    1f6a:	4c f5       	brge	.+82     	; 0x1fbe <LCD_sendCommand+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f6c:	6d a9       	ldd	r22, Y+53	; 0x35
    1f6e:	7e a9       	ldd	r23, Y+54	; 0x36
    1f70:	8f a9       	ldd	r24, Y+55	; 0x37
    1f72:	98 ad       	ldd	r25, Y+56	; 0x38
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	40 e2       	ldi	r20, 0x20	; 32
    1f7a:	51 e4       	ldi	r21, 0x41	; 65
    1f7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f80:	dc 01       	movw	r26, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	bc 01       	movw	r22, r24
    1f86:	cd 01       	movw	r24, r26
    1f88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f8c:	dc 01       	movw	r26, r24
    1f8e:	cb 01       	movw	r24, r22
    1f90:	98 ab       	std	Y+48, r25	; 0x30
    1f92:	8f a7       	std	Y+47, r24	; 0x2f
    1f94:	0f c0       	rjmp	.+30     	; 0x1fb4 <LCD_sendCommand+0x536>
    1f96:	80 e9       	ldi	r24, 0x90	; 144
    1f98:	91 e0       	ldi	r25, 0x01	; 1
    1f9a:	9e a7       	std	Y+46, r25	; 0x2e
    1f9c:	8d a7       	std	Y+45, r24	; 0x2d
    1f9e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1fa0:	9e a5       	ldd	r25, Y+46	; 0x2e
    1fa2:	01 97       	sbiw	r24, 0x01	; 1
    1fa4:	f1 f7       	brne	.-4      	; 0x1fa2 <LCD_sendCommand+0x524>
    1fa6:	9e a7       	std	Y+46, r25	; 0x2e
    1fa8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1faa:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fac:	98 a9       	ldd	r25, Y+48	; 0x30
    1fae:	01 97       	sbiw	r24, 0x01	; 1
    1fb0:	98 ab       	std	Y+48, r25	; 0x30
    1fb2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fb4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fb6:	98 a9       	ldd	r25, Y+48	; 0x30
    1fb8:	00 97       	sbiw	r24, 0x00	; 0
    1fba:	69 f7       	brne	.-38     	; 0x1f96 <LCD_sendCommand+0x518>
    1fbc:	14 c0       	rjmp	.+40     	; 0x1fe6 <LCD_sendCommand+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fbe:	69 a9       	ldd	r22, Y+49	; 0x31
    1fc0:	7a a9       	ldd	r23, Y+50	; 0x32
    1fc2:	8b a9       	ldd	r24, Y+51	; 0x33
    1fc4:	9c a9       	ldd	r25, Y+52	; 0x34
    1fc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	98 ab       	std	Y+48, r25	; 0x30
    1fd0:	8f a7       	std	Y+47, r24	; 0x2f
    1fd2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fd4:	98 a9       	ldd	r25, Y+48	; 0x30
    1fd6:	9c a7       	std	Y+44, r25	; 0x2c
    1fd8:	8b a7       	std	Y+43, r24	; 0x2b
    1fda:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fdc:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fde:	01 97       	sbiw	r24, 0x01	; 1
    1fe0:	f1 f7       	brne	.-4      	; 0x1fde <LCD_sendCommand+0x560>
    1fe2:	9c a7       	std	Y+44, r25	; 0x2c
    1fe4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1fe6:	80 e0       	ldi	r24, 0x00	; 0
    1fe8:	62 e0       	ldi	r22, 0x02	; 2
    1fea:	41 e0       	ldi	r20, 0x01	; 1
    1fec:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1ff0:	80 e0       	ldi	r24, 0x00	; 0
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	a0 e8       	ldi	r26, 0x80	; 128
    1ff6:	bf e3       	ldi	r27, 0x3F	; 63
    1ff8:	8f a3       	std	Y+39, r24	; 0x27
    1ffa:	98 a7       	std	Y+40, r25	; 0x28
    1ffc:	a9 a7       	std	Y+41, r26	; 0x29
    1ffe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2000:	6f a1       	ldd	r22, Y+39	; 0x27
    2002:	78 a5       	ldd	r23, Y+40	; 0x28
    2004:	89 a5       	ldd	r24, Y+41	; 0x29
    2006:	9a a5       	ldd	r25, Y+42	; 0x2a
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	4a e7       	ldi	r20, 0x7A	; 122
    200e:	55 e4       	ldi	r21, 0x45	; 69
    2010:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	8b a3       	std	Y+35, r24	; 0x23
    201a:	9c a3       	std	Y+36, r25	; 0x24
    201c:	ad a3       	std	Y+37, r26	; 0x25
    201e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2020:	6b a1       	ldd	r22, Y+35	; 0x23
    2022:	7c a1       	ldd	r23, Y+36	; 0x24
    2024:	8d a1       	ldd	r24, Y+37	; 0x25
    2026:	9e a1       	ldd	r25, Y+38	; 0x26
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	40 e8       	ldi	r20, 0x80	; 128
    202e:	5f e3       	ldi	r21, 0x3F	; 63
    2030:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2034:	88 23       	and	r24, r24
    2036:	2c f4       	brge	.+10     	; 0x2042 <LCD_sendCommand+0x5c4>
		__ticks = 1;
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	9a a3       	std	Y+34, r25	; 0x22
    203e:	89 a3       	std	Y+33, r24	; 0x21
    2040:	3f c0       	rjmp	.+126    	; 0x20c0 <LCD_sendCommand+0x642>
	else if (__tmp > 65535)
    2042:	6b a1       	ldd	r22, Y+35	; 0x23
    2044:	7c a1       	ldd	r23, Y+36	; 0x24
    2046:	8d a1       	ldd	r24, Y+37	; 0x25
    2048:	9e a1       	ldd	r25, Y+38	; 0x26
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	3f ef       	ldi	r19, 0xFF	; 255
    204e:	4f e7       	ldi	r20, 0x7F	; 127
    2050:	57 e4       	ldi	r21, 0x47	; 71
    2052:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2056:	18 16       	cp	r1, r24
    2058:	4c f5       	brge	.+82     	; 0x20ac <LCD_sendCommand+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    205a:	6f a1       	ldd	r22, Y+39	; 0x27
    205c:	78 a5       	ldd	r23, Y+40	; 0x28
    205e:	89 a5       	ldd	r24, Y+41	; 0x29
    2060:	9a a5       	ldd	r25, Y+42	; 0x2a
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	40 e2       	ldi	r20, 0x20	; 32
    2068:	51 e4       	ldi	r21, 0x41	; 65
    206a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	bc 01       	movw	r22, r24
    2074:	cd 01       	movw	r24, r26
    2076:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	9a a3       	std	Y+34, r25	; 0x22
    2080:	89 a3       	std	Y+33, r24	; 0x21
    2082:	0f c0       	rjmp	.+30     	; 0x20a2 <LCD_sendCommand+0x624>
    2084:	80 e9       	ldi	r24, 0x90	; 144
    2086:	91 e0       	ldi	r25, 0x01	; 1
    2088:	98 a3       	std	Y+32, r25	; 0x20
    208a:	8f 8f       	std	Y+31, r24	; 0x1f
    208c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    208e:	98 a1       	ldd	r25, Y+32	; 0x20
    2090:	01 97       	sbiw	r24, 0x01	; 1
    2092:	f1 f7       	brne	.-4      	; 0x2090 <LCD_sendCommand+0x612>
    2094:	98 a3       	std	Y+32, r25	; 0x20
    2096:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2098:	89 a1       	ldd	r24, Y+33	; 0x21
    209a:	9a a1       	ldd	r25, Y+34	; 0x22
    209c:	01 97       	sbiw	r24, 0x01	; 1
    209e:	9a a3       	std	Y+34, r25	; 0x22
    20a0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20a2:	89 a1       	ldd	r24, Y+33	; 0x21
    20a4:	9a a1       	ldd	r25, Y+34	; 0x22
    20a6:	00 97       	sbiw	r24, 0x00	; 0
    20a8:	69 f7       	brne	.-38     	; 0x2084 <LCD_sendCommand+0x606>
    20aa:	14 c0       	rjmp	.+40     	; 0x20d4 <LCD_sendCommand+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ac:	6b a1       	ldd	r22, Y+35	; 0x23
    20ae:	7c a1       	ldd	r23, Y+36	; 0x24
    20b0:	8d a1       	ldd	r24, Y+37	; 0x25
    20b2:	9e a1       	ldd	r25, Y+38	; 0x26
    20b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b8:	dc 01       	movw	r26, r24
    20ba:	cb 01       	movw	r24, r22
    20bc:	9a a3       	std	Y+34, r25	; 0x22
    20be:	89 a3       	std	Y+33, r24	; 0x21
    20c0:	89 a1       	ldd	r24, Y+33	; 0x21
    20c2:	9a a1       	ldd	r25, Y+34	; 0x22
    20c4:	9e 8f       	std	Y+30, r25	; 0x1e
    20c6:	8d 8f       	std	Y+29, r24	; 0x1d
    20c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20ca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20cc:	01 97       	sbiw	r24, 0x01	; 1
    20ce:	f1 f7       	brne	.-4      	; 0x20cc <LCD_sendCommand+0x64e>
    20d0:	9e 8f       	std	Y+30, r25	; 0x1e
    20d2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    20d4:	fe 01       	movw	r30, r28
    20d6:	ed 59       	subi	r30, 0x9D	; 157
    20d8:	ff 4f       	sbci	r31, 0xFF	; 255
    20da:	80 81       	ld	r24, Z
    20dc:	98 2f       	mov	r25, r24
    20de:	91 70       	andi	r25, 0x01	; 1
    20e0:	80 e0       	ldi	r24, 0x00	; 0
    20e2:	63 e0       	ldi	r22, 0x03	; 3
    20e4:	49 2f       	mov	r20, r25
    20e6:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    20ea:	fe 01       	movw	r30, r28
    20ec:	ed 59       	subi	r30, 0x9D	; 157
    20ee:	ff 4f       	sbci	r31, 0xFF	; 255
    20f0:	80 81       	ld	r24, Z
    20f2:	86 95       	lsr	r24
    20f4:	98 2f       	mov	r25, r24
    20f6:	91 70       	andi	r25, 0x01	; 1
    20f8:	80 e0       	ldi	r24, 0x00	; 0
    20fa:	64 e0       	ldi	r22, 0x04	; 4
    20fc:	49 2f       	mov	r20, r25
    20fe:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    2102:	fe 01       	movw	r30, r28
    2104:	ed 59       	subi	r30, 0x9D	; 157
    2106:	ff 4f       	sbci	r31, 0xFF	; 255
    2108:	80 81       	ld	r24, Z
    210a:	86 95       	lsr	r24
    210c:	86 95       	lsr	r24
    210e:	98 2f       	mov	r25, r24
    2110:	91 70       	andi	r25, 0x01	; 1
    2112:	80 e0       	ldi	r24, 0x00	; 0
    2114:	65 e0       	ldi	r22, 0x05	; 5
    2116:	49 2f       	mov	r20, r25
    2118:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    211c:	fe 01       	movw	r30, r28
    211e:	ed 59       	subi	r30, 0x9D	; 157
    2120:	ff 4f       	sbci	r31, 0xFF	; 255
    2122:	80 81       	ld	r24, Z
    2124:	86 95       	lsr	r24
    2126:	86 95       	lsr	r24
    2128:	86 95       	lsr	r24
    212a:	98 2f       	mov	r25, r24
    212c:	91 70       	andi	r25, 0x01	; 1
    212e:	80 e0       	ldi	r24, 0x00	; 0
    2130:	66 e0       	ldi	r22, 0x06	; 6
    2132:	49 2f       	mov	r20, r25
    2134:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2138:	80 e0       	ldi	r24, 0x00	; 0
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	a0 e8       	ldi	r26, 0x80	; 128
    213e:	bf e3       	ldi	r27, 0x3F	; 63
    2140:	89 8f       	std	Y+25, r24	; 0x19
    2142:	9a 8f       	std	Y+26, r25	; 0x1a
    2144:	ab 8f       	std	Y+27, r26	; 0x1b
    2146:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2148:	69 8d       	ldd	r22, Y+25	; 0x19
    214a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    214c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    214e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2150:	20 e0       	ldi	r18, 0x00	; 0
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	4a e7       	ldi	r20, 0x7A	; 122
    2156:	55 e4       	ldi	r21, 0x45	; 69
    2158:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    215c:	dc 01       	movw	r26, r24
    215e:	cb 01       	movw	r24, r22
    2160:	8d 8b       	std	Y+21, r24	; 0x15
    2162:	9e 8b       	std	Y+22, r25	; 0x16
    2164:	af 8b       	std	Y+23, r26	; 0x17
    2166:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2168:	6d 89       	ldd	r22, Y+21	; 0x15
    216a:	7e 89       	ldd	r23, Y+22	; 0x16
    216c:	8f 89       	ldd	r24, Y+23	; 0x17
    216e:	98 8d       	ldd	r25, Y+24	; 0x18
    2170:	20 e0       	ldi	r18, 0x00	; 0
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	40 e8       	ldi	r20, 0x80	; 128
    2176:	5f e3       	ldi	r21, 0x3F	; 63
    2178:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    217c:	88 23       	and	r24, r24
    217e:	2c f4       	brge	.+10     	; 0x218a <LCD_sendCommand+0x70c>
		__ticks = 1;
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	9c 8b       	std	Y+20, r25	; 0x14
    2186:	8b 8b       	std	Y+19, r24	; 0x13
    2188:	3f c0       	rjmp	.+126    	; 0x2208 <LCD_sendCommand+0x78a>
	else if (__tmp > 65535)
    218a:	6d 89       	ldd	r22, Y+21	; 0x15
    218c:	7e 89       	ldd	r23, Y+22	; 0x16
    218e:	8f 89       	ldd	r24, Y+23	; 0x17
    2190:	98 8d       	ldd	r25, Y+24	; 0x18
    2192:	20 e0       	ldi	r18, 0x00	; 0
    2194:	3f ef       	ldi	r19, 0xFF	; 255
    2196:	4f e7       	ldi	r20, 0x7F	; 127
    2198:	57 e4       	ldi	r21, 0x47	; 71
    219a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    219e:	18 16       	cp	r1, r24
    21a0:	4c f5       	brge	.+82     	; 0x21f4 <LCD_sendCommand+0x776>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21a2:	69 8d       	ldd	r22, Y+25	; 0x19
    21a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	40 e2       	ldi	r20, 0x20	; 32
    21b0:	51 e4       	ldi	r21, 0x41	; 65
    21b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b6:	dc 01       	movw	r26, r24
    21b8:	cb 01       	movw	r24, r22
    21ba:	bc 01       	movw	r22, r24
    21bc:	cd 01       	movw	r24, r26
    21be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	9c 8b       	std	Y+20, r25	; 0x14
    21c8:	8b 8b       	std	Y+19, r24	; 0x13
    21ca:	0f c0       	rjmp	.+30     	; 0x21ea <LCD_sendCommand+0x76c>
    21cc:	80 e9       	ldi	r24, 0x90	; 144
    21ce:	91 e0       	ldi	r25, 0x01	; 1
    21d0:	9a 8b       	std	Y+18, r25	; 0x12
    21d2:	89 8b       	std	Y+17, r24	; 0x11
    21d4:	89 89       	ldd	r24, Y+17	; 0x11
    21d6:	9a 89       	ldd	r25, Y+18	; 0x12
    21d8:	01 97       	sbiw	r24, 0x01	; 1
    21da:	f1 f7       	brne	.-4      	; 0x21d8 <LCD_sendCommand+0x75a>
    21dc:	9a 8b       	std	Y+18, r25	; 0x12
    21de:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21e0:	8b 89       	ldd	r24, Y+19	; 0x13
    21e2:	9c 89       	ldd	r25, Y+20	; 0x14
    21e4:	01 97       	sbiw	r24, 0x01	; 1
    21e6:	9c 8b       	std	Y+20, r25	; 0x14
    21e8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ea:	8b 89       	ldd	r24, Y+19	; 0x13
    21ec:	9c 89       	ldd	r25, Y+20	; 0x14
    21ee:	00 97       	sbiw	r24, 0x00	; 0
    21f0:	69 f7       	brne	.-38     	; 0x21cc <LCD_sendCommand+0x74e>
    21f2:	14 c0       	rjmp	.+40     	; 0x221c <LCD_sendCommand+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f4:	6d 89       	ldd	r22, Y+21	; 0x15
    21f6:	7e 89       	ldd	r23, Y+22	; 0x16
    21f8:	8f 89       	ldd	r24, Y+23	; 0x17
    21fa:	98 8d       	ldd	r25, Y+24	; 0x18
    21fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2200:	dc 01       	movw	r26, r24
    2202:	cb 01       	movw	r24, r22
    2204:	9c 8b       	std	Y+20, r25	; 0x14
    2206:	8b 8b       	std	Y+19, r24	; 0x13
    2208:	8b 89       	ldd	r24, Y+19	; 0x13
    220a:	9c 89       	ldd	r25, Y+20	; 0x14
    220c:	98 8b       	std	Y+16, r25	; 0x10
    220e:	8f 87       	std	Y+15, r24	; 0x0f
    2210:	8f 85       	ldd	r24, Y+15	; 0x0f
    2212:	98 89       	ldd	r25, Y+16	; 0x10
    2214:	01 97       	sbiw	r24, 0x01	; 1
    2216:	f1 f7       	brne	.-4      	; 0x2214 <LCD_sendCommand+0x796>
    2218:	98 8b       	std	Y+16, r25	; 0x10
    221a:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    221c:	80 e0       	ldi	r24, 0x00	; 0
    221e:	62 e0       	ldi	r22, 0x02	; 2
    2220:	40 e0       	ldi	r20, 0x00	; 0
    2222:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2226:	80 e0       	ldi	r24, 0x00	; 0
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	a0 e8       	ldi	r26, 0x80	; 128
    222c:	bf e3       	ldi	r27, 0x3F	; 63
    222e:	8b 87       	std	Y+11, r24	; 0x0b
    2230:	9c 87       	std	Y+12, r25	; 0x0c
    2232:	ad 87       	std	Y+13, r26	; 0x0d
    2234:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2236:	6b 85       	ldd	r22, Y+11	; 0x0b
    2238:	7c 85       	ldd	r23, Y+12	; 0x0c
    223a:	8d 85       	ldd	r24, Y+13	; 0x0d
    223c:	9e 85       	ldd	r25, Y+14	; 0x0e
    223e:	20 e0       	ldi	r18, 0x00	; 0
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	4a e7       	ldi	r20, 0x7A	; 122
    2244:	55 e4       	ldi	r21, 0x45	; 69
    2246:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	8f 83       	std	Y+7, r24	; 0x07
    2250:	98 87       	std	Y+8, r25	; 0x08
    2252:	a9 87       	std	Y+9, r26	; 0x09
    2254:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2256:	6f 81       	ldd	r22, Y+7	; 0x07
    2258:	78 85       	ldd	r23, Y+8	; 0x08
    225a:	89 85       	ldd	r24, Y+9	; 0x09
    225c:	9a 85       	ldd	r25, Y+10	; 0x0a
    225e:	20 e0       	ldi	r18, 0x00	; 0
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	40 e8       	ldi	r20, 0x80	; 128
    2264:	5f e3       	ldi	r21, 0x3F	; 63
    2266:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    226a:	88 23       	and	r24, r24
    226c:	2c f4       	brge	.+10     	; 0x2278 <LCD_sendCommand+0x7fa>
		__ticks = 1;
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	9e 83       	std	Y+6, r25	; 0x06
    2274:	8d 83       	std	Y+5, r24	; 0x05
    2276:	3f c0       	rjmp	.+126    	; 0x22f6 <LCD_sendCommand+0x878>
	else if (__tmp > 65535)
    2278:	6f 81       	ldd	r22, Y+7	; 0x07
    227a:	78 85       	ldd	r23, Y+8	; 0x08
    227c:	89 85       	ldd	r24, Y+9	; 0x09
    227e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	3f ef       	ldi	r19, 0xFF	; 255
    2284:	4f e7       	ldi	r20, 0x7F	; 127
    2286:	57 e4       	ldi	r21, 0x47	; 71
    2288:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    228c:	18 16       	cp	r1, r24
    228e:	4c f5       	brge	.+82     	; 0x22e2 <LCD_sendCommand+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2290:	6b 85       	ldd	r22, Y+11	; 0x0b
    2292:	7c 85       	ldd	r23, Y+12	; 0x0c
    2294:	8d 85       	ldd	r24, Y+13	; 0x0d
    2296:	9e 85       	ldd	r25, Y+14	; 0x0e
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	40 e2       	ldi	r20, 0x20	; 32
    229e:	51 e4       	ldi	r21, 0x41	; 65
    22a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	bc 01       	movw	r22, r24
    22aa:	cd 01       	movw	r24, r26
    22ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b0:	dc 01       	movw	r26, r24
    22b2:	cb 01       	movw	r24, r22
    22b4:	9e 83       	std	Y+6, r25	; 0x06
    22b6:	8d 83       	std	Y+5, r24	; 0x05
    22b8:	0f c0       	rjmp	.+30     	; 0x22d8 <LCD_sendCommand+0x85a>
    22ba:	80 e9       	ldi	r24, 0x90	; 144
    22bc:	91 e0       	ldi	r25, 0x01	; 1
    22be:	9c 83       	std	Y+4, r25	; 0x04
    22c0:	8b 83       	std	Y+3, r24	; 0x03
    22c2:	8b 81       	ldd	r24, Y+3	; 0x03
    22c4:	9c 81       	ldd	r25, Y+4	; 0x04
    22c6:	01 97       	sbiw	r24, 0x01	; 1
    22c8:	f1 f7       	brne	.-4      	; 0x22c6 <LCD_sendCommand+0x848>
    22ca:	9c 83       	std	Y+4, r25	; 0x04
    22cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ce:	8d 81       	ldd	r24, Y+5	; 0x05
    22d0:	9e 81       	ldd	r25, Y+6	; 0x06
    22d2:	01 97       	sbiw	r24, 0x01	; 1
    22d4:	9e 83       	std	Y+6, r25	; 0x06
    22d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22d8:	8d 81       	ldd	r24, Y+5	; 0x05
    22da:	9e 81       	ldd	r25, Y+6	; 0x06
    22dc:	00 97       	sbiw	r24, 0x00	; 0
    22de:	69 f7       	brne	.-38     	; 0x22ba <LCD_sendCommand+0x83c>
    22e0:	14 c0       	rjmp	.+40     	; 0x230a <LCD_sendCommand+0x88c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22e2:	6f 81       	ldd	r22, Y+7	; 0x07
    22e4:	78 85       	ldd	r23, Y+8	; 0x08
    22e6:	89 85       	ldd	r24, Y+9	; 0x09
    22e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	9e 83       	std	Y+6, r25	; 0x06
    22f4:	8d 83       	std	Y+5, r24	; 0x05
    22f6:	8d 81       	ldd	r24, Y+5	; 0x05
    22f8:	9e 81       	ldd	r25, Y+6	; 0x06
    22fa:	9a 83       	std	Y+2, r25	; 0x02
    22fc:	89 83       	std	Y+1, r24	; 0x01
    22fe:	89 81       	ldd	r24, Y+1	; 0x01
    2300:	9a 81       	ldd	r25, Y+2	; 0x02
    2302:	01 97       	sbiw	r24, 0x01	; 1
    2304:	f1 f7       	brne	.-4      	; 0x2302 <LCD_sendCommand+0x884>
    2306:	9a 83       	std	Y+2, r25	; 0x02
    2308:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    230a:	cd 59       	subi	r28, 0x9D	; 157
    230c:	df 4f       	sbci	r29, 0xFF	; 255
    230e:	0f b6       	in	r0, 0x3f	; 63
    2310:	f8 94       	cli
    2312:	de bf       	out	0x3e, r29	; 62
    2314:	0f be       	out	0x3f, r0	; 63
    2316:	cd bf       	out	0x3d, r28	; 61
    2318:	cf 91       	pop	r28
    231a:	df 91       	pop	r29
    231c:	1f 91       	pop	r17
    231e:	0f 91       	pop	r16
    2320:	08 95       	ret

00002322 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2322:	0f 93       	push	r16
    2324:	1f 93       	push	r17
    2326:	df 93       	push	r29
    2328:	cf 93       	push	r28
    232a:	cd b7       	in	r28, 0x3d	; 61
    232c:	de b7       	in	r29, 0x3e	; 62
    232e:	c3 56       	subi	r28, 0x63	; 99
    2330:	d0 40       	sbci	r29, 0x00	; 0
    2332:	0f b6       	in	r0, 0x3f	; 63
    2334:	f8 94       	cli
    2336:	de bf       	out	0x3e, r29	; 62
    2338:	0f be       	out	0x3f, r0	; 63
    233a:	cd bf       	out	0x3d, r28	; 61
    233c:	fe 01       	movw	r30, r28
    233e:	ed 59       	subi	r30, 0x9D	; 157
    2340:	ff 4f       	sbci	r31, 0xFF	; 255
    2342:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2344:	80 e0       	ldi	r24, 0x00	; 0
    2346:	61 e0       	ldi	r22, 0x01	; 1
    2348:	41 e0       	ldi	r20, 0x01	; 1
    234a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    234e:	fe 01       	movw	r30, r28
    2350:	e1 5a       	subi	r30, 0xA1	; 161
    2352:	ff 4f       	sbci	r31, 0xFF	; 255
    2354:	80 e0       	ldi	r24, 0x00	; 0
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	a0 e8       	ldi	r26, 0x80	; 128
    235a:	bf e3       	ldi	r27, 0x3F	; 63
    235c:	80 83       	st	Z, r24
    235e:	91 83       	std	Z+1, r25	; 0x01
    2360:	a2 83       	std	Z+2, r26	; 0x02
    2362:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2364:	8e 01       	movw	r16, r28
    2366:	05 5a       	subi	r16, 0xA5	; 165
    2368:	1f 4f       	sbci	r17, 0xFF	; 255
    236a:	fe 01       	movw	r30, r28
    236c:	e1 5a       	subi	r30, 0xA1	; 161
    236e:	ff 4f       	sbci	r31, 0xFF	; 255
    2370:	60 81       	ld	r22, Z
    2372:	71 81       	ldd	r23, Z+1	; 0x01
    2374:	82 81       	ldd	r24, Z+2	; 0x02
    2376:	93 81       	ldd	r25, Z+3	; 0x03
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	4a e7       	ldi	r20, 0x7A	; 122
    237e:	55 e4       	ldi	r21, 0x45	; 69
    2380:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	f8 01       	movw	r30, r16
    238a:	80 83       	st	Z, r24
    238c:	91 83       	std	Z+1, r25	; 0x01
    238e:	a2 83       	std	Z+2, r26	; 0x02
    2390:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2392:	fe 01       	movw	r30, r28
    2394:	e5 5a       	subi	r30, 0xA5	; 165
    2396:	ff 4f       	sbci	r31, 0xFF	; 255
    2398:	60 81       	ld	r22, Z
    239a:	71 81       	ldd	r23, Z+1	; 0x01
    239c:	82 81       	ldd	r24, Z+2	; 0x02
    239e:	93 81       	ldd	r25, Z+3	; 0x03
    23a0:	20 e0       	ldi	r18, 0x00	; 0
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	40 e8       	ldi	r20, 0x80	; 128
    23a6:	5f e3       	ldi	r21, 0x3F	; 63
    23a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23ac:	88 23       	and	r24, r24
    23ae:	44 f4       	brge	.+16     	; 0x23c0 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    23b0:	fe 01       	movw	r30, r28
    23b2:	e7 5a       	subi	r30, 0xA7	; 167
    23b4:	ff 4f       	sbci	r31, 0xFF	; 255
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	91 83       	std	Z+1, r25	; 0x01
    23bc:	80 83       	st	Z, r24
    23be:	64 c0       	rjmp	.+200    	; 0x2488 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    23c0:	fe 01       	movw	r30, r28
    23c2:	e5 5a       	subi	r30, 0xA5	; 165
    23c4:	ff 4f       	sbci	r31, 0xFF	; 255
    23c6:	60 81       	ld	r22, Z
    23c8:	71 81       	ldd	r23, Z+1	; 0x01
    23ca:	82 81       	ldd	r24, Z+2	; 0x02
    23cc:	93 81       	ldd	r25, Z+3	; 0x03
    23ce:	20 e0       	ldi	r18, 0x00	; 0
    23d0:	3f ef       	ldi	r19, 0xFF	; 255
    23d2:	4f e7       	ldi	r20, 0x7F	; 127
    23d4:	57 e4       	ldi	r21, 0x47	; 71
    23d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23da:	18 16       	cp	r1, r24
    23dc:	0c f0       	brlt	.+2      	; 0x23e0 <LCD_displayCharacter+0xbe>
    23de:	43 c0       	rjmp	.+134    	; 0x2466 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23e0:	fe 01       	movw	r30, r28
    23e2:	e1 5a       	subi	r30, 0xA1	; 161
    23e4:	ff 4f       	sbci	r31, 0xFF	; 255
    23e6:	60 81       	ld	r22, Z
    23e8:	71 81       	ldd	r23, Z+1	; 0x01
    23ea:	82 81       	ldd	r24, Z+2	; 0x02
    23ec:	93 81       	ldd	r25, Z+3	; 0x03
    23ee:	20 e0       	ldi	r18, 0x00	; 0
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	40 e2       	ldi	r20, 0x20	; 32
    23f4:	51 e4       	ldi	r21, 0x41	; 65
    23f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23fa:	dc 01       	movw	r26, r24
    23fc:	cb 01       	movw	r24, r22
    23fe:	8e 01       	movw	r16, r28
    2400:	07 5a       	subi	r16, 0xA7	; 167
    2402:	1f 4f       	sbci	r17, 0xFF	; 255
    2404:	bc 01       	movw	r22, r24
    2406:	cd 01       	movw	r24, r26
    2408:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    240c:	dc 01       	movw	r26, r24
    240e:	cb 01       	movw	r24, r22
    2410:	f8 01       	movw	r30, r16
    2412:	91 83       	std	Z+1, r25	; 0x01
    2414:	80 83       	st	Z, r24
    2416:	1f c0       	rjmp	.+62     	; 0x2456 <LCD_displayCharacter+0x134>
    2418:	fe 01       	movw	r30, r28
    241a:	e9 5a       	subi	r30, 0xA9	; 169
    241c:	ff 4f       	sbci	r31, 0xFF	; 255
    241e:	80 e9       	ldi	r24, 0x90	; 144
    2420:	91 e0       	ldi	r25, 0x01	; 1
    2422:	91 83       	std	Z+1, r25	; 0x01
    2424:	80 83       	st	Z, r24
    2426:	fe 01       	movw	r30, r28
    2428:	e9 5a       	subi	r30, 0xA9	; 169
    242a:	ff 4f       	sbci	r31, 0xFF	; 255
    242c:	80 81       	ld	r24, Z
    242e:	91 81       	ldd	r25, Z+1	; 0x01
    2430:	01 97       	sbiw	r24, 0x01	; 1
    2432:	f1 f7       	brne	.-4      	; 0x2430 <LCD_displayCharacter+0x10e>
    2434:	fe 01       	movw	r30, r28
    2436:	e9 5a       	subi	r30, 0xA9	; 169
    2438:	ff 4f       	sbci	r31, 0xFF	; 255
    243a:	91 83       	std	Z+1, r25	; 0x01
    243c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    243e:	de 01       	movw	r26, r28
    2440:	a7 5a       	subi	r26, 0xA7	; 167
    2442:	bf 4f       	sbci	r27, 0xFF	; 255
    2444:	fe 01       	movw	r30, r28
    2446:	e7 5a       	subi	r30, 0xA7	; 167
    2448:	ff 4f       	sbci	r31, 0xFF	; 255
    244a:	80 81       	ld	r24, Z
    244c:	91 81       	ldd	r25, Z+1	; 0x01
    244e:	01 97       	sbiw	r24, 0x01	; 1
    2450:	11 96       	adiw	r26, 0x01	; 1
    2452:	9c 93       	st	X, r25
    2454:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2456:	fe 01       	movw	r30, r28
    2458:	e7 5a       	subi	r30, 0xA7	; 167
    245a:	ff 4f       	sbci	r31, 0xFF	; 255
    245c:	80 81       	ld	r24, Z
    245e:	91 81       	ldd	r25, Z+1	; 0x01
    2460:	00 97       	sbiw	r24, 0x00	; 0
    2462:	d1 f6       	brne	.-76     	; 0x2418 <LCD_displayCharacter+0xf6>
    2464:	27 c0       	rjmp	.+78     	; 0x24b4 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2466:	8e 01       	movw	r16, r28
    2468:	07 5a       	subi	r16, 0xA7	; 167
    246a:	1f 4f       	sbci	r17, 0xFF	; 255
    246c:	fe 01       	movw	r30, r28
    246e:	e5 5a       	subi	r30, 0xA5	; 165
    2470:	ff 4f       	sbci	r31, 0xFF	; 255
    2472:	60 81       	ld	r22, Z
    2474:	71 81       	ldd	r23, Z+1	; 0x01
    2476:	82 81       	ldd	r24, Z+2	; 0x02
    2478:	93 81       	ldd	r25, Z+3	; 0x03
    247a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    247e:	dc 01       	movw	r26, r24
    2480:	cb 01       	movw	r24, r22
    2482:	f8 01       	movw	r30, r16
    2484:	91 83       	std	Z+1, r25	; 0x01
    2486:	80 83       	st	Z, r24
    2488:	de 01       	movw	r26, r28
    248a:	ab 5a       	subi	r26, 0xAB	; 171
    248c:	bf 4f       	sbci	r27, 0xFF	; 255
    248e:	fe 01       	movw	r30, r28
    2490:	e7 5a       	subi	r30, 0xA7	; 167
    2492:	ff 4f       	sbci	r31, 0xFF	; 255
    2494:	80 81       	ld	r24, Z
    2496:	91 81       	ldd	r25, Z+1	; 0x01
    2498:	8d 93       	st	X+, r24
    249a:	9c 93       	st	X, r25
    249c:	fe 01       	movw	r30, r28
    249e:	eb 5a       	subi	r30, 0xAB	; 171
    24a0:	ff 4f       	sbci	r31, 0xFF	; 255
    24a2:	80 81       	ld	r24, Z
    24a4:	91 81       	ldd	r25, Z+1	; 0x01
    24a6:	01 97       	sbiw	r24, 0x01	; 1
    24a8:	f1 f7       	brne	.-4      	; 0x24a6 <LCD_displayCharacter+0x184>
    24aa:	fe 01       	movw	r30, r28
    24ac:	eb 5a       	subi	r30, 0xAB	; 171
    24ae:	ff 4f       	sbci	r31, 0xFF	; 255
    24b0:	91 83       	std	Z+1, r25	; 0x01
    24b2:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    24b4:	80 e0       	ldi	r24, 0x00	; 0
    24b6:	62 e0       	ldi	r22, 0x02	; 2
    24b8:	41 e0       	ldi	r20, 0x01	; 1
    24ba:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    24be:	fe 01       	movw	r30, r28
    24c0:	ef 5a       	subi	r30, 0xAF	; 175
    24c2:	ff 4f       	sbci	r31, 0xFF	; 255
    24c4:	80 e0       	ldi	r24, 0x00	; 0
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	a0 e8       	ldi	r26, 0x80	; 128
    24ca:	bf e3       	ldi	r27, 0x3F	; 63
    24cc:	80 83       	st	Z, r24
    24ce:	91 83       	std	Z+1, r25	; 0x01
    24d0:	a2 83       	std	Z+2, r26	; 0x02
    24d2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24d4:	8e 01       	movw	r16, r28
    24d6:	03 5b       	subi	r16, 0xB3	; 179
    24d8:	1f 4f       	sbci	r17, 0xFF	; 255
    24da:	fe 01       	movw	r30, r28
    24dc:	ef 5a       	subi	r30, 0xAF	; 175
    24de:	ff 4f       	sbci	r31, 0xFF	; 255
    24e0:	60 81       	ld	r22, Z
    24e2:	71 81       	ldd	r23, Z+1	; 0x01
    24e4:	82 81       	ldd	r24, Z+2	; 0x02
    24e6:	93 81       	ldd	r25, Z+3	; 0x03
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	4a e7       	ldi	r20, 0x7A	; 122
    24ee:	55 e4       	ldi	r21, 0x45	; 69
    24f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f4:	dc 01       	movw	r26, r24
    24f6:	cb 01       	movw	r24, r22
    24f8:	f8 01       	movw	r30, r16
    24fa:	80 83       	st	Z, r24
    24fc:	91 83       	std	Z+1, r25	; 0x01
    24fe:	a2 83       	std	Z+2, r26	; 0x02
    2500:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2502:	fe 01       	movw	r30, r28
    2504:	e3 5b       	subi	r30, 0xB3	; 179
    2506:	ff 4f       	sbci	r31, 0xFF	; 255
    2508:	60 81       	ld	r22, Z
    250a:	71 81       	ldd	r23, Z+1	; 0x01
    250c:	82 81       	ldd	r24, Z+2	; 0x02
    250e:	93 81       	ldd	r25, Z+3	; 0x03
    2510:	20 e0       	ldi	r18, 0x00	; 0
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	40 e8       	ldi	r20, 0x80	; 128
    2516:	5f e3       	ldi	r21, 0x3F	; 63
    2518:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    251c:	88 23       	and	r24, r24
    251e:	44 f4       	brge	.+16     	; 0x2530 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2520:	fe 01       	movw	r30, r28
    2522:	e5 5b       	subi	r30, 0xB5	; 181
    2524:	ff 4f       	sbci	r31, 0xFF	; 255
    2526:	81 e0       	ldi	r24, 0x01	; 1
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	91 83       	std	Z+1, r25	; 0x01
    252c:	80 83       	st	Z, r24
    252e:	64 c0       	rjmp	.+200    	; 0x25f8 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2530:	fe 01       	movw	r30, r28
    2532:	e3 5b       	subi	r30, 0xB3	; 179
    2534:	ff 4f       	sbci	r31, 0xFF	; 255
    2536:	60 81       	ld	r22, Z
    2538:	71 81       	ldd	r23, Z+1	; 0x01
    253a:	82 81       	ldd	r24, Z+2	; 0x02
    253c:	93 81       	ldd	r25, Z+3	; 0x03
    253e:	20 e0       	ldi	r18, 0x00	; 0
    2540:	3f ef       	ldi	r19, 0xFF	; 255
    2542:	4f e7       	ldi	r20, 0x7F	; 127
    2544:	57 e4       	ldi	r21, 0x47	; 71
    2546:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    254a:	18 16       	cp	r1, r24
    254c:	0c f0       	brlt	.+2      	; 0x2550 <LCD_displayCharacter+0x22e>
    254e:	43 c0       	rjmp	.+134    	; 0x25d6 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2550:	fe 01       	movw	r30, r28
    2552:	ef 5a       	subi	r30, 0xAF	; 175
    2554:	ff 4f       	sbci	r31, 0xFF	; 255
    2556:	60 81       	ld	r22, Z
    2558:	71 81       	ldd	r23, Z+1	; 0x01
    255a:	82 81       	ldd	r24, Z+2	; 0x02
    255c:	93 81       	ldd	r25, Z+3	; 0x03
    255e:	20 e0       	ldi	r18, 0x00	; 0
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	40 e2       	ldi	r20, 0x20	; 32
    2564:	51 e4       	ldi	r21, 0x41	; 65
    2566:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    256a:	dc 01       	movw	r26, r24
    256c:	cb 01       	movw	r24, r22
    256e:	8e 01       	movw	r16, r28
    2570:	05 5b       	subi	r16, 0xB5	; 181
    2572:	1f 4f       	sbci	r17, 0xFF	; 255
    2574:	bc 01       	movw	r22, r24
    2576:	cd 01       	movw	r24, r26
    2578:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    257c:	dc 01       	movw	r26, r24
    257e:	cb 01       	movw	r24, r22
    2580:	f8 01       	movw	r30, r16
    2582:	91 83       	std	Z+1, r25	; 0x01
    2584:	80 83       	st	Z, r24
    2586:	1f c0       	rjmp	.+62     	; 0x25c6 <LCD_displayCharacter+0x2a4>
    2588:	fe 01       	movw	r30, r28
    258a:	e7 5b       	subi	r30, 0xB7	; 183
    258c:	ff 4f       	sbci	r31, 0xFF	; 255
    258e:	80 e9       	ldi	r24, 0x90	; 144
    2590:	91 e0       	ldi	r25, 0x01	; 1
    2592:	91 83       	std	Z+1, r25	; 0x01
    2594:	80 83       	st	Z, r24
    2596:	fe 01       	movw	r30, r28
    2598:	e7 5b       	subi	r30, 0xB7	; 183
    259a:	ff 4f       	sbci	r31, 0xFF	; 255
    259c:	80 81       	ld	r24, Z
    259e:	91 81       	ldd	r25, Z+1	; 0x01
    25a0:	01 97       	sbiw	r24, 0x01	; 1
    25a2:	f1 f7       	brne	.-4      	; 0x25a0 <LCD_displayCharacter+0x27e>
    25a4:	fe 01       	movw	r30, r28
    25a6:	e7 5b       	subi	r30, 0xB7	; 183
    25a8:	ff 4f       	sbci	r31, 0xFF	; 255
    25aa:	91 83       	std	Z+1, r25	; 0x01
    25ac:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ae:	de 01       	movw	r26, r28
    25b0:	a5 5b       	subi	r26, 0xB5	; 181
    25b2:	bf 4f       	sbci	r27, 0xFF	; 255
    25b4:	fe 01       	movw	r30, r28
    25b6:	e5 5b       	subi	r30, 0xB5	; 181
    25b8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ba:	80 81       	ld	r24, Z
    25bc:	91 81       	ldd	r25, Z+1	; 0x01
    25be:	01 97       	sbiw	r24, 0x01	; 1
    25c0:	11 96       	adiw	r26, 0x01	; 1
    25c2:	9c 93       	st	X, r25
    25c4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25c6:	fe 01       	movw	r30, r28
    25c8:	e5 5b       	subi	r30, 0xB5	; 181
    25ca:	ff 4f       	sbci	r31, 0xFF	; 255
    25cc:	80 81       	ld	r24, Z
    25ce:	91 81       	ldd	r25, Z+1	; 0x01
    25d0:	00 97       	sbiw	r24, 0x00	; 0
    25d2:	d1 f6       	brne	.-76     	; 0x2588 <LCD_displayCharacter+0x266>
    25d4:	27 c0       	rjmp	.+78     	; 0x2624 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25d6:	8e 01       	movw	r16, r28
    25d8:	05 5b       	subi	r16, 0xB5	; 181
    25da:	1f 4f       	sbci	r17, 0xFF	; 255
    25dc:	fe 01       	movw	r30, r28
    25de:	e3 5b       	subi	r30, 0xB3	; 179
    25e0:	ff 4f       	sbci	r31, 0xFF	; 255
    25e2:	60 81       	ld	r22, Z
    25e4:	71 81       	ldd	r23, Z+1	; 0x01
    25e6:	82 81       	ldd	r24, Z+2	; 0x02
    25e8:	93 81       	ldd	r25, Z+3	; 0x03
    25ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ee:	dc 01       	movw	r26, r24
    25f0:	cb 01       	movw	r24, r22
    25f2:	f8 01       	movw	r30, r16
    25f4:	91 83       	std	Z+1, r25	; 0x01
    25f6:	80 83       	st	Z, r24
    25f8:	de 01       	movw	r26, r28
    25fa:	a9 5b       	subi	r26, 0xB9	; 185
    25fc:	bf 4f       	sbci	r27, 0xFF	; 255
    25fe:	fe 01       	movw	r30, r28
    2600:	e5 5b       	subi	r30, 0xB5	; 181
    2602:	ff 4f       	sbci	r31, 0xFF	; 255
    2604:	80 81       	ld	r24, Z
    2606:	91 81       	ldd	r25, Z+1	; 0x01
    2608:	8d 93       	st	X+, r24
    260a:	9c 93       	st	X, r25
    260c:	fe 01       	movw	r30, r28
    260e:	e9 5b       	subi	r30, 0xB9	; 185
    2610:	ff 4f       	sbci	r31, 0xFF	; 255
    2612:	80 81       	ld	r24, Z
    2614:	91 81       	ldd	r25, Z+1	; 0x01
    2616:	01 97       	sbiw	r24, 0x01	; 1
    2618:	f1 f7       	brne	.-4      	; 0x2616 <LCD_displayCharacter+0x2f4>
    261a:	fe 01       	movw	r30, r28
    261c:	e9 5b       	subi	r30, 0xB9	; 185
    261e:	ff 4f       	sbci	r31, 0xFF	; 255
    2620:	91 83       	std	Z+1, r25	; 0x01
    2622:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    2624:	fe 01       	movw	r30, r28
    2626:	ed 59       	subi	r30, 0x9D	; 157
    2628:	ff 4f       	sbci	r31, 0xFF	; 255
    262a:	80 81       	ld	r24, Z
    262c:	82 95       	swap	r24
    262e:	8f 70       	andi	r24, 0x0F	; 15
    2630:	98 2f       	mov	r25, r24
    2632:	91 70       	andi	r25, 0x01	; 1
    2634:	80 e0       	ldi	r24, 0x00	; 0
    2636:	63 e0       	ldi	r22, 0x03	; 3
    2638:	49 2f       	mov	r20, r25
    263a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    263e:	fe 01       	movw	r30, r28
    2640:	ed 59       	subi	r30, 0x9D	; 157
    2642:	ff 4f       	sbci	r31, 0xFF	; 255
    2644:	80 81       	ld	r24, Z
    2646:	82 95       	swap	r24
    2648:	86 95       	lsr	r24
    264a:	87 70       	andi	r24, 0x07	; 7
    264c:	98 2f       	mov	r25, r24
    264e:	91 70       	andi	r25, 0x01	; 1
    2650:	80 e0       	ldi	r24, 0x00	; 0
    2652:	64 e0       	ldi	r22, 0x04	; 4
    2654:	49 2f       	mov	r20, r25
    2656:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    265a:	fe 01       	movw	r30, r28
    265c:	ed 59       	subi	r30, 0x9D	; 157
    265e:	ff 4f       	sbci	r31, 0xFF	; 255
    2660:	80 81       	ld	r24, Z
    2662:	82 95       	swap	r24
    2664:	86 95       	lsr	r24
    2666:	86 95       	lsr	r24
    2668:	83 70       	andi	r24, 0x03	; 3
    266a:	98 2f       	mov	r25, r24
    266c:	91 70       	andi	r25, 0x01	; 1
    266e:	80 e0       	ldi	r24, 0x00	; 0
    2670:	65 e0       	ldi	r22, 0x05	; 5
    2672:	49 2f       	mov	r20, r25
    2674:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    2678:	fe 01       	movw	r30, r28
    267a:	ed 59       	subi	r30, 0x9D	; 157
    267c:	ff 4f       	sbci	r31, 0xFF	; 255
    267e:	80 81       	ld	r24, Z
    2680:	98 2f       	mov	r25, r24
    2682:	99 1f       	adc	r25, r25
    2684:	99 27       	eor	r25, r25
    2686:	99 1f       	adc	r25, r25
    2688:	80 e0       	ldi	r24, 0x00	; 0
    268a:	66 e0       	ldi	r22, 0x06	; 6
    268c:	49 2f       	mov	r20, r25
    268e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2692:	fe 01       	movw	r30, r28
    2694:	ed 5b       	subi	r30, 0xBD	; 189
    2696:	ff 4f       	sbci	r31, 0xFF	; 255
    2698:	80 e0       	ldi	r24, 0x00	; 0
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	a0 e8       	ldi	r26, 0x80	; 128
    269e:	bf e3       	ldi	r27, 0x3F	; 63
    26a0:	80 83       	st	Z, r24
    26a2:	91 83       	std	Z+1, r25	; 0x01
    26a4:	a2 83       	std	Z+2, r26	; 0x02
    26a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26a8:	8e 01       	movw	r16, r28
    26aa:	01 5c       	subi	r16, 0xC1	; 193
    26ac:	1f 4f       	sbci	r17, 0xFF	; 255
    26ae:	fe 01       	movw	r30, r28
    26b0:	ed 5b       	subi	r30, 0xBD	; 189
    26b2:	ff 4f       	sbci	r31, 0xFF	; 255
    26b4:	60 81       	ld	r22, Z
    26b6:	71 81       	ldd	r23, Z+1	; 0x01
    26b8:	82 81       	ldd	r24, Z+2	; 0x02
    26ba:	93 81       	ldd	r25, Z+3	; 0x03
    26bc:	20 e0       	ldi	r18, 0x00	; 0
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	4a e7       	ldi	r20, 0x7A	; 122
    26c2:	55 e4       	ldi	r21, 0x45	; 69
    26c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c8:	dc 01       	movw	r26, r24
    26ca:	cb 01       	movw	r24, r22
    26cc:	f8 01       	movw	r30, r16
    26ce:	80 83       	st	Z, r24
    26d0:	91 83       	std	Z+1, r25	; 0x01
    26d2:	a2 83       	std	Z+2, r26	; 0x02
    26d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26d6:	fe 01       	movw	r30, r28
    26d8:	ff 96       	adiw	r30, 0x3f	; 63
    26da:	60 81       	ld	r22, Z
    26dc:	71 81       	ldd	r23, Z+1	; 0x01
    26de:	82 81       	ldd	r24, Z+2	; 0x02
    26e0:	93 81       	ldd	r25, Z+3	; 0x03
    26e2:	20 e0       	ldi	r18, 0x00	; 0
    26e4:	30 e0       	ldi	r19, 0x00	; 0
    26e6:	40 e8       	ldi	r20, 0x80	; 128
    26e8:	5f e3       	ldi	r21, 0x3F	; 63
    26ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26ee:	88 23       	and	r24, r24
    26f0:	2c f4       	brge	.+10     	; 0x26fc <LCD_displayCharacter+0x3da>
		__ticks = 1;
    26f2:	81 e0       	ldi	r24, 0x01	; 1
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	9e af       	std	Y+62, r25	; 0x3e
    26f8:	8d af       	std	Y+61, r24	; 0x3d
    26fa:	46 c0       	rjmp	.+140    	; 0x2788 <LCD_displayCharacter+0x466>
	else if (__tmp > 65535)
    26fc:	fe 01       	movw	r30, r28
    26fe:	ff 96       	adiw	r30, 0x3f	; 63
    2700:	60 81       	ld	r22, Z
    2702:	71 81       	ldd	r23, Z+1	; 0x01
    2704:	82 81       	ldd	r24, Z+2	; 0x02
    2706:	93 81       	ldd	r25, Z+3	; 0x03
    2708:	20 e0       	ldi	r18, 0x00	; 0
    270a:	3f ef       	ldi	r19, 0xFF	; 255
    270c:	4f e7       	ldi	r20, 0x7F	; 127
    270e:	57 e4       	ldi	r21, 0x47	; 71
    2710:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2714:	18 16       	cp	r1, r24
    2716:	64 f5       	brge	.+88     	; 0x2770 <LCD_displayCharacter+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2718:	fe 01       	movw	r30, r28
    271a:	ed 5b       	subi	r30, 0xBD	; 189
    271c:	ff 4f       	sbci	r31, 0xFF	; 255
    271e:	60 81       	ld	r22, Z
    2720:	71 81       	ldd	r23, Z+1	; 0x01
    2722:	82 81       	ldd	r24, Z+2	; 0x02
    2724:	93 81       	ldd	r25, Z+3	; 0x03
    2726:	20 e0       	ldi	r18, 0x00	; 0
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	40 e2       	ldi	r20, 0x20	; 32
    272c:	51 e4       	ldi	r21, 0x41	; 65
    272e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2732:	dc 01       	movw	r26, r24
    2734:	cb 01       	movw	r24, r22
    2736:	bc 01       	movw	r22, r24
    2738:	cd 01       	movw	r24, r26
    273a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    273e:	dc 01       	movw	r26, r24
    2740:	cb 01       	movw	r24, r22
    2742:	9e af       	std	Y+62, r25	; 0x3e
    2744:	8d af       	std	Y+61, r24	; 0x3d
    2746:	0f c0       	rjmp	.+30     	; 0x2766 <LCD_displayCharacter+0x444>
    2748:	80 e9       	ldi	r24, 0x90	; 144
    274a:	91 e0       	ldi	r25, 0x01	; 1
    274c:	9c af       	std	Y+60, r25	; 0x3c
    274e:	8b af       	std	Y+59, r24	; 0x3b
    2750:	8b ad       	ldd	r24, Y+59	; 0x3b
    2752:	9c ad       	ldd	r25, Y+60	; 0x3c
    2754:	01 97       	sbiw	r24, 0x01	; 1
    2756:	f1 f7       	brne	.-4      	; 0x2754 <LCD_displayCharacter+0x432>
    2758:	9c af       	std	Y+60, r25	; 0x3c
    275a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    275c:	8d ad       	ldd	r24, Y+61	; 0x3d
    275e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2760:	01 97       	sbiw	r24, 0x01	; 1
    2762:	9e af       	std	Y+62, r25	; 0x3e
    2764:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2766:	8d ad       	ldd	r24, Y+61	; 0x3d
    2768:	9e ad       	ldd	r25, Y+62	; 0x3e
    276a:	00 97       	sbiw	r24, 0x00	; 0
    276c:	69 f7       	brne	.-38     	; 0x2748 <LCD_displayCharacter+0x426>
    276e:	16 c0       	rjmp	.+44     	; 0x279c <LCD_displayCharacter+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2770:	fe 01       	movw	r30, r28
    2772:	ff 96       	adiw	r30, 0x3f	; 63
    2774:	60 81       	ld	r22, Z
    2776:	71 81       	ldd	r23, Z+1	; 0x01
    2778:	82 81       	ldd	r24, Z+2	; 0x02
    277a:	93 81       	ldd	r25, Z+3	; 0x03
    277c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2780:	dc 01       	movw	r26, r24
    2782:	cb 01       	movw	r24, r22
    2784:	9e af       	std	Y+62, r25	; 0x3e
    2786:	8d af       	std	Y+61, r24	; 0x3d
    2788:	8d ad       	ldd	r24, Y+61	; 0x3d
    278a:	9e ad       	ldd	r25, Y+62	; 0x3e
    278c:	9a af       	std	Y+58, r25	; 0x3a
    278e:	89 af       	std	Y+57, r24	; 0x39
    2790:	89 ad       	ldd	r24, Y+57	; 0x39
    2792:	9a ad       	ldd	r25, Y+58	; 0x3a
    2794:	01 97       	sbiw	r24, 0x01	; 1
    2796:	f1 f7       	brne	.-4      	; 0x2794 <LCD_displayCharacter+0x472>
    2798:	9a af       	std	Y+58, r25	; 0x3a
    279a:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    279c:	80 e0       	ldi	r24, 0x00	; 0
    279e:	62 e0       	ldi	r22, 0x02	; 2
    27a0:	40 e0       	ldi	r20, 0x00	; 0
    27a2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    27a6:	80 e0       	ldi	r24, 0x00	; 0
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	a0 e8       	ldi	r26, 0x80	; 128
    27ac:	bf e3       	ldi	r27, 0x3F	; 63
    27ae:	8d ab       	std	Y+53, r24	; 0x35
    27b0:	9e ab       	std	Y+54, r25	; 0x36
    27b2:	af ab       	std	Y+55, r26	; 0x37
    27b4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27b6:	6d a9       	ldd	r22, Y+53	; 0x35
    27b8:	7e a9       	ldd	r23, Y+54	; 0x36
    27ba:	8f a9       	ldd	r24, Y+55	; 0x37
    27bc:	98 ad       	ldd	r25, Y+56	; 0x38
    27be:	20 e0       	ldi	r18, 0x00	; 0
    27c0:	30 e0       	ldi	r19, 0x00	; 0
    27c2:	4a e7       	ldi	r20, 0x7A	; 122
    27c4:	55 e4       	ldi	r21, 0x45	; 69
    27c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ca:	dc 01       	movw	r26, r24
    27cc:	cb 01       	movw	r24, r22
    27ce:	89 ab       	std	Y+49, r24	; 0x31
    27d0:	9a ab       	std	Y+50, r25	; 0x32
    27d2:	ab ab       	std	Y+51, r26	; 0x33
    27d4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    27d6:	69 a9       	ldd	r22, Y+49	; 0x31
    27d8:	7a a9       	ldd	r23, Y+50	; 0x32
    27da:	8b a9       	ldd	r24, Y+51	; 0x33
    27dc:	9c a9       	ldd	r25, Y+52	; 0x34
    27de:	20 e0       	ldi	r18, 0x00	; 0
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	40 e8       	ldi	r20, 0x80	; 128
    27e4:	5f e3       	ldi	r21, 0x3F	; 63
    27e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27ea:	88 23       	and	r24, r24
    27ec:	2c f4       	brge	.+10     	; 0x27f8 <LCD_displayCharacter+0x4d6>
		__ticks = 1;
    27ee:	81 e0       	ldi	r24, 0x01	; 1
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	98 ab       	std	Y+48, r25	; 0x30
    27f4:	8f a7       	std	Y+47, r24	; 0x2f
    27f6:	3f c0       	rjmp	.+126    	; 0x2876 <LCD_displayCharacter+0x554>
	else if (__tmp > 65535)
    27f8:	69 a9       	ldd	r22, Y+49	; 0x31
    27fa:	7a a9       	ldd	r23, Y+50	; 0x32
    27fc:	8b a9       	ldd	r24, Y+51	; 0x33
    27fe:	9c a9       	ldd	r25, Y+52	; 0x34
    2800:	20 e0       	ldi	r18, 0x00	; 0
    2802:	3f ef       	ldi	r19, 0xFF	; 255
    2804:	4f e7       	ldi	r20, 0x7F	; 127
    2806:	57 e4       	ldi	r21, 0x47	; 71
    2808:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    280c:	18 16       	cp	r1, r24
    280e:	4c f5       	brge	.+82     	; 0x2862 <LCD_displayCharacter+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2810:	6d a9       	ldd	r22, Y+53	; 0x35
    2812:	7e a9       	ldd	r23, Y+54	; 0x36
    2814:	8f a9       	ldd	r24, Y+55	; 0x37
    2816:	98 ad       	ldd	r25, Y+56	; 0x38
    2818:	20 e0       	ldi	r18, 0x00	; 0
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	40 e2       	ldi	r20, 0x20	; 32
    281e:	51 e4       	ldi	r21, 0x41	; 65
    2820:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2824:	dc 01       	movw	r26, r24
    2826:	cb 01       	movw	r24, r22
    2828:	bc 01       	movw	r22, r24
    282a:	cd 01       	movw	r24, r26
    282c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2830:	dc 01       	movw	r26, r24
    2832:	cb 01       	movw	r24, r22
    2834:	98 ab       	std	Y+48, r25	; 0x30
    2836:	8f a7       	std	Y+47, r24	; 0x2f
    2838:	0f c0       	rjmp	.+30     	; 0x2858 <LCD_displayCharacter+0x536>
    283a:	80 e9       	ldi	r24, 0x90	; 144
    283c:	91 e0       	ldi	r25, 0x01	; 1
    283e:	9e a7       	std	Y+46, r25	; 0x2e
    2840:	8d a7       	std	Y+45, r24	; 0x2d
    2842:	8d a5       	ldd	r24, Y+45	; 0x2d
    2844:	9e a5       	ldd	r25, Y+46	; 0x2e
    2846:	01 97       	sbiw	r24, 0x01	; 1
    2848:	f1 f7       	brne	.-4      	; 0x2846 <LCD_displayCharacter+0x524>
    284a:	9e a7       	std	Y+46, r25	; 0x2e
    284c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    284e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2850:	98 a9       	ldd	r25, Y+48	; 0x30
    2852:	01 97       	sbiw	r24, 0x01	; 1
    2854:	98 ab       	std	Y+48, r25	; 0x30
    2856:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2858:	8f a5       	ldd	r24, Y+47	; 0x2f
    285a:	98 a9       	ldd	r25, Y+48	; 0x30
    285c:	00 97       	sbiw	r24, 0x00	; 0
    285e:	69 f7       	brne	.-38     	; 0x283a <LCD_displayCharacter+0x518>
    2860:	14 c0       	rjmp	.+40     	; 0x288a <LCD_displayCharacter+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2862:	69 a9       	ldd	r22, Y+49	; 0x31
    2864:	7a a9       	ldd	r23, Y+50	; 0x32
    2866:	8b a9       	ldd	r24, Y+51	; 0x33
    2868:	9c a9       	ldd	r25, Y+52	; 0x34
    286a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    286e:	dc 01       	movw	r26, r24
    2870:	cb 01       	movw	r24, r22
    2872:	98 ab       	std	Y+48, r25	; 0x30
    2874:	8f a7       	std	Y+47, r24	; 0x2f
    2876:	8f a5       	ldd	r24, Y+47	; 0x2f
    2878:	98 a9       	ldd	r25, Y+48	; 0x30
    287a:	9c a7       	std	Y+44, r25	; 0x2c
    287c:	8b a7       	std	Y+43, r24	; 0x2b
    287e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2880:	9c a5       	ldd	r25, Y+44	; 0x2c
    2882:	01 97       	sbiw	r24, 0x01	; 1
    2884:	f1 f7       	brne	.-4      	; 0x2882 <LCD_displayCharacter+0x560>
    2886:	9c a7       	std	Y+44, r25	; 0x2c
    2888:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    288a:	80 e0       	ldi	r24, 0x00	; 0
    288c:	62 e0       	ldi	r22, 0x02	; 2
    288e:	41 e0       	ldi	r20, 0x01	; 1
    2890:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2894:	80 e0       	ldi	r24, 0x00	; 0
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	a0 e8       	ldi	r26, 0x80	; 128
    289a:	bf e3       	ldi	r27, 0x3F	; 63
    289c:	8f a3       	std	Y+39, r24	; 0x27
    289e:	98 a7       	std	Y+40, r25	; 0x28
    28a0:	a9 a7       	std	Y+41, r26	; 0x29
    28a2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28a4:	6f a1       	ldd	r22, Y+39	; 0x27
    28a6:	78 a5       	ldd	r23, Y+40	; 0x28
    28a8:	89 a5       	ldd	r24, Y+41	; 0x29
    28aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    28ac:	20 e0       	ldi	r18, 0x00	; 0
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	4a e7       	ldi	r20, 0x7A	; 122
    28b2:	55 e4       	ldi	r21, 0x45	; 69
    28b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b8:	dc 01       	movw	r26, r24
    28ba:	cb 01       	movw	r24, r22
    28bc:	8b a3       	std	Y+35, r24	; 0x23
    28be:	9c a3       	std	Y+36, r25	; 0x24
    28c0:	ad a3       	std	Y+37, r26	; 0x25
    28c2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    28c4:	6b a1       	ldd	r22, Y+35	; 0x23
    28c6:	7c a1       	ldd	r23, Y+36	; 0x24
    28c8:	8d a1       	ldd	r24, Y+37	; 0x25
    28ca:	9e a1       	ldd	r25, Y+38	; 0x26
    28cc:	20 e0       	ldi	r18, 0x00	; 0
    28ce:	30 e0       	ldi	r19, 0x00	; 0
    28d0:	40 e8       	ldi	r20, 0x80	; 128
    28d2:	5f e3       	ldi	r21, 0x3F	; 63
    28d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28d8:	88 23       	and	r24, r24
    28da:	2c f4       	brge	.+10     	; 0x28e6 <LCD_displayCharacter+0x5c4>
		__ticks = 1;
    28dc:	81 e0       	ldi	r24, 0x01	; 1
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	9a a3       	std	Y+34, r25	; 0x22
    28e2:	89 a3       	std	Y+33, r24	; 0x21
    28e4:	3f c0       	rjmp	.+126    	; 0x2964 <LCD_displayCharacter+0x642>
	else if (__tmp > 65535)
    28e6:	6b a1       	ldd	r22, Y+35	; 0x23
    28e8:	7c a1       	ldd	r23, Y+36	; 0x24
    28ea:	8d a1       	ldd	r24, Y+37	; 0x25
    28ec:	9e a1       	ldd	r25, Y+38	; 0x26
    28ee:	20 e0       	ldi	r18, 0x00	; 0
    28f0:	3f ef       	ldi	r19, 0xFF	; 255
    28f2:	4f e7       	ldi	r20, 0x7F	; 127
    28f4:	57 e4       	ldi	r21, 0x47	; 71
    28f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28fa:	18 16       	cp	r1, r24
    28fc:	4c f5       	brge	.+82     	; 0x2950 <LCD_displayCharacter+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28fe:	6f a1       	ldd	r22, Y+39	; 0x27
    2900:	78 a5       	ldd	r23, Y+40	; 0x28
    2902:	89 a5       	ldd	r24, Y+41	; 0x29
    2904:	9a a5       	ldd	r25, Y+42	; 0x2a
    2906:	20 e0       	ldi	r18, 0x00	; 0
    2908:	30 e0       	ldi	r19, 0x00	; 0
    290a:	40 e2       	ldi	r20, 0x20	; 32
    290c:	51 e4       	ldi	r21, 0x41	; 65
    290e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2912:	dc 01       	movw	r26, r24
    2914:	cb 01       	movw	r24, r22
    2916:	bc 01       	movw	r22, r24
    2918:	cd 01       	movw	r24, r26
    291a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    291e:	dc 01       	movw	r26, r24
    2920:	cb 01       	movw	r24, r22
    2922:	9a a3       	std	Y+34, r25	; 0x22
    2924:	89 a3       	std	Y+33, r24	; 0x21
    2926:	0f c0       	rjmp	.+30     	; 0x2946 <LCD_displayCharacter+0x624>
    2928:	80 e9       	ldi	r24, 0x90	; 144
    292a:	91 e0       	ldi	r25, 0x01	; 1
    292c:	98 a3       	std	Y+32, r25	; 0x20
    292e:	8f 8f       	std	Y+31, r24	; 0x1f
    2930:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2932:	98 a1       	ldd	r25, Y+32	; 0x20
    2934:	01 97       	sbiw	r24, 0x01	; 1
    2936:	f1 f7       	brne	.-4      	; 0x2934 <LCD_displayCharacter+0x612>
    2938:	98 a3       	std	Y+32, r25	; 0x20
    293a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    293c:	89 a1       	ldd	r24, Y+33	; 0x21
    293e:	9a a1       	ldd	r25, Y+34	; 0x22
    2940:	01 97       	sbiw	r24, 0x01	; 1
    2942:	9a a3       	std	Y+34, r25	; 0x22
    2944:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2946:	89 a1       	ldd	r24, Y+33	; 0x21
    2948:	9a a1       	ldd	r25, Y+34	; 0x22
    294a:	00 97       	sbiw	r24, 0x00	; 0
    294c:	69 f7       	brne	.-38     	; 0x2928 <LCD_displayCharacter+0x606>
    294e:	14 c0       	rjmp	.+40     	; 0x2978 <LCD_displayCharacter+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2950:	6b a1       	ldd	r22, Y+35	; 0x23
    2952:	7c a1       	ldd	r23, Y+36	; 0x24
    2954:	8d a1       	ldd	r24, Y+37	; 0x25
    2956:	9e a1       	ldd	r25, Y+38	; 0x26
    2958:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    295c:	dc 01       	movw	r26, r24
    295e:	cb 01       	movw	r24, r22
    2960:	9a a3       	std	Y+34, r25	; 0x22
    2962:	89 a3       	std	Y+33, r24	; 0x21
    2964:	89 a1       	ldd	r24, Y+33	; 0x21
    2966:	9a a1       	ldd	r25, Y+34	; 0x22
    2968:	9e 8f       	std	Y+30, r25	; 0x1e
    296a:	8d 8f       	std	Y+29, r24	; 0x1d
    296c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    296e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2970:	01 97       	sbiw	r24, 0x01	; 1
    2972:	f1 f7       	brne	.-4      	; 0x2970 <LCD_displayCharacter+0x64e>
    2974:	9e 8f       	std	Y+30, r25	; 0x1e
    2976:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    2978:	fe 01       	movw	r30, r28
    297a:	ed 59       	subi	r30, 0x9D	; 157
    297c:	ff 4f       	sbci	r31, 0xFF	; 255
    297e:	80 81       	ld	r24, Z
    2980:	98 2f       	mov	r25, r24
    2982:	91 70       	andi	r25, 0x01	; 1
    2984:	80 e0       	ldi	r24, 0x00	; 0
    2986:	63 e0       	ldi	r22, 0x03	; 3
    2988:	49 2f       	mov	r20, r25
    298a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    298e:	fe 01       	movw	r30, r28
    2990:	ed 59       	subi	r30, 0x9D	; 157
    2992:	ff 4f       	sbci	r31, 0xFF	; 255
    2994:	80 81       	ld	r24, Z
    2996:	86 95       	lsr	r24
    2998:	98 2f       	mov	r25, r24
    299a:	91 70       	andi	r25, 0x01	; 1
    299c:	80 e0       	ldi	r24, 0x00	; 0
    299e:	64 e0       	ldi	r22, 0x04	; 4
    29a0:	49 2f       	mov	r20, r25
    29a2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    29a6:	fe 01       	movw	r30, r28
    29a8:	ed 59       	subi	r30, 0x9D	; 157
    29aa:	ff 4f       	sbci	r31, 0xFF	; 255
    29ac:	80 81       	ld	r24, Z
    29ae:	86 95       	lsr	r24
    29b0:	86 95       	lsr	r24
    29b2:	98 2f       	mov	r25, r24
    29b4:	91 70       	andi	r25, 0x01	; 1
    29b6:	80 e0       	ldi	r24, 0x00	; 0
    29b8:	65 e0       	ldi	r22, 0x05	; 5
    29ba:	49 2f       	mov	r20, r25
    29bc:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    29c0:	fe 01       	movw	r30, r28
    29c2:	ed 59       	subi	r30, 0x9D	; 157
    29c4:	ff 4f       	sbci	r31, 0xFF	; 255
    29c6:	80 81       	ld	r24, Z
    29c8:	86 95       	lsr	r24
    29ca:	86 95       	lsr	r24
    29cc:	86 95       	lsr	r24
    29ce:	98 2f       	mov	r25, r24
    29d0:	91 70       	andi	r25, 0x01	; 1
    29d2:	80 e0       	ldi	r24, 0x00	; 0
    29d4:	66 e0       	ldi	r22, 0x06	; 6
    29d6:	49 2f       	mov	r20, r25
    29d8:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    29dc:	80 e0       	ldi	r24, 0x00	; 0
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	a0 e8       	ldi	r26, 0x80	; 128
    29e2:	bf e3       	ldi	r27, 0x3F	; 63
    29e4:	89 8f       	std	Y+25, r24	; 0x19
    29e6:	9a 8f       	std	Y+26, r25	; 0x1a
    29e8:	ab 8f       	std	Y+27, r26	; 0x1b
    29ea:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ec:	69 8d       	ldd	r22, Y+25	; 0x19
    29ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29f4:	20 e0       	ldi	r18, 0x00	; 0
    29f6:	30 e0       	ldi	r19, 0x00	; 0
    29f8:	4a e7       	ldi	r20, 0x7A	; 122
    29fa:	55 e4       	ldi	r21, 0x45	; 69
    29fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a00:	dc 01       	movw	r26, r24
    2a02:	cb 01       	movw	r24, r22
    2a04:	8d 8b       	std	Y+21, r24	; 0x15
    2a06:	9e 8b       	std	Y+22, r25	; 0x16
    2a08:	af 8b       	std	Y+23, r26	; 0x17
    2a0a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a0c:	6d 89       	ldd	r22, Y+21	; 0x15
    2a0e:	7e 89       	ldd	r23, Y+22	; 0x16
    2a10:	8f 89       	ldd	r24, Y+23	; 0x17
    2a12:	98 8d       	ldd	r25, Y+24	; 0x18
    2a14:	20 e0       	ldi	r18, 0x00	; 0
    2a16:	30 e0       	ldi	r19, 0x00	; 0
    2a18:	40 e8       	ldi	r20, 0x80	; 128
    2a1a:	5f e3       	ldi	r21, 0x3F	; 63
    2a1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a20:	88 23       	and	r24, r24
    2a22:	2c f4       	brge	.+10     	; 0x2a2e <LCD_displayCharacter+0x70c>
		__ticks = 1;
    2a24:	81 e0       	ldi	r24, 0x01	; 1
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	9c 8b       	std	Y+20, r25	; 0x14
    2a2a:	8b 8b       	std	Y+19, r24	; 0x13
    2a2c:	3f c0       	rjmp	.+126    	; 0x2aac <LCD_displayCharacter+0x78a>
	else if (__tmp > 65535)
    2a2e:	6d 89       	ldd	r22, Y+21	; 0x15
    2a30:	7e 89       	ldd	r23, Y+22	; 0x16
    2a32:	8f 89       	ldd	r24, Y+23	; 0x17
    2a34:	98 8d       	ldd	r25, Y+24	; 0x18
    2a36:	20 e0       	ldi	r18, 0x00	; 0
    2a38:	3f ef       	ldi	r19, 0xFF	; 255
    2a3a:	4f e7       	ldi	r20, 0x7F	; 127
    2a3c:	57 e4       	ldi	r21, 0x47	; 71
    2a3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a42:	18 16       	cp	r1, r24
    2a44:	4c f5       	brge	.+82     	; 0x2a98 <LCD_displayCharacter+0x776>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a46:	69 8d       	ldd	r22, Y+25	; 0x19
    2a48:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a4e:	20 e0       	ldi	r18, 0x00	; 0
    2a50:	30 e0       	ldi	r19, 0x00	; 0
    2a52:	40 e2       	ldi	r20, 0x20	; 32
    2a54:	51 e4       	ldi	r21, 0x41	; 65
    2a56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a5a:	dc 01       	movw	r26, r24
    2a5c:	cb 01       	movw	r24, r22
    2a5e:	bc 01       	movw	r22, r24
    2a60:	cd 01       	movw	r24, r26
    2a62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a66:	dc 01       	movw	r26, r24
    2a68:	cb 01       	movw	r24, r22
    2a6a:	9c 8b       	std	Y+20, r25	; 0x14
    2a6c:	8b 8b       	std	Y+19, r24	; 0x13
    2a6e:	0f c0       	rjmp	.+30     	; 0x2a8e <LCD_displayCharacter+0x76c>
    2a70:	80 e9       	ldi	r24, 0x90	; 144
    2a72:	91 e0       	ldi	r25, 0x01	; 1
    2a74:	9a 8b       	std	Y+18, r25	; 0x12
    2a76:	89 8b       	std	Y+17, r24	; 0x11
    2a78:	89 89       	ldd	r24, Y+17	; 0x11
    2a7a:	9a 89       	ldd	r25, Y+18	; 0x12
    2a7c:	01 97       	sbiw	r24, 0x01	; 1
    2a7e:	f1 f7       	brne	.-4      	; 0x2a7c <LCD_displayCharacter+0x75a>
    2a80:	9a 8b       	std	Y+18, r25	; 0x12
    2a82:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a84:	8b 89       	ldd	r24, Y+19	; 0x13
    2a86:	9c 89       	ldd	r25, Y+20	; 0x14
    2a88:	01 97       	sbiw	r24, 0x01	; 1
    2a8a:	9c 8b       	std	Y+20, r25	; 0x14
    2a8c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a8e:	8b 89       	ldd	r24, Y+19	; 0x13
    2a90:	9c 89       	ldd	r25, Y+20	; 0x14
    2a92:	00 97       	sbiw	r24, 0x00	; 0
    2a94:	69 f7       	brne	.-38     	; 0x2a70 <LCD_displayCharacter+0x74e>
    2a96:	14 c0       	rjmp	.+40     	; 0x2ac0 <LCD_displayCharacter+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a98:	6d 89       	ldd	r22, Y+21	; 0x15
    2a9a:	7e 89       	ldd	r23, Y+22	; 0x16
    2a9c:	8f 89       	ldd	r24, Y+23	; 0x17
    2a9e:	98 8d       	ldd	r25, Y+24	; 0x18
    2aa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa4:	dc 01       	movw	r26, r24
    2aa6:	cb 01       	movw	r24, r22
    2aa8:	9c 8b       	std	Y+20, r25	; 0x14
    2aaa:	8b 8b       	std	Y+19, r24	; 0x13
    2aac:	8b 89       	ldd	r24, Y+19	; 0x13
    2aae:	9c 89       	ldd	r25, Y+20	; 0x14
    2ab0:	98 8b       	std	Y+16, r25	; 0x10
    2ab2:	8f 87       	std	Y+15, r24	; 0x0f
    2ab4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ab6:	98 89       	ldd	r25, Y+16	; 0x10
    2ab8:	01 97       	sbiw	r24, 0x01	; 1
    2aba:	f1 f7       	brne	.-4      	; 0x2ab8 <LCD_displayCharacter+0x796>
    2abc:	98 8b       	std	Y+16, r25	; 0x10
    2abe:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2ac0:	80 e0       	ldi	r24, 0x00	; 0
    2ac2:	62 e0       	ldi	r22, 0x02	; 2
    2ac4:	40 e0       	ldi	r20, 0x00	; 0
    2ac6:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2aca:	80 e0       	ldi	r24, 0x00	; 0
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	a0 e8       	ldi	r26, 0x80	; 128
    2ad0:	bf e3       	ldi	r27, 0x3F	; 63
    2ad2:	8b 87       	std	Y+11, r24	; 0x0b
    2ad4:	9c 87       	std	Y+12, r25	; 0x0c
    2ad6:	ad 87       	std	Y+13, r26	; 0x0d
    2ad8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ada:	6b 85       	ldd	r22, Y+11	; 0x0b
    2adc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ade:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ae0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ae2:	20 e0       	ldi	r18, 0x00	; 0
    2ae4:	30 e0       	ldi	r19, 0x00	; 0
    2ae6:	4a e7       	ldi	r20, 0x7A	; 122
    2ae8:	55 e4       	ldi	r21, 0x45	; 69
    2aea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aee:	dc 01       	movw	r26, r24
    2af0:	cb 01       	movw	r24, r22
    2af2:	8f 83       	std	Y+7, r24	; 0x07
    2af4:	98 87       	std	Y+8, r25	; 0x08
    2af6:	a9 87       	std	Y+9, r26	; 0x09
    2af8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2afa:	6f 81       	ldd	r22, Y+7	; 0x07
    2afc:	78 85       	ldd	r23, Y+8	; 0x08
    2afe:	89 85       	ldd	r24, Y+9	; 0x09
    2b00:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b02:	20 e0       	ldi	r18, 0x00	; 0
    2b04:	30 e0       	ldi	r19, 0x00	; 0
    2b06:	40 e8       	ldi	r20, 0x80	; 128
    2b08:	5f e3       	ldi	r21, 0x3F	; 63
    2b0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b0e:	88 23       	and	r24, r24
    2b10:	2c f4       	brge	.+10     	; 0x2b1c <LCD_displayCharacter+0x7fa>
		__ticks = 1;
    2b12:	81 e0       	ldi	r24, 0x01	; 1
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	9e 83       	std	Y+6, r25	; 0x06
    2b18:	8d 83       	std	Y+5, r24	; 0x05
    2b1a:	3f c0       	rjmp	.+126    	; 0x2b9a <LCD_displayCharacter+0x878>
	else if (__tmp > 65535)
    2b1c:	6f 81       	ldd	r22, Y+7	; 0x07
    2b1e:	78 85       	ldd	r23, Y+8	; 0x08
    2b20:	89 85       	ldd	r24, Y+9	; 0x09
    2b22:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b24:	20 e0       	ldi	r18, 0x00	; 0
    2b26:	3f ef       	ldi	r19, 0xFF	; 255
    2b28:	4f e7       	ldi	r20, 0x7F	; 127
    2b2a:	57 e4       	ldi	r21, 0x47	; 71
    2b2c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b30:	18 16       	cp	r1, r24
    2b32:	4c f5       	brge	.+82     	; 0x2b86 <LCD_displayCharacter+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b34:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b36:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b38:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b3c:	20 e0       	ldi	r18, 0x00	; 0
    2b3e:	30 e0       	ldi	r19, 0x00	; 0
    2b40:	40 e2       	ldi	r20, 0x20	; 32
    2b42:	51 e4       	ldi	r21, 0x41	; 65
    2b44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b48:	dc 01       	movw	r26, r24
    2b4a:	cb 01       	movw	r24, r22
    2b4c:	bc 01       	movw	r22, r24
    2b4e:	cd 01       	movw	r24, r26
    2b50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b54:	dc 01       	movw	r26, r24
    2b56:	cb 01       	movw	r24, r22
    2b58:	9e 83       	std	Y+6, r25	; 0x06
    2b5a:	8d 83       	std	Y+5, r24	; 0x05
    2b5c:	0f c0       	rjmp	.+30     	; 0x2b7c <LCD_displayCharacter+0x85a>
    2b5e:	80 e9       	ldi	r24, 0x90	; 144
    2b60:	91 e0       	ldi	r25, 0x01	; 1
    2b62:	9c 83       	std	Y+4, r25	; 0x04
    2b64:	8b 83       	std	Y+3, r24	; 0x03
    2b66:	8b 81       	ldd	r24, Y+3	; 0x03
    2b68:	9c 81       	ldd	r25, Y+4	; 0x04
    2b6a:	01 97       	sbiw	r24, 0x01	; 1
    2b6c:	f1 f7       	brne	.-4      	; 0x2b6a <LCD_displayCharacter+0x848>
    2b6e:	9c 83       	std	Y+4, r25	; 0x04
    2b70:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b72:	8d 81       	ldd	r24, Y+5	; 0x05
    2b74:	9e 81       	ldd	r25, Y+6	; 0x06
    2b76:	01 97       	sbiw	r24, 0x01	; 1
    2b78:	9e 83       	std	Y+6, r25	; 0x06
    2b7a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b7c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b7e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b80:	00 97       	sbiw	r24, 0x00	; 0
    2b82:	69 f7       	brne	.-38     	; 0x2b5e <LCD_displayCharacter+0x83c>
    2b84:	14 c0       	rjmp	.+40     	; 0x2bae <LCD_displayCharacter+0x88c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b86:	6f 81       	ldd	r22, Y+7	; 0x07
    2b88:	78 85       	ldd	r23, Y+8	; 0x08
    2b8a:	89 85       	ldd	r24, Y+9	; 0x09
    2b8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b92:	dc 01       	movw	r26, r24
    2b94:	cb 01       	movw	r24, r22
    2b96:	9e 83       	std	Y+6, r25	; 0x06
    2b98:	8d 83       	std	Y+5, r24	; 0x05
    2b9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b9c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b9e:	9a 83       	std	Y+2, r25	; 0x02
    2ba0:	89 83       	std	Y+1, r24	; 0x01
    2ba2:	89 81       	ldd	r24, Y+1	; 0x01
    2ba4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ba6:	01 97       	sbiw	r24, 0x01	; 1
    2ba8:	f1 f7       	brne	.-4      	; 0x2ba6 <LCD_displayCharacter+0x884>
    2baa:	9a 83       	std	Y+2, r25	; 0x02
    2bac:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2bae:	cd 59       	subi	r28, 0x9D	; 157
    2bb0:	df 4f       	sbci	r29, 0xFF	; 255
    2bb2:	0f b6       	in	r0, 0x3f	; 63
    2bb4:	f8 94       	cli
    2bb6:	de bf       	out	0x3e, r29	; 62
    2bb8:	0f be       	out	0x3f, r0	; 63
    2bba:	cd bf       	out	0x3d, r28	; 61
    2bbc:	cf 91       	pop	r28
    2bbe:	df 91       	pop	r29
    2bc0:	1f 91       	pop	r17
    2bc2:	0f 91       	pop	r16
    2bc4:	08 95       	ret

00002bc6 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2bc6:	df 93       	push	r29
    2bc8:	cf 93       	push	r28
    2bca:	00 d0       	rcall	.+0      	; 0x2bcc <LCD_displayString+0x6>
    2bcc:	0f 92       	push	r0
    2bce:	cd b7       	in	r28, 0x3d	; 61
    2bd0:	de b7       	in	r29, 0x3e	; 62
    2bd2:	9b 83       	std	Y+3, r25	; 0x03
    2bd4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2bd6:	19 82       	std	Y+1, r1	; 0x01
    2bd8:	0e c0       	rjmp	.+28     	; 0x2bf6 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2bda:	89 81       	ldd	r24, Y+1	; 0x01
    2bdc:	28 2f       	mov	r18, r24
    2bde:	30 e0       	ldi	r19, 0x00	; 0
    2be0:	8a 81       	ldd	r24, Y+2	; 0x02
    2be2:	9b 81       	ldd	r25, Y+3	; 0x03
    2be4:	fc 01       	movw	r30, r24
    2be6:	e2 0f       	add	r30, r18
    2be8:	f3 1f       	adc	r31, r19
    2bea:	80 81       	ld	r24, Z
    2bec:	0e 94 91 11 	call	0x2322	; 0x2322 <LCD_displayCharacter>
		i++;
    2bf0:	89 81       	ldd	r24, Y+1	; 0x01
    2bf2:	8f 5f       	subi	r24, 0xFF	; 255
    2bf4:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2bf6:	89 81       	ldd	r24, Y+1	; 0x01
    2bf8:	28 2f       	mov	r18, r24
    2bfa:	30 e0       	ldi	r19, 0x00	; 0
    2bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bfe:	9b 81       	ldd	r25, Y+3	; 0x03
    2c00:	fc 01       	movw	r30, r24
    2c02:	e2 0f       	add	r30, r18
    2c04:	f3 1f       	adc	r31, r19
    2c06:	80 81       	ld	r24, Z
    2c08:	88 23       	and	r24, r24
    2c0a:	39 f7       	brne	.-50     	; 0x2bda <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2c0c:	0f 90       	pop	r0
    2c0e:	0f 90       	pop	r0
    2c10:	0f 90       	pop	r0
    2c12:	cf 91       	pop	r28
    2c14:	df 91       	pop	r29
    2c16:	08 95       	ret

00002c18 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2c18:	df 93       	push	r29
    2c1a:	cf 93       	push	r28
    2c1c:	00 d0       	rcall	.+0      	; 0x2c1e <LCD_moveCursor+0x6>
    2c1e:	00 d0       	rcall	.+0      	; 0x2c20 <LCD_moveCursor+0x8>
    2c20:	0f 92       	push	r0
    2c22:	cd b7       	in	r28, 0x3d	; 61
    2c24:	de b7       	in	r29, 0x3e	; 62
    2c26:	8a 83       	std	Y+2, r24	; 0x02
    2c28:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c2c:	28 2f       	mov	r18, r24
    2c2e:	30 e0       	ldi	r19, 0x00	; 0
    2c30:	3d 83       	std	Y+5, r19	; 0x05
    2c32:	2c 83       	std	Y+4, r18	; 0x04
    2c34:	8c 81       	ldd	r24, Y+4	; 0x04
    2c36:	9d 81       	ldd	r25, Y+5	; 0x05
    2c38:	81 30       	cpi	r24, 0x01	; 1
    2c3a:	91 05       	cpc	r25, r1
    2c3c:	c1 f0       	breq	.+48     	; 0x2c6e <LCD_moveCursor+0x56>
    2c3e:	2c 81       	ldd	r18, Y+4	; 0x04
    2c40:	3d 81       	ldd	r19, Y+5	; 0x05
    2c42:	22 30       	cpi	r18, 0x02	; 2
    2c44:	31 05       	cpc	r19, r1
    2c46:	2c f4       	brge	.+10     	; 0x2c52 <LCD_moveCursor+0x3a>
    2c48:	8c 81       	ldd	r24, Y+4	; 0x04
    2c4a:	9d 81       	ldd	r25, Y+5	; 0x05
    2c4c:	00 97       	sbiw	r24, 0x00	; 0
    2c4e:	61 f0       	breq	.+24     	; 0x2c68 <LCD_moveCursor+0x50>
    2c50:	19 c0       	rjmp	.+50     	; 0x2c84 <LCD_moveCursor+0x6c>
    2c52:	2c 81       	ldd	r18, Y+4	; 0x04
    2c54:	3d 81       	ldd	r19, Y+5	; 0x05
    2c56:	22 30       	cpi	r18, 0x02	; 2
    2c58:	31 05       	cpc	r19, r1
    2c5a:	69 f0       	breq	.+26     	; 0x2c76 <LCD_moveCursor+0x5e>
    2c5c:	8c 81       	ldd	r24, Y+4	; 0x04
    2c5e:	9d 81       	ldd	r25, Y+5	; 0x05
    2c60:	83 30       	cpi	r24, 0x03	; 3
    2c62:	91 05       	cpc	r25, r1
    2c64:	61 f0       	breq	.+24     	; 0x2c7e <LCD_moveCursor+0x66>
    2c66:	0e c0       	rjmp	.+28     	; 0x2c84 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2c68:	8b 81       	ldd	r24, Y+3	; 0x03
    2c6a:	89 83       	std	Y+1, r24	; 0x01
    2c6c:	0b c0       	rjmp	.+22     	; 0x2c84 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c70:	80 5c       	subi	r24, 0xC0	; 192
    2c72:	89 83       	std	Y+1, r24	; 0x01
    2c74:	07 c0       	rjmp	.+14     	; 0x2c84 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2c76:	8b 81       	ldd	r24, Y+3	; 0x03
    2c78:	80 5f       	subi	r24, 0xF0	; 240
    2c7a:	89 83       	std	Y+1, r24	; 0x01
    2c7c:	03 c0       	rjmp	.+6      	; 0x2c84 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2c7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c80:	80 5b       	subi	r24, 0xB0	; 176
    2c82:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2c84:	89 81       	ldd	r24, Y+1	; 0x01
    2c86:	80 68       	ori	r24, 0x80	; 128
    2c88:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <LCD_sendCommand>
}
    2c8c:	0f 90       	pop	r0
    2c8e:	0f 90       	pop	r0
    2c90:	0f 90       	pop	r0
    2c92:	0f 90       	pop	r0
    2c94:	0f 90       	pop	r0
    2c96:	cf 91       	pop	r28
    2c98:	df 91       	pop	r29
    2c9a:	08 95       	ret

00002c9c <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2c9c:	df 93       	push	r29
    2c9e:	cf 93       	push	r28
    2ca0:	00 d0       	rcall	.+0      	; 0x2ca2 <LCD_displayStringRowColumn+0x6>
    2ca2:	00 d0       	rcall	.+0      	; 0x2ca4 <LCD_displayStringRowColumn+0x8>
    2ca4:	cd b7       	in	r28, 0x3d	; 61
    2ca6:	de b7       	in	r29, 0x3e	; 62
    2ca8:	89 83       	std	Y+1, r24	; 0x01
    2caa:	6a 83       	std	Y+2, r22	; 0x02
    2cac:	5c 83       	std	Y+4, r21	; 0x04
    2cae:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2cb0:	89 81       	ldd	r24, Y+1	; 0x01
    2cb2:	6a 81       	ldd	r22, Y+2	; 0x02
    2cb4:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cba:	9c 81       	ldd	r25, Y+4	; 0x04
    2cbc:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <LCD_displayString>
}
    2cc0:	0f 90       	pop	r0
    2cc2:	0f 90       	pop	r0
    2cc4:	0f 90       	pop	r0
    2cc6:	0f 90       	pop	r0
    2cc8:	cf 91       	pop	r28
    2cca:	df 91       	pop	r29
    2ccc:	08 95       	ret

00002cce <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(uint16 data)
{
    2cce:	df 93       	push	r29
    2cd0:	cf 93       	push	r28
    2cd2:	cd b7       	in	r28, 0x3d	; 61
    2cd4:	de b7       	in	r29, 0x3e	; 62
    2cd6:	62 97       	sbiw	r28, 0x12	; 18
    2cd8:	0f b6       	in	r0, 0x3f	; 63
    2cda:	f8 94       	cli
    2cdc:	de bf       	out	0x3e, r29	; 62
    2cde:	0f be       	out	0x3f, r0	; 63
    2ce0:	cd bf       	out	0x3d, r28	; 61
    2ce2:	9a 8b       	std	Y+18, r25	; 0x12
    2ce4:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2ce6:	89 89       	ldd	r24, Y+17	; 0x11
    2ce8:	9a 89       	ldd	r25, Y+18	; 0x12
    2cea:	9e 01       	movw	r18, r28
    2cec:	2f 5f       	subi	r18, 0xFF	; 255
    2cee:	3f 4f       	sbci	r19, 0xFF	; 255
    2cf0:	b9 01       	movw	r22, r18
    2cf2:	4a e0       	ldi	r20, 0x0A	; 10
    2cf4:	50 e0       	ldi	r21, 0x00	; 0
    2cf6:	0e 94 c3 19 	call	0x3386	; 0x3386 <itoa>
   LCD_displayString(buff); /* Display the string */
    2cfa:	ce 01       	movw	r24, r28
    2cfc:	01 96       	adiw	r24, 0x01	; 1
    2cfe:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <LCD_displayString>
}
    2d02:	62 96       	adiw	r28, 0x12	; 18
    2d04:	0f b6       	in	r0, 0x3f	; 63
    2d06:	f8 94       	cli
    2d08:	de bf       	out	0x3e, r29	; 62
    2d0a:	0f be       	out	0x3f, r0	; 63
    2d0c:	cd bf       	out	0x3d, r28	; 61
    2d0e:	cf 91       	pop	r28
    2d10:	df 91       	pop	r29
    2d12:	08 95       	ret

00002d14 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2d14:	df 93       	push	r29
    2d16:	cf 93       	push	r28
    2d18:	cd b7       	in	r28, 0x3d	; 61
    2d1a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2d1c:	81 e0       	ldi	r24, 0x01	; 1
    2d1e:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <LCD_sendCommand>
}
    2d22:	cf 91       	pop	r28
    2d24:	df 91       	pop	r29
    2d26:	08 95       	ret

00002d28 <RED_LED_init>:
/*
 * Description :
 * A function to initialize the RED_LED
 */
void RED_LED_init(void)
{
    2d28:	df 93       	push	r29
    2d2a:	cf 93       	push	r28
    2d2c:	cd b7       	in	r28, 0x3d	; 61
    2d2e:	de b7       	in	r29, 0x3e	; 62
	/*Make the REDLED pin output pin*/
	GPIO_setupPinDirection(RED_LED_PORT,RED_LED_PIN,PIN_OUTPUT);
    2d30:	82 e0       	ldi	r24, 0x02	; 2
    2d32:	60 e0       	ldi	r22, 0x00	; 0
    2d34:	41 e0       	ldi	r20, 0x01	; 1
    2d36:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

	/*Turn off the RED_LED*/
	GPIO_writePin(RED_LED_PORT,RED_LED_PIN,PIN_INPUT);
    2d3a:	82 e0       	ldi	r24, 0x02	; 2
    2d3c:	60 e0       	ldi	r22, 0x00	; 0
    2d3e:	40 e0       	ldi	r20, 0x00	; 0
    2d40:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
}
    2d44:	cf 91       	pop	r28
    2d46:	df 91       	pop	r29
    2d48:	08 95       	ret

00002d4a <RED_LED_on>:
/*
 * Description :
 * A function to turn on the RED_LED
 */
void RED_LED_on(void)
{
    2d4a:	df 93       	push	r29
    2d4c:	cf 93       	push	r28
    2d4e:	cd b7       	in	r28, 0x3d	; 61
    2d50:	de b7       	in	r29, 0x3e	; 62
	/*Turn on the RED_LED*/
	GPIO_writePin(RED_LED_PORT,RED_LED_PIN,PIN_OUTPUT);
    2d52:	82 e0       	ldi	r24, 0x02	; 2
    2d54:	60 e0       	ldi	r22, 0x00	; 0
    2d56:	41 e0       	ldi	r20, 0x01	; 1
    2d58:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
}
    2d5c:	cf 91       	pop	r28
    2d5e:	df 91       	pop	r29
    2d60:	08 95       	ret

00002d62 <RED_LED_off>:
/*
 * Description :
 * A function to turn off theRED_LED
 */
void RED_LED_off(void)
{
    2d62:	df 93       	push	r29
    2d64:	cf 93       	push	r28
    2d66:	cd b7       	in	r28, 0x3d	; 61
    2d68:	de b7       	in	r29, 0x3e	; 62
	/*Turn off the RED_LED*/
	GPIO_writePin(RED_LED_PORT,RED_LED_PIN,PIN_INPUT);
    2d6a:	82 e0       	ldi	r24, 0x02	; 2
    2d6c:	60 e0       	ldi	r22, 0x00	; 0
    2d6e:	40 e0       	ldi	r20, 0x00	; 0
    2d70:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
}
    2d74:	cf 91       	pop	r28
    2d76:	df 91       	pop	r29
    2d78:	08 95       	ret

00002d7a <configurations>:
/**********************************Functions************************************/


/* Function to set the configurations of modules*/
void configurations(void)
{
    2d7a:	df 93       	push	r29
    2d7c:	cf 93       	push	r28
    2d7e:	cd b7       	in	r28, 0x3d	; 61
    2d80:	de b7       	in	r29, 0x3e	; 62
    2d82:	6b 97       	sbiw	r28, 0x1b	; 27
    2d84:	0f b6       	in	r0, 0x3f	; 63
    2d86:	f8 94       	cli
    2d88:	de bf       	out	0x3e, r29	; 62
    2d8a:	0f be       	out	0x3f, r0	; 63
    2d8c:	cd bf       	out	0x3d, r28	; 61
	/* initialize the HAL layer modules */

	Buzzer_init(); /* Buzzer */
    2d8e:	0e 94 3b 0c 	call	0x1876	; 0x1876 <Buzzer_init>
	GRN_LED_init();/* green led */
    2d92:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <GRN_LED_init>
	RED_LED_init();/* red led */
    2d96:	0e 94 94 16 	call	0x2d28	; 0x2d28 <RED_LED_init>
	LCD_init();	   /* LCD */
    2d9a:	0e 94 8d 0c 	call	0x191a	; 0x191a <LCD_init>

	/* The static display on LCD */
	LCD_displayString("SPEED :     cm/sec");
    2d9e:	80 e6       	ldi	r24, 0x60	; 96
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <LCD_displayString>

	/* Initialize the MCAL layer modules */

	/* Timer 1 : normal mode and prescaler 1024*/
	Timer1_ConfigType conf={0,0,N_1024,NORMAL};
    2da6:	ce 01       	movw	r24, r28
    2da8:	01 96       	adiw	r24, 0x01	; 1
    2daa:	9b 8b       	std	Y+19, r25	; 0x13
    2dac:	8a 8b       	std	Y+18, r24	; 0x12
    2dae:	ec e9       	ldi	r30, 0x9C	; 156
    2db0:	f0 e0       	ldi	r31, 0x00	; 0
    2db2:	fd 8b       	std	Y+21, r31	; 0x15
    2db4:	ec 8b       	std	Y+20, r30	; 0x14
    2db6:	f6 e0       	ldi	r31, 0x06	; 6
    2db8:	fe 8b       	std	Y+22, r31	; 0x16
    2dba:	ec 89       	ldd	r30, Y+20	; 0x14
    2dbc:	fd 89       	ldd	r31, Y+21	; 0x15
    2dbe:	00 80       	ld	r0, Z
    2dc0:	8c 89       	ldd	r24, Y+20	; 0x14
    2dc2:	9d 89       	ldd	r25, Y+21	; 0x15
    2dc4:	01 96       	adiw	r24, 0x01	; 1
    2dc6:	9d 8b       	std	Y+21, r25	; 0x15
    2dc8:	8c 8b       	std	Y+20, r24	; 0x14
    2dca:	ea 89       	ldd	r30, Y+18	; 0x12
    2dcc:	fb 89       	ldd	r31, Y+19	; 0x13
    2dce:	00 82       	st	Z, r0
    2dd0:	8a 89       	ldd	r24, Y+18	; 0x12
    2dd2:	9b 89       	ldd	r25, Y+19	; 0x13
    2dd4:	01 96       	adiw	r24, 0x01	; 1
    2dd6:	9b 8b       	std	Y+19, r25	; 0x13
    2dd8:	8a 8b       	std	Y+18, r24	; 0x12
    2dda:	9e 89       	ldd	r25, Y+22	; 0x16
    2ddc:	91 50       	subi	r25, 0x01	; 1
    2dde:	9e 8b       	std	Y+22, r25	; 0x16
    2de0:	ee 89       	ldd	r30, Y+22	; 0x16
    2de2:	ee 23       	and	r30, r30
    2de4:	51 f7       	brne	.-44     	; 0x2dba <configurations+0x40>
	TIMER1_init(&conf);
    2de6:	ce 01       	movw	r24, r28
    2de8:	01 96       	adiw	r24, 0x01	; 1
    2dea:	0e 94 c7 0a 	call	0x158e	; 0x158e <TIMER1_init>

	/* interrupt : INT1 & INT0 configurations and both works on falling edge */
	INT_CONF conf1={INT0_ID,FALLING_EDGE};
    2dee:	80 e4       	ldi	r24, 0x40	; 64
    2df0:	8f 83       	std	Y+7, r24	; 0x07
    2df2:	82 e0       	ldi	r24, 0x02	; 2
    2df4:	88 87       	std	Y+8, r24	; 0x08
	INT_CONF conf2={INT1_ID,FALLING_EDGE};
    2df6:	80 e8       	ldi	r24, 0x80	; 128
    2df8:	89 87       	std	Y+9, r24	; 0x09
    2dfa:	82 e0       	ldi	r24, 0x02	; 2
    2dfc:	8a 87       	std	Y+10, r24	; 0x0a
	INT_init(&conf1);
    2dfe:	ce 01       	movw	r24, r28
    2e00:	07 96       	adiw	r24, 0x07	; 7
    2e02:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <INT_init>
	INT_init(&conf2);
    2e06:	ce 01       	movw	r24, r28
    2e08:	09 96       	adiw	r24, 0x09	; 9
    2e0a:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <INT_init>

	/*set the interrupts ISR functions using call back technique*/
	set_ISR_functions();
    2e0e:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <set_ISR_functions>

	/* UART : works with 1 stop bit - no parity check - eight bits data length - 9600 baud rate*/
	config conf_uart={ONE,DISABLE,EIGHT_BITS,9600};
    2e12:	ce 01       	movw	r24, r28
    2e14:	0b 96       	adiw	r24, 0x0b	; 11
    2e16:	98 8f       	std	Y+24, r25	; 0x18
    2e18:	8f 8b       	std	Y+23, r24	; 0x17
    2e1a:	e5 e9       	ldi	r30, 0x95	; 149
    2e1c:	f0 e0       	ldi	r31, 0x00	; 0
    2e1e:	fa 8f       	std	Y+26, r31	; 0x1a
    2e20:	e9 8f       	std	Y+25, r30	; 0x19
    2e22:	f7 e0       	ldi	r31, 0x07	; 7
    2e24:	fb 8f       	std	Y+27, r31	; 0x1b
    2e26:	e9 8d       	ldd	r30, Y+25	; 0x19
    2e28:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2e2a:	00 80       	ld	r0, Z
    2e2c:	89 8d       	ldd	r24, Y+25	; 0x19
    2e2e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2e30:	01 96       	adiw	r24, 0x01	; 1
    2e32:	9a 8f       	std	Y+26, r25	; 0x1a
    2e34:	89 8f       	std	Y+25, r24	; 0x19
    2e36:	ef 89       	ldd	r30, Y+23	; 0x17
    2e38:	f8 8d       	ldd	r31, Y+24	; 0x18
    2e3a:	00 82       	st	Z, r0
    2e3c:	8f 89       	ldd	r24, Y+23	; 0x17
    2e3e:	98 8d       	ldd	r25, Y+24	; 0x18
    2e40:	01 96       	adiw	r24, 0x01	; 1
    2e42:	98 8f       	std	Y+24, r25	; 0x18
    2e44:	8f 8b       	std	Y+23, r24	; 0x17
    2e46:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2e48:	91 50       	subi	r25, 0x01	; 1
    2e4a:	9b 8f       	std	Y+27, r25	; 0x1b
    2e4c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2e4e:	ee 23       	and	r30, r30
    2e50:	51 f7       	brne	.-44     	; 0x2e26 <configurations+0xac>
	UART_init(&conf_uart);
    2e52:	ce 01       	movw	r24, r28
    2e54:	0b 96       	adiw	r24, 0x0b	; 11
    2e56:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <UART_init>
}
    2e5a:	6b 96       	adiw	r28, 0x1b	; 27
    2e5c:	0f b6       	in	r0, 0x3f	; 63
    2e5e:	f8 94       	cli
    2e60:	de bf       	out	0x3e, r29	; 62
    2e62:	0f be       	out	0x3f, r0	; 63
    2e64:	cd bf       	out	0x3d, r28	; 61
    2e66:	cf 91       	pop	r28
    2e68:	df 91       	pop	r29
    2e6a:	08 95       	ret

00002e6c <set_ISR_functions>:

/* A function to set the call back ISR functions*/
void set_ISR_functions()
{
    2e6c:	df 93       	push	r29
    2e6e:	cf 93       	push	r28
    2e70:	cd b7       	in	r28, 0x3d	; 61
    2e72:	de b7       	in	r29, 0x3e	; 62
	/* interrupt zero to detect first motion */
	INT_setISR(TCRT1, 0);
    2e74:	84 eb       	ldi	r24, 0xB4	; 180
    2e76:	97 e1       	ldi	r25, 0x17	; 23
    2e78:	60 e0       	ldi	r22, 0x00	; 0
    2e7a:	0e 94 aa 09 	call	0x1354	; 0x1354 <INT_setISR>

	/* interrupt one to detect last motion */
	INT_setISR(TCRT2, 1);
    2e7e:	8b ee       	ldi	r24, 0xEB	; 235
    2e80:	97 e1       	ldi	r25, 0x17	; 23
    2e82:	61 e0       	ldi	r22, 0x01	; 1
    2e84:	0e 94 aa 09 	call	0x1354	; 0x1354 <INT_setISR>
}
    2e88:	cf 91       	pop	r28
    2e8a:	df 91       	pop	r29
    2e8c:	08 95       	ret

00002e8e <tostring>:

/* A Function to convert a given integer to a string
 * copied from : https://www.sanfoundry.com/
 */
void tostring(char str[], int num)
{
    2e8e:	df 93       	push	r29
    2e90:	cf 93       	push	r28
    2e92:	cd b7       	in	r28, 0x3d	; 61
    2e94:	de b7       	in	r29, 0x3e	; 62
    2e96:	2c 97       	sbiw	r28, 0x0c	; 12
    2e98:	0f b6       	in	r0, 0x3f	; 63
    2e9a:	f8 94       	cli
    2e9c:	de bf       	out	0x3e, r29	; 62
    2e9e:	0f be       	out	0x3f, r0	; 63
    2ea0:	cd bf       	out	0x3d, r28	; 61
    2ea2:	9a 87       	std	Y+10, r25	; 0x0a
    2ea4:	89 87       	std	Y+9, r24	; 0x09
    2ea6:	7c 87       	std	Y+12, r23	; 0x0c
    2ea8:	6b 87       	std	Y+11, r22	; 0x0b
    int i, rem, len = 0, n;
    2eaa:	1c 82       	std	Y+4, r1	; 0x04
    2eac:	1b 82       	std	Y+3, r1	; 0x03

    n = num;
    2eae:	8b 85       	ldd	r24, Y+11	; 0x0b
    2eb0:	9c 85       	ldd	r25, Y+12	; 0x0c
    2eb2:	9a 83       	std	Y+2, r25	; 0x02
    2eb4:	89 83       	std	Y+1, r24	; 0x01
    2eb6:	0f c0       	rjmp	.+30     	; 0x2ed6 <tostring+0x48>
    while (n != 0)
    {
        len++;
    2eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eba:	9c 81       	ldd	r25, Y+4	; 0x04
    2ebc:	01 96       	adiw	r24, 0x01	; 1
    2ebe:	9c 83       	std	Y+4, r25	; 0x04
    2ec0:	8b 83       	std	Y+3, r24	; 0x03
        n /= 10;
    2ec2:	89 81       	ldd	r24, Y+1	; 0x01
    2ec4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ec6:	2a e0       	ldi	r18, 0x0A	; 10
    2ec8:	30 e0       	ldi	r19, 0x00	; 0
    2eca:	b9 01       	movw	r22, r18
    2ecc:	0e 94 43 19 	call	0x3286	; 0x3286 <__divmodhi4>
    2ed0:	cb 01       	movw	r24, r22
    2ed2:	9a 83       	std	Y+2, r25	; 0x02
    2ed4:	89 83       	std	Y+1, r24	; 0x01
void tostring(char str[], int num)
{
    int i, rem, len = 0, n;

    n = num;
    while (n != 0)
    2ed6:	89 81       	ldd	r24, Y+1	; 0x01
    2ed8:	9a 81       	ldd	r25, Y+2	; 0x02
    2eda:	00 97       	sbiw	r24, 0x00	; 0
    2edc:	69 f7       	brne	.-38     	; 0x2eb8 <tostring+0x2a>
    {
        len++;
        n /= 10;
    }
    for (i = 0; i < len; i++)
    2ede:	18 86       	std	Y+8, r1	; 0x08
    2ee0:	1f 82       	std	Y+7, r1	; 0x07
    2ee2:	2a c0       	rjmp	.+84     	; 0x2f38 <tostring+0xaa>
    {
        rem = num % 10;
    2ee4:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ee6:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ee8:	2a e0       	ldi	r18, 0x0A	; 10
    2eea:	30 e0       	ldi	r19, 0x00	; 0
    2eec:	b9 01       	movw	r22, r18
    2eee:	0e 94 43 19 	call	0x3286	; 0x3286 <__divmodhi4>
    2ef2:	9e 83       	std	Y+6, r25	; 0x06
    2ef4:	8d 83       	std	Y+5, r24	; 0x05
        num = num / 10;
    2ef6:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ef8:	9c 85       	ldd	r25, Y+12	; 0x0c
    2efa:	2a e0       	ldi	r18, 0x0A	; 10
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	b9 01       	movw	r22, r18
    2f00:	0e 94 43 19 	call	0x3286	; 0x3286 <__divmodhi4>
    2f04:	cb 01       	movw	r24, r22
    2f06:	9c 87       	std	Y+12, r25	; 0x0c
    2f08:	8b 87       	std	Y+11, r24	; 0x0b
        str[len - (i + 1)] = rem + '0';
    2f0a:	8f 81       	ldd	r24, Y+7	; 0x07
    2f0c:	98 85       	ldd	r25, Y+8	; 0x08
    2f0e:	9c 01       	movw	r18, r24
    2f10:	20 95       	com	r18
    2f12:	30 95       	com	r19
    2f14:	8b 81       	ldd	r24, Y+3	; 0x03
    2f16:	9c 81       	ldd	r25, Y+4	; 0x04
    2f18:	82 0f       	add	r24, r18
    2f1a:	93 1f       	adc	r25, r19
    2f1c:	9c 01       	movw	r18, r24
    2f1e:	89 85       	ldd	r24, Y+9	; 0x09
    2f20:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f22:	fc 01       	movw	r30, r24
    2f24:	e2 0f       	add	r30, r18
    2f26:	f3 1f       	adc	r31, r19
    2f28:	8d 81       	ldd	r24, Y+5	; 0x05
    2f2a:	80 5d       	subi	r24, 0xD0	; 208
    2f2c:	80 83       	st	Z, r24
    while (n != 0)
    {
        len++;
        n /= 10;
    }
    for (i = 0; i < len; i++)
    2f2e:	8f 81       	ldd	r24, Y+7	; 0x07
    2f30:	98 85       	ldd	r25, Y+8	; 0x08
    2f32:	01 96       	adiw	r24, 0x01	; 1
    2f34:	98 87       	std	Y+8, r25	; 0x08
    2f36:	8f 83       	std	Y+7, r24	; 0x07
    2f38:	2f 81       	ldd	r18, Y+7	; 0x07
    2f3a:	38 85       	ldd	r19, Y+8	; 0x08
    2f3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f40:	28 17       	cp	r18, r24
    2f42:	39 07       	cpc	r19, r25
    2f44:	7c f2       	brlt	.-98     	; 0x2ee4 <tostring+0x56>
    {
        rem = num % 10;
        num = num / 10;
        str[len - (i + 1)] = rem + '0';
    }
    str[len] = '\0';
    2f46:	8b 81       	ldd	r24, Y+3	; 0x03
    2f48:	9c 81       	ldd	r25, Y+4	; 0x04
    2f4a:	29 85       	ldd	r18, Y+9	; 0x09
    2f4c:	3a 85       	ldd	r19, Y+10	; 0x0a
    2f4e:	f9 01       	movw	r30, r18
    2f50:	e8 0f       	add	r30, r24
    2f52:	f9 1f       	adc	r31, r25
    2f54:	10 82       	st	Z, r1
}
    2f56:	2c 96       	adiw	r28, 0x0c	; 12
    2f58:	0f b6       	in	r0, 0x3f	; 63
    2f5a:	f8 94       	cli
    2f5c:	de bf       	out	0x3e, r29	; 62
    2f5e:	0f be       	out	0x3f, r0	; 63
    2f60:	cd bf       	out	0x3d, r28	; 61
    2f62:	cf 91       	pop	r28
    2f64:	df 91       	pop	r29
    2f66:	08 95       	ret

00002f68 <TCRT1>:

/* A function to detect the first motion at first sensor and start the timer*/
void TCRT1()
{
    2f68:	df 93       	push	r29
    2f6a:	cf 93       	push	r28
    2f6c:	cd b7       	in	r28, 0x3d	; 61
    2f6e:	de b7       	in	r29, 0x3e	; 62
    2f70:	2b 97       	sbiw	r28, 0x0b	; 11
    2f72:	0f b6       	in	r0, 0x3f	; 63
    2f74:	f8 94       	cli
    2f76:	de bf       	out	0x3e, r29	; 62
    2f78:	0f be       	out	0x3f, r0	; 63
    2f7a:	cd bf       	out	0x3d, r28	; 61
	/* Start timer counting */
	Timer1_ConfigType conf={0,0,N_1024,NORMAL};
    2f7c:	ce 01       	movw	r24, r28
    2f7e:	01 96       	adiw	r24, 0x01	; 1
    2f80:	98 87       	std	Y+8, r25	; 0x08
    2f82:	8f 83       	std	Y+7, r24	; 0x07
    2f84:	e2 ea       	ldi	r30, 0xA2	; 162
    2f86:	f0 e0       	ldi	r31, 0x00	; 0
    2f88:	fa 87       	std	Y+10, r31	; 0x0a
    2f8a:	e9 87       	std	Y+9, r30	; 0x09
    2f8c:	f6 e0       	ldi	r31, 0x06	; 6
    2f8e:	fb 87       	std	Y+11, r31	; 0x0b
    2f90:	e9 85       	ldd	r30, Y+9	; 0x09
    2f92:	fa 85       	ldd	r31, Y+10	; 0x0a
    2f94:	00 80       	ld	r0, Z
    2f96:	89 85       	ldd	r24, Y+9	; 0x09
    2f98:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f9a:	01 96       	adiw	r24, 0x01	; 1
    2f9c:	9a 87       	std	Y+10, r25	; 0x0a
    2f9e:	89 87       	std	Y+9, r24	; 0x09
    2fa0:	ef 81       	ldd	r30, Y+7	; 0x07
    2fa2:	f8 85       	ldd	r31, Y+8	; 0x08
    2fa4:	00 82       	st	Z, r0
    2fa6:	8f 81       	ldd	r24, Y+7	; 0x07
    2fa8:	98 85       	ldd	r25, Y+8	; 0x08
    2faa:	01 96       	adiw	r24, 0x01	; 1
    2fac:	98 87       	std	Y+8, r25	; 0x08
    2fae:	8f 83       	std	Y+7, r24	; 0x07
    2fb0:	9b 85       	ldd	r25, Y+11	; 0x0b
    2fb2:	91 50       	subi	r25, 0x01	; 1
    2fb4:	9b 87       	std	Y+11, r25	; 0x0b
    2fb6:	eb 85       	ldd	r30, Y+11	; 0x0b
    2fb8:	ee 23       	and	r30, r30
    2fba:	51 f7       	brne	.-44     	; 0x2f90 <TCRT1+0x28>
	TIMER1_init(&conf);
    2fbc:	ce 01       	movw	r24, r28
    2fbe:	01 96       	adiw	r24, 0x01	; 1
    2fc0:	0e 94 c7 0a 	call	0x158e	; 0x158e <TIMER1_init>
}
    2fc4:	2b 96       	adiw	r28, 0x0b	; 11
    2fc6:	0f b6       	in	r0, 0x3f	; 63
    2fc8:	f8 94       	cli
    2fca:	de bf       	out	0x3e, r29	; 62
    2fcc:	0f be       	out	0x3f, r0	; 63
    2fce:	cd bf       	out	0x3d, r28	; 61
    2fd0:	cf 91       	pop	r28
    2fd2:	df 91       	pop	r29
    2fd4:	08 95       	ret

00002fd6 <TCRT2>:
 * and display it on LCD and send it to PC using UART
 * it also check the speed if it less than 15cm/sec then we are in safe and it will light a green for 1 sec
 * LED else it will illuminate a red led and the buzzer will work for 1 sec also
 */
void TCRT2()
{
    2fd6:	df 93       	push	r29
    2fd8:	cf 93       	push	r28
    2fda:	cd b7       	in	r28, 0x3d	; 61
    2fdc:	de b7       	in	r29, 0x3e	; 62
    2fde:	a0 97       	sbiw	r28, 0x20	; 32
    2fe0:	0f b6       	in	r0, 0x3f	; 63
    2fe2:	f8 94       	cli
    2fe4:	de bf       	out	0x3e, r29	; 62
    2fe6:	0f be       	out	0x3f, r0	; 63
    2fe8:	cd bf       	out	0x3d, r28	; 61
	/* Get the timer value */
	uint16 tick = TIMER1_getTCRT();
    2fea:	0e 94 34 0b 	call	0x1668	; 0x1668 <TIMER1_getTCRT>
    2fee:	98 a3       	std	Y+32, r25	; 0x20
    2ff0:	8f 8f       	std	Y+31, r24	; 0x1f

	/* calculate the speed */
	uint16 speed = (uint16) (  ( (uint32) (DISTANCE_MUL_PRESCALER_OVER_CPU_FREQ) ) / tick);
    2ff2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ff4:	98 a1       	ldd	r25, Y+32	; 0x20
    2ff6:	9c 01       	movw	r18, r24
    2ff8:	40 e0       	ldi	r20, 0x00	; 0
    2ffa:	50 e0       	ldi	r21, 0x00	; 0
    2ffc:	83 e9       	ldi	r24, 0x93	; 147
    2ffe:	93 e9       	ldi	r25, 0x93	; 147
    3000:	a3 e0       	ldi	r26, 0x03	; 3
    3002:	b0 e0       	ldi	r27, 0x00	; 0
    3004:	bc 01       	movw	r22, r24
    3006:	cd 01       	movw	r24, r26
    3008:	0e 94 56 19 	call	0x32ac	; 0x32ac <__udivmodsi4>
    300c:	da 01       	movw	r26, r20
    300e:	c9 01       	movw	r24, r18
    3010:	9e 8f       	std	Y+30, r25	; 0x1e
    3012:	8d 8f       	std	Y+29, r24	; 0x1d

	/* display the speed on LCD */
	LCD_moveCursor(0, 8);
    3014:	80 e0       	ldi	r24, 0x00	; 0
    3016:	68 e0       	ldi	r22, 0x08	; 8
    3018:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <LCD_moveCursor>
	LCD_intgerToString(speed);
    301c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    301e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3020:	0e 94 67 16 	call	0x2cce	; 0x2cce <LCD_intgerToString>

	/* Illuminate the RED LED and buzzer because the car speed exceeds the limit*/
	if(speed > 15){
    3024:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3026:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3028:	80 31       	cpi	r24, 0x10	; 16
    302a:	91 05       	cpc	r25, r1
    302c:	08 f4       	brcc	.+2      	; 0x3030 <TCRT2+0x5a>
    302e:	7b c0       	rjmp	.+246    	; 0x3126 <TCRT2+0x150>

		/* Turn the buzzer and led on*/
		Buzzer_on();
    3030:	0e 94 4c 0c 	call	0x1898	; 0x1898 <Buzzer_on>
		RED_LED_on();
    3034:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <RED_LED_on>
    3038:	80 e0       	ldi	r24, 0x00	; 0
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	aa e7       	ldi	r26, 0x7A	; 122
    303e:	b4 e4       	ldi	r27, 0x44	; 68
    3040:	89 8f       	std	Y+25, r24	; 0x19
    3042:	9a 8f       	std	Y+26, r25	; 0x1a
    3044:	ab 8f       	std	Y+27, r26	; 0x1b
    3046:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3048:	69 8d       	ldd	r22, Y+25	; 0x19
    304a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    304c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    304e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3050:	20 e0       	ldi	r18, 0x00	; 0
    3052:	30 e0       	ldi	r19, 0x00	; 0
    3054:	4a e7       	ldi	r20, 0x7A	; 122
    3056:	55 e4       	ldi	r21, 0x45	; 69
    3058:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    305c:	dc 01       	movw	r26, r24
    305e:	cb 01       	movw	r24, r22
    3060:	8d 8b       	std	Y+21, r24	; 0x15
    3062:	9e 8b       	std	Y+22, r25	; 0x16
    3064:	af 8b       	std	Y+23, r26	; 0x17
    3066:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3068:	6d 89       	ldd	r22, Y+21	; 0x15
    306a:	7e 89       	ldd	r23, Y+22	; 0x16
    306c:	8f 89       	ldd	r24, Y+23	; 0x17
    306e:	98 8d       	ldd	r25, Y+24	; 0x18
    3070:	20 e0       	ldi	r18, 0x00	; 0
    3072:	30 e0       	ldi	r19, 0x00	; 0
    3074:	40 e8       	ldi	r20, 0x80	; 128
    3076:	5f e3       	ldi	r21, 0x3F	; 63
    3078:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    307c:	88 23       	and	r24, r24
    307e:	2c f4       	brge	.+10     	; 0x308a <TCRT2+0xb4>
		__ticks = 1;
    3080:	81 e0       	ldi	r24, 0x01	; 1
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	9c 8b       	std	Y+20, r25	; 0x14
    3086:	8b 8b       	std	Y+19, r24	; 0x13
    3088:	3f c0       	rjmp	.+126    	; 0x3108 <TCRT2+0x132>
	else if (__tmp > 65535)
    308a:	6d 89       	ldd	r22, Y+21	; 0x15
    308c:	7e 89       	ldd	r23, Y+22	; 0x16
    308e:	8f 89       	ldd	r24, Y+23	; 0x17
    3090:	98 8d       	ldd	r25, Y+24	; 0x18
    3092:	20 e0       	ldi	r18, 0x00	; 0
    3094:	3f ef       	ldi	r19, 0xFF	; 255
    3096:	4f e7       	ldi	r20, 0x7F	; 127
    3098:	57 e4       	ldi	r21, 0x47	; 71
    309a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    309e:	18 16       	cp	r1, r24
    30a0:	4c f5       	brge	.+82     	; 0x30f4 <TCRT2+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30a2:	69 8d       	ldd	r22, Y+25	; 0x19
    30a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30aa:	20 e0       	ldi	r18, 0x00	; 0
    30ac:	30 e0       	ldi	r19, 0x00	; 0
    30ae:	40 e2       	ldi	r20, 0x20	; 32
    30b0:	51 e4       	ldi	r21, 0x41	; 65
    30b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30b6:	dc 01       	movw	r26, r24
    30b8:	cb 01       	movw	r24, r22
    30ba:	bc 01       	movw	r22, r24
    30bc:	cd 01       	movw	r24, r26
    30be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30c2:	dc 01       	movw	r26, r24
    30c4:	cb 01       	movw	r24, r22
    30c6:	9c 8b       	std	Y+20, r25	; 0x14
    30c8:	8b 8b       	std	Y+19, r24	; 0x13
    30ca:	0f c0       	rjmp	.+30     	; 0x30ea <TCRT2+0x114>
    30cc:	80 e9       	ldi	r24, 0x90	; 144
    30ce:	91 e0       	ldi	r25, 0x01	; 1
    30d0:	9a 8b       	std	Y+18, r25	; 0x12
    30d2:	89 8b       	std	Y+17, r24	; 0x11
    30d4:	89 89       	ldd	r24, Y+17	; 0x11
    30d6:	9a 89       	ldd	r25, Y+18	; 0x12
    30d8:	01 97       	sbiw	r24, 0x01	; 1
    30da:	f1 f7       	brne	.-4      	; 0x30d8 <TCRT2+0x102>
    30dc:	9a 8b       	std	Y+18, r25	; 0x12
    30de:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30e0:	8b 89       	ldd	r24, Y+19	; 0x13
    30e2:	9c 89       	ldd	r25, Y+20	; 0x14
    30e4:	01 97       	sbiw	r24, 0x01	; 1
    30e6:	9c 8b       	std	Y+20, r25	; 0x14
    30e8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30ea:	8b 89       	ldd	r24, Y+19	; 0x13
    30ec:	9c 89       	ldd	r25, Y+20	; 0x14
    30ee:	00 97       	sbiw	r24, 0x00	; 0
    30f0:	69 f7       	brne	.-38     	; 0x30cc <TCRT2+0xf6>
    30f2:	14 c0       	rjmp	.+40     	; 0x311c <TCRT2+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30f4:	6d 89       	ldd	r22, Y+21	; 0x15
    30f6:	7e 89       	ldd	r23, Y+22	; 0x16
    30f8:	8f 89       	ldd	r24, Y+23	; 0x17
    30fa:	98 8d       	ldd	r25, Y+24	; 0x18
    30fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3100:	dc 01       	movw	r26, r24
    3102:	cb 01       	movw	r24, r22
    3104:	9c 8b       	std	Y+20, r25	; 0x14
    3106:	8b 8b       	std	Y+19, r24	; 0x13
    3108:	8b 89       	ldd	r24, Y+19	; 0x13
    310a:	9c 89       	ldd	r25, Y+20	; 0x14
    310c:	98 8b       	std	Y+16, r25	; 0x10
    310e:	8f 87       	std	Y+15, r24	; 0x0f
    3110:	8f 85       	ldd	r24, Y+15	; 0x0f
    3112:	98 89       	ldd	r25, Y+16	; 0x10
    3114:	01 97       	sbiw	r24, 0x01	; 1
    3116:	f1 f7       	brne	.-4      	; 0x3114 <TCRT2+0x13e>
    3118:	98 8b       	std	Y+16, r25	; 0x10
    311a:	8f 87       	std	Y+15, r24	; 0x0f

		/* wait 1 sec*/
		_delay_ms(1000);

		/* turn them off*/
		Buzzer_off();
    311c:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <Buzzer_off>
		RED_LED_off();
    3120:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <RED_LED_off>
    3124:	7a c0       	rjmp	.+244    	; 0x321a <TCRT2+0x244>

	/* Illuminate the GREEN LED and buzzer because the car speed doesn't exceed the limit*/
	else
	{
		/* The speed may be 1 digit which will lead an error on LCD , so we will display space after the speed*/
		LCD_displayString("  ");
    3126:	83 e7       	ldi	r24, 0x73	; 115
    3128:	90 e0       	ldi	r25, 0x00	; 0
    312a:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <LCD_displayString>

		/* Turn on the green led*/
		GRN_LED_on();
    312e:	0e 94 75 0c 	call	0x18ea	; 0x18ea <GRN_LED_on>
    3132:	80 e0       	ldi	r24, 0x00	; 0
    3134:	90 e0       	ldi	r25, 0x00	; 0
    3136:	aa e7       	ldi	r26, 0x7A	; 122
    3138:	b4 e4       	ldi	r27, 0x44	; 68
    313a:	8b 87       	std	Y+11, r24	; 0x0b
    313c:	9c 87       	std	Y+12, r25	; 0x0c
    313e:	ad 87       	std	Y+13, r26	; 0x0d
    3140:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3142:	6b 85       	ldd	r22, Y+11	; 0x0b
    3144:	7c 85       	ldd	r23, Y+12	; 0x0c
    3146:	8d 85       	ldd	r24, Y+13	; 0x0d
    3148:	9e 85       	ldd	r25, Y+14	; 0x0e
    314a:	20 e0       	ldi	r18, 0x00	; 0
    314c:	30 e0       	ldi	r19, 0x00	; 0
    314e:	4a e7       	ldi	r20, 0x7A	; 122
    3150:	55 e4       	ldi	r21, 0x45	; 69
    3152:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3156:	dc 01       	movw	r26, r24
    3158:	cb 01       	movw	r24, r22
    315a:	8f 83       	std	Y+7, r24	; 0x07
    315c:	98 87       	std	Y+8, r25	; 0x08
    315e:	a9 87       	std	Y+9, r26	; 0x09
    3160:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3162:	6f 81       	ldd	r22, Y+7	; 0x07
    3164:	78 85       	ldd	r23, Y+8	; 0x08
    3166:	89 85       	ldd	r24, Y+9	; 0x09
    3168:	9a 85       	ldd	r25, Y+10	; 0x0a
    316a:	20 e0       	ldi	r18, 0x00	; 0
    316c:	30 e0       	ldi	r19, 0x00	; 0
    316e:	40 e8       	ldi	r20, 0x80	; 128
    3170:	5f e3       	ldi	r21, 0x3F	; 63
    3172:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3176:	88 23       	and	r24, r24
    3178:	2c f4       	brge	.+10     	; 0x3184 <TCRT2+0x1ae>
		__ticks = 1;
    317a:	81 e0       	ldi	r24, 0x01	; 1
    317c:	90 e0       	ldi	r25, 0x00	; 0
    317e:	9e 83       	std	Y+6, r25	; 0x06
    3180:	8d 83       	std	Y+5, r24	; 0x05
    3182:	3f c0       	rjmp	.+126    	; 0x3202 <TCRT2+0x22c>
	else if (__tmp > 65535)
    3184:	6f 81       	ldd	r22, Y+7	; 0x07
    3186:	78 85       	ldd	r23, Y+8	; 0x08
    3188:	89 85       	ldd	r24, Y+9	; 0x09
    318a:	9a 85       	ldd	r25, Y+10	; 0x0a
    318c:	20 e0       	ldi	r18, 0x00	; 0
    318e:	3f ef       	ldi	r19, 0xFF	; 255
    3190:	4f e7       	ldi	r20, 0x7F	; 127
    3192:	57 e4       	ldi	r21, 0x47	; 71
    3194:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3198:	18 16       	cp	r1, r24
    319a:	4c f5       	brge	.+82     	; 0x31ee <TCRT2+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    319c:	6b 85       	ldd	r22, Y+11	; 0x0b
    319e:	7c 85       	ldd	r23, Y+12	; 0x0c
    31a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    31a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    31a4:	20 e0       	ldi	r18, 0x00	; 0
    31a6:	30 e0       	ldi	r19, 0x00	; 0
    31a8:	40 e2       	ldi	r20, 0x20	; 32
    31aa:	51 e4       	ldi	r21, 0x41	; 65
    31ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31b0:	dc 01       	movw	r26, r24
    31b2:	cb 01       	movw	r24, r22
    31b4:	bc 01       	movw	r22, r24
    31b6:	cd 01       	movw	r24, r26
    31b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31bc:	dc 01       	movw	r26, r24
    31be:	cb 01       	movw	r24, r22
    31c0:	9e 83       	std	Y+6, r25	; 0x06
    31c2:	8d 83       	std	Y+5, r24	; 0x05
    31c4:	0f c0       	rjmp	.+30     	; 0x31e4 <TCRT2+0x20e>
    31c6:	80 e9       	ldi	r24, 0x90	; 144
    31c8:	91 e0       	ldi	r25, 0x01	; 1
    31ca:	9c 83       	std	Y+4, r25	; 0x04
    31cc:	8b 83       	std	Y+3, r24	; 0x03
    31ce:	8b 81       	ldd	r24, Y+3	; 0x03
    31d0:	9c 81       	ldd	r25, Y+4	; 0x04
    31d2:	01 97       	sbiw	r24, 0x01	; 1
    31d4:	f1 f7       	brne	.-4      	; 0x31d2 <TCRT2+0x1fc>
    31d6:	9c 83       	std	Y+4, r25	; 0x04
    31d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31da:	8d 81       	ldd	r24, Y+5	; 0x05
    31dc:	9e 81       	ldd	r25, Y+6	; 0x06
    31de:	01 97       	sbiw	r24, 0x01	; 1
    31e0:	9e 83       	std	Y+6, r25	; 0x06
    31e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31e4:	8d 81       	ldd	r24, Y+5	; 0x05
    31e6:	9e 81       	ldd	r25, Y+6	; 0x06
    31e8:	00 97       	sbiw	r24, 0x00	; 0
    31ea:	69 f7       	brne	.-38     	; 0x31c6 <TCRT2+0x1f0>
    31ec:	14 c0       	rjmp	.+40     	; 0x3216 <TCRT2+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31ee:	6f 81       	ldd	r22, Y+7	; 0x07
    31f0:	78 85       	ldd	r23, Y+8	; 0x08
    31f2:	89 85       	ldd	r24, Y+9	; 0x09
    31f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    31f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31fa:	dc 01       	movw	r26, r24
    31fc:	cb 01       	movw	r24, r22
    31fe:	9e 83       	std	Y+6, r25	; 0x06
    3200:	8d 83       	std	Y+5, r24	; 0x05
    3202:	8d 81       	ldd	r24, Y+5	; 0x05
    3204:	9e 81       	ldd	r25, Y+6	; 0x06
    3206:	9a 83       	std	Y+2, r25	; 0x02
    3208:	89 83       	std	Y+1, r24	; 0x01
    320a:	89 81       	ldd	r24, Y+1	; 0x01
    320c:	9a 81       	ldd	r25, Y+2	; 0x02
    320e:	01 97       	sbiw	r24, 0x01	; 1
    3210:	f1 f7       	brne	.-4      	; 0x320e <TCRT2+0x238>
    3212:	9a 83       	std	Y+2, r25	; 0x02
    3214:	89 83       	std	Y+1, r24	; 0x01

		/*wait 1 sec*/
		_delay_ms(1000);

		/* Turn off the green led*/
		GRN_LED_off();
    3216:	0e 94 81 0c 	call	0x1902	; 0x1902 <GRN_LED_off>
	}

	/* display the speed on tera terminal */
	send_to_terminal(speed);
    321a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    321c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    321e:	0e 94 1a 19 	call	0x3234	; 0x3234 <send_to_terminal>
}
    3222:	a0 96       	adiw	r28, 0x20	; 32
    3224:	0f b6       	in	r0, 0x3f	; 63
    3226:	f8 94       	cli
    3228:	de bf       	out	0x3e, r29	; 62
    322a:	0f be       	out	0x3f, r0	; 63
    322c:	cd bf       	out	0x3d, r28	; 61
    322e:	cf 91       	pop	r28
    3230:	df 91       	pop	r29
    3232:	08 95       	ret

00003234 <send_to_terminal>:

/* a function to send the measured speed to PC to be displayed on tera terminal*/
void send_to_terminal(uint16 speed)
{
    3234:	df 93       	push	r29
    3236:	cf 93       	push	r28
    3238:	00 d0       	rcall	.+0      	; 0x323a <send_to_terminal+0x6>
    323a:	00 d0       	rcall	.+0      	; 0x323c <send_to_terminal+0x8>
    323c:	cd b7       	in	r28, 0x3d	; 61
    323e:	de b7       	in	r29, 0x3e	; 62
    3240:	9c 83       	std	Y+4, r25	; 0x04
    3242:	8b 83       	std	Y+3, r24	; 0x03
	uint8 *str;
	tostring(str,speed);
    3244:	2b 81       	ldd	r18, Y+3	; 0x03
    3246:	3c 81       	ldd	r19, Y+4	; 0x04
    3248:	89 81       	ldd	r24, Y+1	; 0x01
    324a:	9a 81       	ldd	r25, Y+2	; 0x02
    324c:	b9 01       	movw	r22, r18
    324e:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <tostring>

	UART_sendString("car speed = ");
    3252:	86 e7       	ldi	r24, 0x76	; 118
    3254:	90 e0       	ldi	r25, 0x00	; 0
    3256:	0e 94 0f 0c 	call	0x181e	; 0x181e <UART_sendString>
	UART_sendString(str);
    325a:	89 81       	ldd	r24, Y+1	; 0x01
    325c:	9a 81       	ldd	r25, Y+2	; 0x02
    325e:	0e 94 0f 0c 	call	0x181e	; 0x181e <UART_sendString>
	UART_sendString(" cm/sec \n");
    3262:	83 e8       	ldi	r24, 0x83	; 131
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	0e 94 0f 0c 	call	0x181e	; 0x181e <UART_sendString>
}
    326a:	0f 90       	pop	r0
    326c:	0f 90       	pop	r0
    326e:	0f 90       	pop	r0
    3270:	0f 90       	pop	r0
    3272:	cf 91       	pop	r28
    3274:	df 91       	pop	r29
    3276:	08 95       	ret

00003278 <main>:
#include"./APP/app.h"

int main()
{
    3278:	df 93       	push	r29
    327a:	cf 93       	push	r28
    327c:	cd b7       	in	r28, 0x3d	; 61
    327e:	de b7       	in	r29, 0x3e	; 62
	configurations();
    3280:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <configurations>
    3284:	ff cf       	rjmp	.-2      	; 0x3284 <main+0xc>

00003286 <__divmodhi4>:
    3286:	97 fb       	bst	r25, 7
    3288:	09 2e       	mov	r0, r25
    328a:	07 26       	eor	r0, r23
    328c:	0a d0       	rcall	.+20     	; 0x32a2 <__divmodhi4_neg1>
    328e:	77 fd       	sbrc	r23, 7
    3290:	04 d0       	rcall	.+8      	; 0x329a <__divmodhi4_neg2>
    3292:	2e d0       	rcall	.+92     	; 0x32f0 <__udivmodhi4>
    3294:	06 d0       	rcall	.+12     	; 0x32a2 <__divmodhi4_neg1>
    3296:	00 20       	and	r0, r0
    3298:	1a f4       	brpl	.+6      	; 0x32a0 <__divmodhi4_exit>

0000329a <__divmodhi4_neg2>:
    329a:	70 95       	com	r23
    329c:	61 95       	neg	r22
    329e:	7f 4f       	sbci	r23, 0xFF	; 255

000032a0 <__divmodhi4_exit>:
    32a0:	08 95       	ret

000032a2 <__divmodhi4_neg1>:
    32a2:	f6 f7       	brtc	.-4      	; 0x32a0 <__divmodhi4_exit>
    32a4:	90 95       	com	r25
    32a6:	81 95       	neg	r24
    32a8:	9f 4f       	sbci	r25, 0xFF	; 255
    32aa:	08 95       	ret

000032ac <__udivmodsi4>:
    32ac:	a1 e2       	ldi	r26, 0x21	; 33
    32ae:	1a 2e       	mov	r1, r26
    32b0:	aa 1b       	sub	r26, r26
    32b2:	bb 1b       	sub	r27, r27
    32b4:	fd 01       	movw	r30, r26
    32b6:	0d c0       	rjmp	.+26     	; 0x32d2 <__udivmodsi4_ep>

000032b8 <__udivmodsi4_loop>:
    32b8:	aa 1f       	adc	r26, r26
    32ba:	bb 1f       	adc	r27, r27
    32bc:	ee 1f       	adc	r30, r30
    32be:	ff 1f       	adc	r31, r31
    32c0:	a2 17       	cp	r26, r18
    32c2:	b3 07       	cpc	r27, r19
    32c4:	e4 07       	cpc	r30, r20
    32c6:	f5 07       	cpc	r31, r21
    32c8:	20 f0       	brcs	.+8      	; 0x32d2 <__udivmodsi4_ep>
    32ca:	a2 1b       	sub	r26, r18
    32cc:	b3 0b       	sbc	r27, r19
    32ce:	e4 0b       	sbc	r30, r20
    32d0:	f5 0b       	sbc	r31, r21

000032d2 <__udivmodsi4_ep>:
    32d2:	66 1f       	adc	r22, r22
    32d4:	77 1f       	adc	r23, r23
    32d6:	88 1f       	adc	r24, r24
    32d8:	99 1f       	adc	r25, r25
    32da:	1a 94       	dec	r1
    32dc:	69 f7       	brne	.-38     	; 0x32b8 <__udivmodsi4_loop>
    32de:	60 95       	com	r22
    32e0:	70 95       	com	r23
    32e2:	80 95       	com	r24
    32e4:	90 95       	com	r25
    32e6:	9b 01       	movw	r18, r22
    32e8:	ac 01       	movw	r20, r24
    32ea:	bd 01       	movw	r22, r26
    32ec:	cf 01       	movw	r24, r30
    32ee:	08 95       	ret

000032f0 <__udivmodhi4>:
    32f0:	aa 1b       	sub	r26, r26
    32f2:	bb 1b       	sub	r27, r27
    32f4:	51 e1       	ldi	r21, 0x11	; 17
    32f6:	07 c0       	rjmp	.+14     	; 0x3306 <__udivmodhi4_ep>

000032f8 <__udivmodhi4_loop>:
    32f8:	aa 1f       	adc	r26, r26
    32fa:	bb 1f       	adc	r27, r27
    32fc:	a6 17       	cp	r26, r22
    32fe:	b7 07       	cpc	r27, r23
    3300:	10 f0       	brcs	.+4      	; 0x3306 <__udivmodhi4_ep>
    3302:	a6 1b       	sub	r26, r22
    3304:	b7 0b       	sbc	r27, r23

00003306 <__udivmodhi4_ep>:
    3306:	88 1f       	adc	r24, r24
    3308:	99 1f       	adc	r25, r25
    330a:	5a 95       	dec	r21
    330c:	a9 f7       	brne	.-22     	; 0x32f8 <__udivmodhi4_loop>
    330e:	80 95       	com	r24
    3310:	90 95       	com	r25
    3312:	bc 01       	movw	r22, r24
    3314:	cd 01       	movw	r24, r26
    3316:	08 95       	ret

00003318 <__prologue_saves__>:
    3318:	2f 92       	push	r2
    331a:	3f 92       	push	r3
    331c:	4f 92       	push	r4
    331e:	5f 92       	push	r5
    3320:	6f 92       	push	r6
    3322:	7f 92       	push	r7
    3324:	8f 92       	push	r8
    3326:	9f 92       	push	r9
    3328:	af 92       	push	r10
    332a:	bf 92       	push	r11
    332c:	cf 92       	push	r12
    332e:	df 92       	push	r13
    3330:	ef 92       	push	r14
    3332:	ff 92       	push	r15
    3334:	0f 93       	push	r16
    3336:	1f 93       	push	r17
    3338:	cf 93       	push	r28
    333a:	df 93       	push	r29
    333c:	cd b7       	in	r28, 0x3d	; 61
    333e:	de b7       	in	r29, 0x3e	; 62
    3340:	ca 1b       	sub	r28, r26
    3342:	db 0b       	sbc	r29, r27
    3344:	0f b6       	in	r0, 0x3f	; 63
    3346:	f8 94       	cli
    3348:	de bf       	out	0x3e, r29	; 62
    334a:	0f be       	out	0x3f, r0	; 63
    334c:	cd bf       	out	0x3d, r28	; 61
    334e:	09 94       	ijmp

00003350 <__epilogue_restores__>:
    3350:	2a 88       	ldd	r2, Y+18	; 0x12
    3352:	39 88       	ldd	r3, Y+17	; 0x11
    3354:	48 88       	ldd	r4, Y+16	; 0x10
    3356:	5f 84       	ldd	r5, Y+15	; 0x0f
    3358:	6e 84       	ldd	r6, Y+14	; 0x0e
    335a:	7d 84       	ldd	r7, Y+13	; 0x0d
    335c:	8c 84       	ldd	r8, Y+12	; 0x0c
    335e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3360:	aa 84       	ldd	r10, Y+10	; 0x0a
    3362:	b9 84       	ldd	r11, Y+9	; 0x09
    3364:	c8 84       	ldd	r12, Y+8	; 0x08
    3366:	df 80       	ldd	r13, Y+7	; 0x07
    3368:	ee 80       	ldd	r14, Y+6	; 0x06
    336a:	fd 80       	ldd	r15, Y+5	; 0x05
    336c:	0c 81       	ldd	r16, Y+4	; 0x04
    336e:	1b 81       	ldd	r17, Y+3	; 0x03
    3370:	aa 81       	ldd	r26, Y+2	; 0x02
    3372:	b9 81       	ldd	r27, Y+1	; 0x01
    3374:	ce 0f       	add	r28, r30
    3376:	d1 1d       	adc	r29, r1
    3378:	0f b6       	in	r0, 0x3f	; 63
    337a:	f8 94       	cli
    337c:	de bf       	out	0x3e, r29	; 62
    337e:	0f be       	out	0x3f, r0	; 63
    3380:	cd bf       	out	0x3d, r28	; 61
    3382:	ed 01       	movw	r28, r26
    3384:	08 95       	ret

00003386 <itoa>:
    3386:	fb 01       	movw	r30, r22
    3388:	9f 01       	movw	r18, r30
    338a:	e8 94       	clt
    338c:	42 30       	cpi	r20, 0x02	; 2
    338e:	c4 f0       	brlt	.+48     	; 0x33c0 <itoa+0x3a>
    3390:	45 32       	cpi	r20, 0x25	; 37
    3392:	b4 f4       	brge	.+44     	; 0x33c0 <itoa+0x3a>
    3394:	4a 30       	cpi	r20, 0x0A	; 10
    3396:	29 f4       	brne	.+10     	; 0x33a2 <itoa+0x1c>
    3398:	97 fb       	bst	r25, 7
    339a:	1e f4       	brtc	.+6      	; 0x33a2 <itoa+0x1c>
    339c:	90 95       	com	r25
    339e:	81 95       	neg	r24
    33a0:	9f 4f       	sbci	r25, 0xFF	; 255
    33a2:	64 2f       	mov	r22, r20
    33a4:	77 27       	eor	r23, r23
    33a6:	0e 94 78 19 	call	0x32f0	; 0x32f0 <__udivmodhi4>
    33aa:	80 5d       	subi	r24, 0xD0	; 208
    33ac:	8a 33       	cpi	r24, 0x3A	; 58
    33ae:	0c f0       	brlt	.+2      	; 0x33b2 <itoa+0x2c>
    33b0:	89 5d       	subi	r24, 0xD9	; 217
    33b2:	81 93       	st	Z+, r24
    33b4:	cb 01       	movw	r24, r22
    33b6:	00 97       	sbiw	r24, 0x00	; 0
    33b8:	a1 f7       	brne	.-24     	; 0x33a2 <itoa+0x1c>
    33ba:	16 f4       	brtc	.+4      	; 0x33c0 <itoa+0x3a>
    33bc:	5d e2       	ldi	r21, 0x2D	; 45
    33be:	51 93       	st	Z+, r21
    33c0:	10 82       	st	Z, r1
    33c2:	c9 01       	movw	r24, r18
    33c4:	0c 94 e4 19 	jmp	0x33c8	; 0x33c8 <strrev>

000033c8 <strrev>:
    33c8:	dc 01       	movw	r26, r24
    33ca:	fc 01       	movw	r30, r24
    33cc:	67 2f       	mov	r22, r23
    33ce:	71 91       	ld	r23, Z+
    33d0:	77 23       	and	r23, r23
    33d2:	e1 f7       	brne	.-8      	; 0x33cc <strrev+0x4>
    33d4:	32 97       	sbiw	r30, 0x02	; 2
    33d6:	04 c0       	rjmp	.+8      	; 0x33e0 <strrev+0x18>
    33d8:	7c 91       	ld	r23, X
    33da:	6d 93       	st	X+, r22
    33dc:	70 83       	st	Z, r23
    33de:	62 91       	ld	r22, -Z
    33e0:	ae 17       	cp	r26, r30
    33e2:	bf 07       	cpc	r27, r31
    33e4:	c8 f3       	brcs	.-14     	; 0x33d8 <strrev+0x10>
    33e6:	08 95       	ret

000033e8 <_exit>:
    33e8:	f8 94       	cli

000033ea <__stop_program>:
    33ea:	ff cf       	rjmp	.-2      	; 0x33ea <__stop_program>
